<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ALLTICKETS" xml:space="preserve">
    <value>Alle Tickets</value>
  </data>
  <data name="ACTIVE" xml:space="preserve">
    <value>Aktive</value>
    <comment>Custom Groups</comment>
  </data>
  <data name="BTCWITHDRAWSUCCESS" xml:space="preserve">
    <value>Sie haben erfolgreich %n% ausgezahlt</value>
    <comment>Leave %n% unchanged</comment>
  </data>
  <data name="BUYTICKETS" xml:space="preserve">
    <value>Kaufe Tickets</value>
  </data>
  <data name="ENTERVALIDADDRESS" xml:space="preserve">
    <value>Bitte geben Sie eine gültige Adresse ein</value>
  </data>
  <data name="INVALIDNUMBEROFTICKETS" xml:space="preserve">
    <value>Anzahl der Tickets muß größer als 0 sein</value>
  </data>
  <data name="JACKPOT" xml:space="preserve">
    <value>Jackpot</value>
  </data>
  <data name="JACKPOTDESCRIPTION" xml:space="preserve">
    <value>Glücklich? Kaufe mehr Tickets um den Verdienst zu steigern!</value>
  </data>
  <data name="JACKPOTS" xml:space="preserve">
    <value>Jackpots</value>
  </data>
  <data name="PARTICIPANTS" xml:space="preserve">
    <value>Teilnehmer</value>
  </data>
  <data name="SINGLETICKET" xml:space="preserve">
    <value>Einzelnes Ticket</value>
  </data>
  <data name="EXPIRED" xml:space="preserve">
    <value>Abgelaufen</value>
    <comment>Custom Groups</comment>
  </data>
  <data name="INPROGRESS" xml:space="preserve">
    <value>In Arbeit</value>
    <comment>Custom Groups</comment>
  </data>
  <data name="STARTPAGEINFO" xml:space="preserve">
    <value>Ihr Anzeige wird als erstes an dem entsprechenden Tag angezeigt</value>
  </data>
  <data name="TICKETPURCHASESUCCESS" xml:space="preserve">
    <value>Sie haben erfolgreich %n% Tickets gekauft.</value>
    <comment>Leave %n% unchanged</comment>
  </data>
  <data name="WINNER" xml:space="preserve">
    <value>Gewinner</value>
  </data>
  <data name="WINNINGTICKET" xml:space="preserve">
    <value>Gewinner Ticket</value>
  </data>
  <data name="WITHDRAWALMUSTBEHIGHER" xml:space="preserve">
    <value>Sie können nicht weniger als unten angezeigt auszahlen</value>
  </data>
  <data name="YOURTICKETS" xml:space="preserve">
    <value>Ihre Tickets</value>
  </data>
  <data name="YOUWILL1" xml:space="preserve">
    <value>Sie werden heute %p% Einnahmen erhalten, weil sie gestern %n%/%l% %p% Anzeigen betrachtet haben.</value>
  </data>
  <data name="YOUWILL2" xml:space="preserve">
    <value>Sie werden heute %p% Einnahmen erhalten, weil sich Ihr Konto derzeit im Urlaubsmodus befindet.</value>
  </data>
  <data name="YOUWILL3" xml:space="preserve">
    <value>Sie werden heute %p% Einnahmen aufgrund Ihrer heutigen Registrierung erhalten. Sie müssen mindestens %l% %p% Anzeigen heute anschauen um morgen Ihre %p% Einnahmen zu erhalten.</value>
  </data>
  <data name="YOUWILLNOT1" xml:space="preserve">
    <value>Sie werden heute keine %p% Einnahmen erhalten, weil Sie gestern nur %n%/%l% %p% Anzeigen angeschaut haben.</value>
  </data>
  <data name="YOUWONJACKPOT" xml:space="preserve">
    <value>Sie haben den Jackpot gewonnen mit Ticket</value>
  </data>
  <data name="ESTIMATEDBTCVALUE" xml:space="preserve">
    <value>Geschätzter BTC Wert</value>
  </data>
  <data name="BETS" xml:space="preserve">
    <value>Gebote</value>
  </data>
  <data name="LOSSES" xml:space="preserve">
    <value>Verluste</value>
  </data>
  <data name="WAGERED" xml:space="preserve">
    <value>Gewettet</value>
  </data>
  <data name="WINS" xml:space="preserve">
    <value>Gewinne</value>
  </data>
</root>