/****** Object:  FullTextCatalog [YafSearch]    Script Date: 06.02.2016 16:47:20 ******/
CREATE FULLTEXT CATALOG [YafSearch]WITH ACCENT_SENSITIVITY = ON

GO
/****** Object:  UserDefinedFunction [dbo].[yaf_forum_lastposted]    Script Date: 06.02.2016 16:47:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[yaf_forum_lastposted] 

(	
    @ForumID int,
    @UserID int = null,
    @LastTopicID int = null,
    @LastPosted datetime = null
)
RETURNS @LastPostInForum TABLE 
(
    LastTopicID int,
    LastPosted datetime
)
AS
BEGIN
    -- local variables for temporary values
    declare @SubforumID int
    declare @TopicID int
    declare @Posted datetime

    -- try to retrieve last direct topic posed in forums if not supplied as argument 
    if (@LastTopicID is null or @LastPosted is null) BEGIN
        IF (@UserID IS NULL)
        BEGIN	
                SELECT TOP 1 
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    a.ForumID = @ForumID AND a.IsHidden = 0
        END			
        ELSE
        BEGIN	
                SELECT TOP 1
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    (a.IsHidden = 0 or x.ReadAccess <> 0) AND a.ForumID=@ForumID and x.UserID=@UserID
        END	
    END

    -- look for newer topic/message in subforums
    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)

    begin
        declare c cursor FORWARD_ONLY READ_ONLY for
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (x.UserID=@UserID and ((a.Flags & 2)=0 or x.ReadAccess<>0))
                )	
            UNION			
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess]x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (@UserID is null and (a.Flags & 2)=0)
                )
            
        open c
        
        -- cycle through subforums
        fetch next from c into @SubforumID, @TopicID, @Posted
        while @@FETCH_STATUS = 0
        begin
            -- get last topic/message info for subforum
            SELECT 
                @TopicID = LastTopicID,
                @Posted = LastPosted
            FROM
                [dbo].[yaf_forum_lastposted](@SubforumID, @UserID, @TopicID, @Posted)


            -- if subforum has newer topic/message, make it last for parent forum
            if (@TopicID is not null and @Posted is not null and @LastPosted < @Posted) begin
                SET @LastTopicID = @TopicID
                SET @LastPosted = @Posted
            end

            fetch next from c into @SubforumID, @TopicID, @Posted
        end
        close c
        deallocate c
    end

    -- return vector
    INSERT @LastPostInForum
    SELECT 
        @LastTopicID,
        @LastPosted
    RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_forum_lasttopic]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[yaf_forum_lasttopic] 

(	
    @ForumID int,
    @UserID int = null,
    @LastTopicID int = null,
    @LastPosted datetime = null
) RETURNS int AS
BEGIN
    -- local variables for temporary values
    declare @SubforumID int
    declare @TopicID int
    declare @Posted datetime

    -- try to retrieve last direct topic posed in forums if not supplied as argument 
    if (@LastTopicID is null or @LastPosted is null) BEGIN
        IF (@UserID IS NULL)
        BEGIN	
                SELECT TOP 1 
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    a.ForumID = @ForumID AND a.IsHidden = 0
        END			
        ELSE
        BEGIN	
                SELECT TOP 1
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    (a.IsHidden = 0 or x.ReadAccess <> 0) AND a.ForumID=@ForumID and x.UserID=@UserID
        END	
    END

    -- look for newer topic/message in subforums
    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)
    begin
        declare c cursor FORWARD_ONLY READ_ONLY for
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (x.UserID=@UserID and ((a.Flags & 2)=0 or x.ReadAccess<>0))
                )	
            UNION			
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess]x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (@UserID is null and (a.Flags & 2)=0)
                )
            
        open c
        
        -- cycle through subforums
        fetch next from c into @SubforumID, @TopicID, @Posted
        while @@FETCH_STATUS = 0
        begin
            -- get last topic/message info for subforum
            SELECT 
                @TopicID = LastTopicID,
                @Posted = LastPosted
            FROM
                [dbo].[yaf_forum_lastposted](@SubforumID, @UserID, @TopicID, @Posted)


            -- if subforum has newer topic/message, make it last for parent forum
            if (@TopicID is not null and @Posted is not null and @LastPosted < @Posted) begin
                SET @LastTopicID = @TopicID
                SET @LastPosted = @Posted
            end
            -- workaround to avoid logical expressions with NULL possible differences through SQL server versions. 
            if (@TopicID is not null and @Posted is not null and @LastPosted is null) begin
                SET @LastTopicID = @TopicID
                SET @LastPosted = @Posted
            end	

            fetch next from c into @SubforumID, @TopicID, @Posted
        end
        close c
        deallocate c
    end

    -- return id of topic with last message in this forum or its subforums
    RETURN @LastTopicID
END
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_forum_posts]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[yaf_forum_posts](@ForumID int) returns int as
begin
    declare @NumPosts int
    declare @tmp int

    select @NumPosts=NumPosts from [dbo].[yaf_Forum] where ForumID=@ForumID


    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)

    begin
        declare c cursor for
        select ForumID from [dbo].[yaf_Forum]

        where ParentID = @ForumID
        
        open c
        
        fetch next from c into @tmp
        while @@FETCH_STATUS = 0
        begin
            set @NumPosts=@NumPosts+[dbo].[yaf_forum_posts](@tmp)

            fetch next from c into @tmp
        end
        close c
        deallocate c
    end

    return @NumPosts
end
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_forum_save_parentschecker]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[yaf_forum_save_parentschecker](@ForumID int, @ParentID int) returns int as

begin
-- Checks if the forum is already referenced as a parent 
    declare @dependency int
    declare @haschildren int
    declare @frmtmp int
    declare @prntmp int
    
    set @dependency = 0
    set @haschildren = 0
    
    select @dependency=ForumID from [dbo].[yaf_Forum] where ParentID=@ForumID AND ForumID = @ParentID;
    if @dependency > 0
    begin
    return @ParentID
    end

    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)
        begin        
        declare c cursor for
        select ForumID,ParentID from [dbo].[yaf_Forum]
        where ParentID = @ForumID
        
        open c
        
        fetch next from c into @frmtmp,@prntmp
        while @@FETCH_STATUS = 0
        begin
        if @frmtmp > 0 AND @frmtmp IS NOT NULL
         begin        
            set @haschildren= [dbo].[yaf_forum_save_parentschecker](@frmtmp,@ParentID)            
            if  @prntmp = @ParentID
            begin
            set @dependency= @ParentID
            end    
            else if @haschildren > 0
            begin
            set @dependency= @haschildren
            end        
        end
        fetch next from c into @frmtmp,@prntmp
        end
        close c
        deallocate c    
    end
    return @dependency
end
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_forum_topics]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[yaf_forum_topics](@ForumID int) returns int as

begin
    declare @NumTopics int
    declare @tmp int

    select @NumTopics=NumTopics from [dbo].[yaf_Forum] where ForumID=@ForumID


    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)

    begin
        declare c cursor for
        select ForumID from [dbo].[yaf_Forum]

        where ParentID = @ForumID
        
        open c
        
        fetch next from c into @tmp
        while @@FETCH_STATUS = 0
        begin
            set @NumTopics=@NumTopics+[dbo].[yaf_forum_topics](@tmp)

            fetch next from c into @tmp
        end
        close c
        deallocate c
    end

    return @NumTopics
end
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_medal_gethide]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[yaf_medal_gethide]
(
    @Hide bit,
    @Flags int
)
RETURNS bit
AS
BEGIN

    if ((@Flags & 4) = 0) set @Hide = 0

    return @Hide

END
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_medal_getribbonsetting]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[yaf_medal_getribbonsetting]
(
    @RibbonURL nvarchar(250),
    @Flags int,
    @OnlyRibbon bit
)
RETURNS bit
AS
BEGIN

    if ((@RibbonURL is null) or ((@Flags & 2) = 0)) set @OnlyRibbon = 0

    return @OnlyRibbon

END
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_medal_getsortorder]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[yaf_medal_getsortorder]
(
    @SortOrder tinyint,
    @DefaultSortOrder tinyint,
    @Flags int
)
RETURNS tinyint
AS
BEGIN

    if ((@Flags & 8) = 0) set @SortOrder = @DefaultSortOrder

    return @SortOrder

END
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_message_getthanksinfo]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Gets the Thanks info which will be formatted and then placed in "dvThanksInfo" Div Tag in displaypost.ascx.
create function [dbo].[yaf_message_getthanksinfo]
(
@MessageID INT,
@ShowThanksDate bit
) returns VARCHAR(MAX)
BEGIN
    DECLARE @Output VARCHAR(MAX)
        SELECT @Output = COALESCE(@Output+',', '') + CAST(i.ThanksFromUserID AS varchar) + 
    CASE @ShowThanksDate WHEN 1 THEN ',' + CAST (i.ThanksDate AS varchar)  ELSE '' end
            FROM	[dbo].[yaf_Thanks] i
            WHERE	i.MessageID = @MessageID	ORDER BY i.ThanksDate
    -- Add the last comma if @Output has data.
    IF @Output <> ''
        SELECT @Output = @Output + ','
    RETURN @Output
END
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_registry_value]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[yaf_registry_value] (
    @Name NVARCHAR(64)
    ,@BoardID INT = NULL
    )
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @returnValue NVARCHAR(MAX)

    IF @BoardID IS NOT NULL AND EXISTS(SELECT 1 FROM [dbo].[yaf_Registry] WHERE LOWER([Name]) = LOWER(@Name) AND [BoardID] = @BoardID)
    BEGIN
        SET @returnValue = (
            SELECT CAST([Value] AS NVARCHAR(MAX))
            FROM [dbo].[yaf_Registry]
            WHERE LOWER([Name]) = LOWER(@Name) AND [BoardID] = @BoardID)
    END
    ELSE
    BEGIN
        SET @returnValue = (
            SELECT CAST([Value] AS NVARCHAR(MAX))
            FROM [dbo].[yaf_Registry]
            WHERE LOWER([Name]) = LOWER(@Name) AND [BoardID] IS NULL)
    END

    RETURN @returnValue
END
GO
/****** Object:  UserDefinedFunction [dbo].[yaf_Split]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[yaf_Split]
(
   @sInputList VARCHAR(8000) -- List of delimited items
  , @sDelimiter VARCHAR(8000) = ',' -- delimiter that separates items
) RETURNS @List TABLE (item VARCHAR(8000))

    BEGIN
    DECLARE @sItem VARCHAR(8000)
    WHILE CHARINDEX(@sDelimiter,@sInputList,0) <> 0
     BEGIN
     SELECT
      @sItem=RTRIM(LTRIM(SUBSTRING(@sInputList,1,CHARINDEX(@sDelimiter,@sInputList,0)-1))),
      @sInputList=RTRIM(LTRIM(SUBSTRING(@sInputList,CHARINDEX(@sDelimiter,@sInputList,0)+LEN(@sDelimiter),LEN(@sInputList))))
 
     IF LEN(@sItem) > 0
      INSERT INTO @List SELECT @sItem
     END

    IF LEN(@sInputList) > 0
     INSERT INTO @List SELECT @sInputList -- Put the last item in
    RETURN
    END
GO
/****** Object:  Table [dbo].[yaf_AccessMask]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_AccessMask](
	[AccessMaskID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Flags] [int] NOT NULL,
	[SortOrder] [smallint] NOT NULL,
 CONSTRAINT [PK_yaf_AccessMask] PRIMARY KEY CLUSTERED 
(
	[AccessMaskID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Active]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_Active](
	[SessionID] [nvarchar](24) NOT NULL,
	[BoardID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[IP] [varchar](39) NOT NULL,
	[Login] [datetime] NOT NULL,
	[LastActive] [datetime] NOT NULL,
	[Location] [nvarchar](255) NOT NULL,
	[ForumID] [int] NULL,
	[TopicID] [int] NULL,
	[Browser] [nvarchar](50) NULL,
	[Platform] [nvarchar](50) NULL,
	[Flags] [int] NULL,
	[ForumPage] [nvarchar](1024) NULL,
 CONSTRAINT [PK_yaf_Active] PRIMARY KEY CLUSTERED 
(
	[SessionID] ASC,
	[BoardID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_ActiveAccess]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_ActiveAccess](
	[UserID] [int] NOT NULL,
	[BoardID] [int] NOT NULL,
	[ForumID] [int] NOT NULL,
	[IsAdmin] [bit] NOT NULL,
	[IsForumModerator] [bit] NOT NULL,
	[IsModerator] [bit] NOT NULL,
	[IsGuestX] [bit] NOT NULL,
	[LastActive] [datetime] NULL,
	[ReadAccess] [bit] NOT NULL,
	[PostAccess] [bit] NOT NULL,
	[ReplyAccess] [bit] NOT NULL,
	[PriorityAccess] [bit] NOT NULL,
	[PollAccess] [bit] NOT NULL,
	[VoteAccess] [bit] NOT NULL,
	[ModeratorAccess] [bit] NOT NULL,
	[EditAccess] [bit] NOT NULL,
	[DeleteAccess] [bit] NOT NULL,
	[UploadAccess] [bit] NOT NULL,
	[DownloadAccess] [bit] NOT NULL,
 CONSTRAINT [PK_yaf_ActiveAccess] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ForumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_AdminPageUserAccess]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_AdminPageUserAccess](
	[UserID] [int] NOT NULL,
	[PageName] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_yaf_AdminPageUserAccess] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[PageName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Attachment]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Attachment](
	[AttachmentID] [int] IDENTITY(1,1) NOT NULL,
	[MessageID] [int] NOT NULL,
	[FileName] [nvarchar](255) NOT NULL,
	[Bytes] [int] NOT NULL,
	[ContentType] [nvarchar](max) NULL,
	[Downloads] [int] NOT NULL,
	[FileData] [image] NULL,
	[UserID] [int] NOT NULL,
 CONSTRAINT [PK_yaf_Attachment] PRIMARY KEY CLUSTERED 
(
	[AttachmentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_BannedEmail]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_BannedEmail](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Mask] [nvarchar](255) NOT NULL,
	[Since] [datetime] NOT NULL,
	[Reason] [nvarchar](128) NULL,
 CONSTRAINT [PK_yaf_BannedEmail] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_BannedIP]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_BannedIP](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Mask] [nvarchar](15) NOT NULL,
	[Since] [datetime] NOT NULL,
	[Reason] [nvarchar](128) NULL,
	[UserID] [int] NULL,
 CONSTRAINT [PK_yaf_BannedIP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_BannedName]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_BannedName](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Mask] [nvarchar](255) NOT NULL,
	[Since] [datetime] NOT NULL,
	[Reason] [nvarchar](128) NULL,
 CONSTRAINT [PK_yaf_BannedName] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_BBCode]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_BBCode](
	[BBCodeID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[Description] [nvarchar](4000) NULL,
	[OnClickJS] [nvarchar](1000) NULL,
	[DisplayJS] [ntext] NULL,
	[EditJS] [ntext] NULL,
	[DisplayCSS] [ntext] NULL,
	[SearchRegex] [ntext] NULL,
	[ReplaceRegex] [ntext] NULL,
	[Variables] [nvarchar](1000) NULL,
	[UseModule] [bit] NULL,
	[ModuleClass] [nvarchar](255) NULL,
	[ExecOrder] [int] NOT NULL,
 CONSTRAINT [PK_yaf_BBCode] PRIMARY KEY CLUSTERED 
(
	[BBCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Board]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Board](
	[BoardID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[AllowThreaded] [bit] NOT NULL,
	[MembershipAppName] [nvarchar](255) NULL,
	[RolesAppName] [nvarchar](255) NULL,
 CONSTRAINT [PK_yaf_Board] PRIMARY KEY CLUSTERED 
(
	[BoardID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Buddy]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Buddy](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FromUserID] [int] NOT NULL,
	[ToUserID] [int] NOT NULL,
	[Approved] [bit] NOT NULL,
	[Requested] [datetime] NOT NULL,
 CONSTRAINT [PK_yaf_Buddy] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Category]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Category](
	[CategoryID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Name] [nvarchar](128) NOT NULL,
	[CategoryImage] [nvarchar](255) NULL,
	[SortOrder] [smallint] NOT NULL,
	[PollGroupID] [int] NULL,
 CONSTRAINT [PK_yaf_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_CheckEmail]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_CheckEmail](
	[CheckEmailID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[Email] [nvarchar](255) NULL,
	[Created] [datetime] NOT NULL,
	[Hash] [nvarchar](32) NOT NULL,
 CONSTRAINT [PK_yaf_CheckEmail] PRIMARY KEY CLUSTERED 
(
	[CheckEmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Choice]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_Choice](
	[ChoiceID] [int] IDENTITY(1,1) NOT NULL,
	[PollID] [int] NOT NULL,
	[Choice] [nvarchar](50) NOT NULL,
	[Votes] [int] NOT NULL,
	[ObjectPath] [nvarchar](255) NULL,
	[MimeType] [varchar](50) NULL,
 CONSTRAINT [PK_yaf_Choice] PRIMARY KEY CLUSTERED 
(
	[ChoiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_EventLog]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_EventLog](
	[EventLogID] [int] IDENTITY(1,1) NOT NULL,
	[EventTime] [datetime] NOT NULL,
	[UserID] [int] NULL,
	[Source] [nvarchar](50) NOT NULL,
	[Description] [ntext] NOT NULL,
	[Type] [int] NOT NULL,
	[UserName] [nvarchar](100) NULL,
 CONSTRAINT [PK_yaf_EventLog] PRIMARY KEY CLUSTERED 
(
	[EventLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_EventLogGroupAccess]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_EventLogGroupAccess](
	[GroupID] [int] NOT NULL,
	[EventTypeID] [int] NOT NULL,
	[EventTypeName] [nvarchar](128) NOT NULL,
	[DeleteAccess] [bit] NOT NULL,
 CONSTRAINT [PK_yaf_EventLogGroupAccess] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC,
	[EventTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Extension]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Extension](
	[ExtensionID] [int] IDENTITY(1,1) NOT NULL,
	[BoardId] [int] NOT NULL,
	[Extension] [nvarchar](10) NOT NULL,
 CONSTRAINT [PK_yaf_Extension] PRIMARY KEY CLUSTERED 
(
	[ExtensionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_FavoriteTopic]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_FavoriteTopic](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[TopicID] [int] NOT NULL,
 CONSTRAINT [PK_yaf_FavoriteTopic] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Forum]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Forum](
	[ForumID] [int] IDENTITY(1,1) NOT NULL,
	[CategoryID] [int] NOT NULL,
	[ParentID] [int] NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[SortOrder] [smallint] NOT NULL,
	[LastPosted] [datetime] NULL,
	[LastTopicID] [int] NULL,
	[LastMessageID] [int] NULL,
	[LastUserID] [int] NULL,
	[LastUserName] [nvarchar](255) NULL,
	[NumTopics] [int] NOT NULL,
	[NumPosts] [int] NOT NULL,
	[RemoteURL] [nvarchar](100) NULL,
	[Flags] [int] NOT NULL,
	[IsLocked]  AS (CONVERT([bit],sign([Flags]&(1)),(0))),
	[IsHidden]  AS (CONVERT([bit],sign([Flags]&(2)),(0))),
	[IsNoCount]  AS (CONVERT([bit],sign([Flags]&(4)),(0))),
	[IsModerated]  AS (CONVERT([bit],sign([Flags]&(8)),(0))),
	[ThemeURL] [nvarchar](50) NULL,
	[PollGroupID] [int] NULL,
	[UserID] [int] NULL,
	[ImageURL] [nvarchar](128) NULL,
	[Styles] [nvarchar](255) NULL,
	[ModeratedPostCount] [int] NULL,
	[IsModeratedNewTopicOnly] [bit] NOT NULL,
	[LastUserDisplayName] [nvarchar](255) NULL,
 CONSTRAINT [PK_yaf_Forum] PRIMARY KEY CLUSTERED 
(
	[ForumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_ForumAccess]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_ForumAccess](
	[GroupID] [int] NOT NULL,
	[ForumID] [int] NOT NULL,
	[AccessMaskID] [int] NOT NULL,
 CONSTRAINT [PK_yaf_ForumAccess] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC,
	[ForumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_ForumReadTracking]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_ForumReadTracking](
	[UserID] [int] NOT NULL,
	[ForumID] [int] NOT NULL,
	[LastAccessDate] [datetime] NOT NULL,
 CONSTRAINT [PK_yaf_ForumReadTracking] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ForumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Group]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Group](
	[GroupID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[Flags] [int] NOT NULL,
	[PMLimit] [int] NOT NULL,
	[Style] [nvarchar](255) NULL,
	[SortOrder] [smallint] NOT NULL,
	[Description] [nvarchar](128) NULL,
	[UsrSigChars] [int] NOT NULL,
	[UsrSigBBCodes] [nvarchar](255) NULL,
	[UsrSigHTMLTags] [nvarchar](255) NULL,
	[UsrAlbums] [int] NOT NULL,
	[UsrAlbumImages] [int] NOT NULL,
	[IsHidden]  AS (CONVERT([bit],sign([Flags]&(16)),(0))),
	[IsUserGroup]  AS (CONVERT([bit],sign([Flags]&(32)),(0))),
 CONSTRAINT [PK_yaf_Group] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_GroupMedal]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_GroupMedal](
	[GroupID] [int] NOT NULL,
	[MedalID] [int] NOT NULL,
	[Message] [nvarchar](100) NULL,
	[Hide] [bit] NOT NULL,
	[OnlyRibbon] [bit] NOT NULL,
	[SortOrder] [tinyint] NOT NULL,
 CONSTRAINT [PK_yaf_GroupMedal] PRIMARY KEY CLUSTERED 
(
	[MedalID] ASC,
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_IgnoreUser]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_IgnoreUser](
	[UserID] [int] NOT NULL,
	[IgnoredUserID] [int] NOT NULL,
 CONSTRAINT [PK_yaf_IgnoreUser] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[IgnoredUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Mail]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Mail](
	[MailID] [int] IDENTITY(1,1) NOT NULL,
	[FromUser] [nvarchar](255) NULL,
	[FromUserName] [nvarchar](255) NULL,
	[ToUser] [nvarchar](255) NULL,
	[ToUserName] [nvarchar](255) NULL,
	[Created] [datetime] NOT NULL,
	[Subject] [nvarchar](100) NOT NULL,
	[Body] [ntext] NOT NULL,
	[BodyHtml] [ntext] NULL,
	[SendTries] [int] NOT NULL,
	[SendAttempt] [datetime] NULL,
	[ProcessID] [int] NULL,
 CONSTRAINT [PK_yaf_Mail] PRIMARY KEY CLUSTERED 
(
	[MailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Medal]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Medal](
	[BoardID] [int] NOT NULL,
	[MedalID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Description] [ntext] NOT NULL,
	[Message] [nvarchar](100) NOT NULL,
	[Category] [nvarchar](50) NULL,
	[MedalURL] [nvarchar](250) NOT NULL,
	[RibbonURL] [nvarchar](250) NULL,
	[SmallMedalURL] [nvarchar](250) NOT NULL,
	[SmallRibbonURL] [nvarchar](250) NULL,
	[SmallMedalWidth] [smallint] NOT NULL,
	[SmallMedalHeight] [smallint] NOT NULL,
	[SmallRibbonWidth] [smallint] NULL,
	[SmallRibbonHeight] [smallint] NULL,
	[SortOrder] [tinyint] NOT NULL,
	[Flags] [int] NOT NULL,
 CONSTRAINT [PK_yaf_Medal] PRIMARY KEY CLUSTERED 
(
	[MedalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Message]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_Message](
	[MessageID] [int] IDENTITY(1,1) NOT NULL,
	[TopicID] [int] NOT NULL,
	[ReplyTo] [int] NULL,
	[Position] [int] NOT NULL,
	[Indent] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[UserName] [nvarchar](255) NULL,
	[Posted] [datetime] NOT NULL,
	[Message] [ntext] NOT NULL,
	[IP] [varchar](39) NOT NULL,
	[Edited] [datetime] NULL,
	[Flags] [int] NOT NULL,
	[EditReason] [nvarchar](100) NULL,
	[IsModeratorChanged] [bit] NOT NULL,
	[DeleteReason] [nvarchar](100) NULL,
	[ExternalMessageId] [nvarchar](255) NULL,
	[ReferenceMessageId] [nvarchar](255) NULL,
	[IsDeleted]  AS (CONVERT([bit],sign([Flags]&(8)),(0))),
	[IsApproved]  AS (CONVERT([bit],sign([Flags]&(16)),(0))),
	[BlogPostID] [nvarchar](50) NULL,
	[EditedBy] [int] NULL,
	[UserDisplayName] [nvarchar](255) NULL,
 CONSTRAINT [PK_yaf_Message] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_MessageHistory]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_MessageHistory](
	[MessageID] [int] NOT NULL,
	[Message] [ntext] NOT NULL,
	[IP] [varchar](39) NOT NULL,
	[Edited] [datetime] NOT NULL,
	[EditedBy] [int] NULL,
	[EditReason] [nvarchar](100) NULL,
	[IsModeratorChanged] [bit] NOT NULL,
	[Flags] [int] NOT NULL,
 CONSTRAINT [PK_yaf_MessageHistory] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC,
	[Edited] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_MessageReported]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_MessageReported](
	[MessageID] [int] NOT NULL,
	[Message] [ntext] NULL,
	[Resolved] [bit] NULL,
	[ResolvedBy] [int] NULL,
	[ResolvedDate] [datetime] NULL,
 CONSTRAINT [PK_yaf_MessageReported] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_MessageReportedAudit]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_MessageReportedAudit](
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NULL,
	[MessageID] [int] NOT NULL,
	[Reported] [datetime] NULL,
	[ReportedNumber] [int] NOT NULL,
	[ReportText] [nvarchar](4000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_NntpForum]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_NntpForum](
	[NntpForumID] [int] IDENTITY(1,1) NOT NULL,
	[NntpServerID] [int] NOT NULL,
	[GroupName] [nvarchar](100) NOT NULL,
	[ForumID] [int] NOT NULL,
	[LastMessageNo] [int] NOT NULL,
	[LastUpdate] [datetime] NOT NULL,
	[Active] [bit] NOT NULL,
	[DateCutOff] [datetime] NULL,
 CONSTRAINT [PK_yaf_NntpForum] PRIMARY KEY CLUSTERED 
(
	[NntpForumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_NntpServer]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_NntpServer](
	[NntpServerID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Address] [nvarchar](100) NOT NULL,
	[Port] [int] NULL,
	[UserName] [nvarchar](255) NULL,
	[UserPass] [nvarchar](50) NULL,
 CONSTRAINT [PK_yaf_NntpServer] PRIMARY KEY CLUSTERED 
(
	[NntpServerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_NntpTopic]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_NntpTopic](
	[NntpTopicID] [int] IDENTITY(1,1) NOT NULL,
	[NntpForumID] [int] NOT NULL,
	[Thread] [nvarchar](64) NULL,
	[TopicID] [int] NOT NULL,
 CONSTRAINT [PK_yaf_NntpTopic] PRIMARY KEY CLUSTERED 
(
	[NntpTopicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_PMessage]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_PMessage](
	[PMessageID] [int] IDENTITY(1,1) NOT NULL,
	[FromUserID] [int] NOT NULL,
	[Created] [datetime] NOT NULL,
	[Subject] [nvarchar](100) NOT NULL,
	[Body] [ntext] NOT NULL,
	[Flags] [int] NOT NULL,
	[ReplyTo] [int] NULL,
 CONSTRAINT [PK_yaf_PMessage] PRIMARY KEY CLUSTERED 
(
	[PMessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Poll]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_Poll](
	[PollID] [int] IDENTITY(1,1) NOT NULL,
	[Question] [nvarchar](256) NOT NULL,
	[Closes] [datetime] NULL,
	[PollGroupID] [int] NULL,
	[UserID] [int] NOT NULL,
	[ObjectPath] [nvarchar](255) NULL,
	[MimeType] [varchar](50) NULL,
	[Flags] [int] NOT NULL,
	[IsClosedBound]  AS (CONVERT([bit],sign([Flags]&(4)),(0))),
	[AllowMultipleChoices]  AS (CONVERT([bit],sign([Flags]&(8)),(0))),
	[ShowVoters]  AS (CONVERT([bit],sign([Flags]&(16)),(0))),
	[AllowSkipVote]  AS (CONVERT([bit],sign([Flags]&(32)),(0))),
 CONSTRAINT [PK_yaf_Poll] PRIMARY KEY CLUSTERED 
(
	[PollID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_PollGroupCluster]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_PollGroupCluster](
	[PollGroupID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[Flags] [int] NOT NULL,
	[IsBound]  AS (CONVERT([bit],sign([Flags]&(2)),(0))),
 CONSTRAINT [PK_yaf_PollGroupCluster] PRIMARY KEY CLUSTERED 
(
	[PollGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_PollVote]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_PollVote](
	[PollVoteID] [int] IDENTITY(1,1) NOT NULL,
	[PollID] [int] NOT NULL,
	[UserID] [int] NULL,
	[RemoteIP] [varchar](39) NULL,
	[ChoiceID] [int] NULL,
 CONSTRAINT [PK_yaf_PollVote] PRIMARY KEY CLUSTERED 
(
	[PollVoteID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_PollVoteRefuse]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_PollVoteRefuse](
	[RefuseID] [int] IDENTITY(1,1) NOT NULL,
	[PollID] [int] NOT NULL,
	[UserID] [int] NULL,
	[RemoteIP] [varchar](57) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_prov_Application]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_prov_Application](
	[ApplicationID] [uniqueidentifier] NOT NULL,
	[ApplicationName] [nvarchar](256) NULL,
	[ApplicationNameLwd] [nvarchar](256) NULL,
	[Description] [ntext] NULL,
 CONSTRAINT [PK_yaf_prov_Application] PRIMARY KEY CLUSTERED 
(
	[ApplicationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_prov_Membership]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_prov_Membership](
	[UserID] [nvarchar](64) NOT NULL,
	[ApplicationID] [uniqueidentifier] NOT NULL,
	[Username] [nvarchar](256) NOT NULL,
	[UsernameLwd] [nvarchar](256) NOT NULL,
	[Password] [nvarchar](256) NULL,
	[PasswordSalt] [nvarchar](256) NULL,
	[PasswordFormat] [nvarchar](256) NULL,
	[Email] [nvarchar](256) NULL,
	[EmailLwd] [nvarchar](256) NULL,
	[PasswordQuestion] [nvarchar](256) NULL,
	[PasswordAnswer] [nvarchar](256) NULL,
	[IsApproved] [bit] NULL,
	[IsLockedOut] [bit] NULL,
	[LastLogin] [datetime] NULL,
	[LastActivity] [datetime] NULL,
	[LastPasswordChange] [datetime] NULL,
	[LastLockOut] [datetime] NULL,
	[FailedPasswordAttempts] [int] NULL,
	[FailedAnswerAttempts] [int] NULL,
	[FailedPasswordWindow] [datetime] NULL,
	[FailedAnswerWindow] [datetime] NULL,
	[Joined] [datetime] NULL,
	[Comment] [ntext] NULL,
 CONSTRAINT [PK_yaf_prov_Membership] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_prov_Profile]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_prov_Profile](
	[UserID] [nvarchar](64) NOT NULL,
	[LastUpdatedDate] [datetime] NOT NULL,
	[RealName] [nvarchar](255) NULL,
	[Country] [nvarchar](2) NULL,
	[BlogServicePassword] [nvarchar](255) NULL,
	[GoogleTalk] [nvarchar](255) NULL,
	[BlogServiceUrl] [nvarchar](255) NULL,
	[YIM] [nvarchar](255) NULL,
	[ICQ] [nvarchar](255) NULL,
	[Homepage] [nvarchar](255) NULL,
	[MSN] [nvarchar](255) NULL,
	[Birthday] [datetime] NULL,
	[XMPP] [nvarchar](255) NULL,
	[AIM] [nvarchar](255) NULL,
	[Interests] [nvarchar](400) NULL,
	[BlogServiceUsername] [nvarchar](255) NULL,
	[Facebook] [nvarchar](400) NULL,
	[Gender] [int] NULL,
	[Blog] [nvarchar](255) NULL,
	[Occupation] [nvarchar](400) NULL,
	[TwitterId] [nvarchar](400) NULL,
	[Location] [nvarchar](255) NULL,
	[City] [nvarchar](255) NULL,
	[Twitter] [nvarchar](400) NULL,
	[Region] [nvarchar](255) NULL,
	[Skype] [nvarchar](255) NULL,
	[LastSyncedWithDNN] [datetime] NULL,
	[Google] [nvarchar](400) NULL,
	[GoogleId] [nvarchar](255) NULL,
	[FacebookId] [nvarchar](400) NULL,
 CONSTRAINT [PK_yaf_prov_Profile] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_prov_Role]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_prov_Role](
	[RoleID] [uniqueidentifier] NOT NULL,
	[ApplicationID] [uniqueidentifier] NOT NULL,
	[RoleName] [nvarchar](256) NOT NULL,
	[RoleNameLwd] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_yaf_prov_Role] PRIMARY KEY CLUSTERED 
(
	[RoleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_prov_RoleMembership]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_prov_RoleMembership](
	[RoleID] [uniqueidentifier] NOT NULL,
	[UserID] [nvarchar](64) NOT NULL,
 CONSTRAINT [PK_yaf_prov_RoleMembership] PRIMARY KEY CLUSTERED 
(
	[RoleID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Rank]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Rank](
	[RankID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[MinPosts] [int] NULL,
	[RankImage] [nvarchar](50) NULL,
	[Flags] [int] NOT NULL,
	[PMLimit] [int] NOT NULL,
	[Style] [nvarchar](255) NULL,
	[SortOrder] [smallint] NOT NULL,
	[Description] [nvarchar](128) NULL,
	[UsrSigChars] [int] NOT NULL,
	[UsrSigBBCodes] [nvarchar](255) NULL,
	[UsrSigHTMLTags] [nvarchar](255) NULL,
	[UsrAlbums] [int] NOT NULL,
	[UsrAlbumImages] [int] NOT NULL,
 CONSTRAINT [PK_yaf_Rank] PRIMARY KEY CLUSTERED 
(
	[RankID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Registry]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Registry](
	[RegistryID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Value] [ntext] NULL,
	[BoardID] [int] NULL,
 CONSTRAINT [PK_yaf_Registry] PRIMARY KEY CLUSTERED 
(
	[RegistryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Replace_Words]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Replace_Words](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BoardId] [int] NOT NULL,
	[BadWord] [nvarchar](255) NULL,
	[GoodWord] [nvarchar](255) NULL,
 CONSTRAINT [PK_yaf_Replace_Words] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_ReputationVote]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_ReputationVote](
	[ReputationFromUserID] [int] NOT NULL,
	[ReputationToUserID] [int] NOT NULL,
	[VoteDate] [datetime] NOT NULL,
 CONSTRAINT [PK_yaf_ReputationVote] PRIMARY KEY CLUSTERED 
(
	[ReputationFromUserID] ASC,
	[ReputationToUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_ShoutboxMessage]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_ShoutboxMessage](
	[ShoutBoxMessageID] [int] IDENTITY(1,1) NOT NULL,
	[BoardId] [int] NOT NULL,
	[UserID] [int] NULL,
	[UserName] [nvarchar](255) NOT NULL,
	[Message] [ntext] NULL,
	[Date] [datetime] NOT NULL,
	[IP] [varchar](50) NOT NULL,
	[UserDisplayName] [nvarchar](255) NULL,
 CONSTRAINT [PK_yaf_ShoutboxMessage] PRIMARY KEY CLUSTERED 
(
	[ShoutBoxMessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_Smiley]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Smiley](
	[SmileyID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[Code] [nvarchar](10) NOT NULL,
	[Icon] [nvarchar](50) NOT NULL,
	[Emoticon] [nvarchar](50) NULL,
	[SortOrder] [tinyint] NOT NULL,
 CONSTRAINT [PK_yaf_Smiley] PRIMARY KEY CLUSTERED 
(
	[SmileyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Spam_Words]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Spam_Words](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BoardId] [int] NOT NULL,
	[SpamWord] [nvarchar](255) NULL,
 CONSTRAINT [PK_yaf_Spam_Words] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Thanks]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Thanks](
	[ThanksID] [int] IDENTITY(1,1) NOT NULL,
	[ThanksFromUserID] [int] NOT NULL,
	[ThanksToUserID] [int] NOT NULL,
	[MessageID] [int] NOT NULL,
	[ThanksDate] [smalldatetime] NOT NULL,
 CONSTRAINT [PK_yaf_Thanks] PRIMARY KEY CLUSTERED 
(
	[ThanksID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_Topic]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_Topic](
	[TopicID] [int] IDENTITY(1,1) NOT NULL,
	[ForumID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[UserName] [nvarchar](255) NULL,
	[Posted] [datetime] NOT NULL,
	[Topic] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[Status] [nvarchar](255) NULL,
	[Styles] [nvarchar](255) NULL,
	[Views] [int] NOT NULL,
	[Priority] [smallint] NOT NULL,
	[PollID] [int] NULL,
	[TopicMovedID] [int] NULL,
	[LastPosted] [datetime] NULL,
	[LastMessageID] [int] NULL,
	[LastUserID] [int] NULL,
	[LastUserName] [nvarchar](255) NULL,
	[NumPosts] [int] NOT NULL,
	[Flags] [int] NOT NULL,
	[IsDeleted]  AS (CONVERT([bit],sign([Flags]&(8)),(0))),
	[IsQuestion]  AS (CONVERT([bit],sign([Flags]&(1024)),(0))),
	[AnswerMessageId] [int] NULL,
	[LastMessageFlags] [int] NULL,
	[TopicImage] [nvarchar](255) NULL,
	[LinkDate] [datetime] NULL,
	[UserDisplayName] [nvarchar](255) NULL,
	[LastUserDisplayName] [nvarchar](255) NULL,
 CONSTRAINT [PK_yaf_Topic] PRIMARY KEY CLUSTERED 
(
	[TopicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_TopicReadTracking]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_TopicReadTracking](
	[UserID] [int] NOT NULL,
	[TopicID] [int] NOT NULL,
	[LastAccessDate] [datetime] NOT NULL,
 CONSTRAINT [PK_yaf_TopicReadTracking] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[TopicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_TopicStatus]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_TopicStatus](
	[TopicStatusID] [int] IDENTITY(1,1) NOT NULL,
	[TopicStatusName] [nvarchar](100) NOT NULL,
	[BoardID] [int] NOT NULL,
	[DefaultDescription] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_yaf_TopicStatus] PRIMARY KEY CLUSTERED 
(
	[TopicStatusID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_User]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[yaf_User](
	[UserID] [int] IDENTITY(1,1) NOT NULL,
	[BoardID] [int] NOT NULL,
	[ProviderUserKey] [nvarchar](64) NULL,
	[Name] [nvarchar](255) NOT NULL,
	[DisplayName] [nvarchar](255) NOT NULL,
	[Password] [nvarchar](32) NOT NULL,
	[Email] [nvarchar](255) NULL,
	[Joined] [datetime] NOT NULL,
	[LastVisit] [datetime] NOT NULL,
	[IP] [varchar](39) NULL,
	[NumPosts] [int] NOT NULL,
	[TimeZone] [int] NOT NULL,
	[Avatar] [nvarchar](255) NULL,
	[Signature] [ntext] NULL,
	[AvatarImage] [image] NULL,
	[AvatarImageType] [nvarchar](50) NULL,
	[RankID] [int] NOT NULL,
	[Suspended] [datetime] NULL,
	[LanguageFile] [nvarchar](50) NULL,
	[ThemeFile] [nvarchar](50) NULL,
	[UseSingleSignOn] [bit] NOT NULL,
	[TextEditor] [nvarchar](50) NULL,
	[OverrideDefaultThemes] [bit] NOT NULL,
	[PMNotification] [bit] NOT NULL,
	[AutoWatchTopics] [bit] NOT NULL,
	[DailyDigest] [bit] NOT NULL,
	[NotificationType] [int] NULL,
	[Flags] [int] NOT NULL,
	[Points] [int] NOT NULL,
	[IsApproved]  AS (CONVERT([bit],sign([Flags]&(2)),(0))),
	[IsGuest]  AS (CONVERT([bit],sign([Flags]&(4)),(0))),
	[IsCaptchaExcluded]  AS (CONVERT([bit],sign([Flags]&(8)),(0))),
	[IsActiveExcluded]  AS (CONVERT([bit],sign([Flags]&(16)),(0))),
	[IsDST]  AS (CONVERT([bit],sign([Flags]&(32)),(0))),
	[IsDirty]  AS (CONVERT([bit],sign([Flags]&(64)),(0))),
	[Culture] [varchar](10) NULL,
	[IsFacebookUser] [bit] NOT NULL,
	[IsTwitterUser] [bit] NOT NULL,
	[UserStyle] [varchar](510) NULL,
	[StyleFlags] [int] NOT NULL,
	[IsUserStyle]  AS (CONVERT([bit],sign([StyleFlags]&(1)),(0))),
	[IsGroupStyle]  AS (CONVERT([bit],sign([StyleFlags]&(2)),(0))),
	[IsRankStyle]  AS (CONVERT([bit],sign([StyleFlags]&(4)),(0))),
	[IsGoogleUser] [bit] NOT NULL,
	[SuspendedReason] [ntext] NULL,
	[SuspendedBy] [int] NOT NULL,
 CONSTRAINT [PK_yaf_User] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[yaf_UserAlbum]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_UserAlbum](
	[AlbumID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[Title] [nvarchar](255) NULL,
	[CoverImageID] [int] NULL,
	[Updated] [datetime] NOT NULL,
 CONSTRAINT [PK_yaf_User_Album] PRIMARY KEY CLUSTERED 
(
	[AlbumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_UserAlbumImage]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_UserAlbumImage](
	[ImageID] [int] IDENTITY(1,1) NOT NULL,
	[AlbumID] [int] NOT NULL,
	[Caption] [nvarchar](255) NULL,
	[FileName] [nvarchar](255) NOT NULL,
	[Bytes] [int] NOT NULL,
	[ContentType] [nvarchar](50) NULL,
	[Uploaded] [datetime] NOT NULL,
	[Downloads] [int] NOT NULL,
 CONSTRAINT [PK_yaf_User_AlbumImage] PRIMARY KEY CLUSTERED 
(
	[ImageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_UserForum]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_UserForum](
	[UserID] [int] NOT NULL,
	[ForumID] [int] NOT NULL,
	[AccessMaskID] [int] NOT NULL,
	[Invited] [datetime] NOT NULL,
	[Accepted] [bit] NOT NULL,
 CONSTRAINT [PK_yaf_UserForum] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ForumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_UserGroup]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_UserGroup](
	[UserID] [int] NOT NULL,
	[GroupID] [int] NOT NULL,
 CONSTRAINT [PK_yaf_UserGroup] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_UserMedal]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_UserMedal](
	[UserID] [int] NOT NULL,
	[MedalID] [int] NOT NULL,
	[Message] [nvarchar](100) NULL,
	[Hide] [bit] NOT NULL,
	[OnlyRibbon] [bit] NOT NULL,
	[SortOrder] [tinyint] NOT NULL,
	[DateAwarded] [datetime] NOT NULL,
 CONSTRAINT [PK_yaf_UserMedal] PRIMARY KEY CLUSTERED 
(
	[MedalID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_UserPMessage]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_UserPMessage](
	[UserPMessageID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[PMessageID] [int] NOT NULL,
	[Flags] [int] NOT NULL,
	[IsRead]  AS (CONVERT([bit],sign([Flags]&(1)),(0))),
	[IsInOutbox]  AS (CONVERT([bit],sign([Flags]&(2)),(0))),
	[IsArchived]  AS (CONVERT([bit],sign([Flags]&(4)),(0))),
	[IsDeleted]  AS (CONVERT([bit],sign([Flags]&(8)),(0))),
	[IsReply] [bit] NOT NULL,
 CONSTRAINT [PK_yaf_UserPMessage] PRIMARY KEY CLUSTERED 
(
	[UserPMessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_UserProfile]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_UserProfile](
	[UserID] [int] NOT NULL,
	[LastUpdatedDate] [datetime] NOT NULL,
	[LastActivity] [datetime] NULL,
	[ApplicationName] [nvarchar](255) NOT NULL,
	[IsAnonymous] [bit] NOT NULL,
	[UserName] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_yaf_UserProfile] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ApplicationName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_WatchForum]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_WatchForum](
	[WatchForumID] [int] IDENTITY(1,1) NOT NULL,
	[ForumID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[Created] [datetime] NOT NULL,
	[LastMail] [datetime] NULL,
 CONSTRAINT [PK_yaf_WatchForum] PRIMARY KEY CLUSTERED 
(
	[WatchForumID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[yaf_WatchTopic]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[yaf_WatchTopic](
	[WatchTopicID] [int] IDENTITY(1,1) NOT NULL,
	[TopicID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[Created] [datetime] NOT NULL,
	[LastMail] [datetime] NULL,
 CONSTRAINT [PK_yaf_WatchTopic] PRIMARY KEY CLUSTERED 
(
	[WatchTopicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  View [dbo].[yaf_vaccess_group]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[yaf_vaccess_group]
WITH SCHEMABINDING
AS
        select
            b.UserID,
            c.ForumID,
            d.AccessMaskID,
            b.GroupID,
            ReadAccess		= convert(int,d.Flags & 1),
            PostAccess		= convert(int,d.Flags & 2),
            ReplyAccess		= convert(int,d.Flags & 4),
            PriorityAccess	= convert(int,d.Flags & 8),
            PollAccess		= convert(int,d.Flags & 16),
            VoteAccess		= convert(int,d.Flags & 32),
            ModeratorAccess	= convert(int,d.Flags & 64),
            EditAccess		= convert(int,d.Flags & 128),
            DeleteAccess	= convert(int,d.Flags & 256),
            UploadAccess	= convert(int,d.Flags & 512),
            DownloadAccess	= convert(int,d.Flags & 1024),
            AdminGroup		= convert(int,e.Flags & 1)
        from
            [dbo].[yaf_UserGroup] b
            INNER JOIN [dbo].[yaf_ForumAccess] c on c.GroupID=b.GroupID
            INNER JOIN [dbo].[yaf_AccessMask] d on d.AccessMaskID=c.AccessMaskID
            INNER JOIN [dbo].[yaf_Group] e on e.GroupID=b.GroupID
GO
/****** Object:  View [dbo].[yaf_vaccess_null]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[yaf_vaccess_null]
WITH SCHEMABINDING
AS
        select
            a.UserID,
            ForumID			  = convert(int,0),
            AccessMaskID  = convert(int,0),
            GroupID				= convert(int,0),
            ReadAccess		= convert(int,0),
            PostAccess		= convert(int,0),
            ReplyAccess		= convert(int,0),
            PriorityAccess	= convert(int,0),
            PollAccess		= convert(int,0),
            VoteAccess		= convert(int,0),
            ModeratorAccess	= convert(int,0),
            EditAccess		= convert(int,0),
            DeleteAccess	= convert(int,0),
            UploadAccess	= convert(int,0),
            DownloadAccess	= convert(int,0),
            AdminGroup		= convert(int,0)
        from
            [dbo].[yaf_User] a
GO
/****** Object:  View [dbo].[yaf_vaccess_user]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[yaf_vaccess_user]
WITH SCHEMABINDING
AS
    SELECT
            b.UserID,
            b.ForumID,
            c.AccessMaskID,
            GroupID				= convert(int,0),
            ReadAccess		= convert(int,c.Flags & 1),
            PostAccess		= convert(int,c.Flags & 2),
            ReplyAccess		= convert(int,c.Flags & 4),
            PriorityAccess	= convert(int,c.Flags & 8),
            PollAccess		= convert(int,c.Flags & 16),
            VoteAccess		= convert(int,c.Flags & 32),
            ModeratorAccess	= convert(int,c.Flags & 64),
            EditAccess		= convert(int,c.Flags & 128),
            DeleteAccess	= convert(int,c.Flags & 256),
            UploadAccess	= convert(int,c.Flags & 512),
            DownloadAccess	= convert(int,c.Flags & 1024),
            AdminGroup		= convert(int,0)
        from
            [dbo].[yaf_UserForum] b
            INNER JOIN [dbo].[yaf_AccessMask] c on c.AccessMaskID=b.AccessMaskID
GO
/****** Object:  View [dbo].[yaf_vaccessfull]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[yaf_vaccessfull]
WITH SCHEMABINDING
AS

select 
            UserID,
            ForumID,
                      MAX(ReadAccess) AS ReadAccess, MAX(PostAccess) AS PostAccess, MAX(ReplyAccess) AS ReplyAccess, MAX(PriorityAccess) AS PriorityAccess, 
                      MAX(PollAccess) AS PollAccess, MAX(VoteAccess) AS VoteAccess, MAX(ModeratorAccess) AS ModeratorAccess, MAX(EditAccess) AS EditAccess, 
                      MAX(DeleteAccess) AS DeleteAccess, MAX(UploadAccess) AS UploadAccess, MAX(DownloadAccess) AS DownloadAccess, MAX(AdminGroup) as AdminGroup
        FROM (
        select
            UserID,
            ForumID,
            ReadAccess		,
            PostAccess		,
            ReplyAccess		,
            PriorityAccess	,
            PollAccess		,
            VoteAccess		,
            ModeratorAccess	,
            EditAccess		,
            DeleteAccess	,
            UploadAccess	,
            DownloadAccess	,
            AdminGroup		
        from
            [dbo].[yaf_vaccess_user] b
        
        union all
        
        select
            UserID,
            ForumID,
            ReadAccess		,
            PostAccess		,
            ReplyAccess		,
            PriorityAccess	,
            PollAccess		,
            VoteAccess		,
            ModeratorAccess	,
            EditAccess		,
            DeleteAccess	,
            UploadAccess	,
            DownloadAccess	,
            AdminGroup	
        from
            [dbo].[yaf_vaccess_group] b

        union all

        select
            UserID,
            ForumID,
            ReadAccess		,
            PostAccess		,
            ReplyAccess		,
            PriorityAccess	,
            PollAccess		,
            VoteAccess		,
            ModeratorAccess	,
            EditAccess		,
            DeleteAccess	,
            UploadAccess	,
            DownloadAccess	,
            AdminGroup	
        from
            [dbo].[yaf_vaccess_null] b
) access
    GROUP BY
        UserID,ForumID
GO
/****** Object:  View [dbo].[yaf_vaccess]    Script Date: 06.02.2016 16:47:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  View [dbo].[yaf_vaccess]    Script Date: 09/28/2009 22:26:00 ******/
CREATE VIEW [dbo].[yaf_vaccess]
AS
    SELECT
        UserID				= a.UserID,
        ForumID				= x.ForumID,
        IsAdmin				= max(convert(int,b.Flags & 1)),
        IsForumModerator	= max(convert(int,b.Flags & 8)),
        IsModerator			= (select count(1) from [dbo].[yaf_UserGroup] v1,[dbo].[yaf_Group] w2,[dbo].[yaf_ForumAccess] x,[dbo].[yaf_AccessMask] y where v1.UserID=a.UserID and w2.GroupID=v1.GroupID and x.GroupID=w2.GroupID and y.AccessMaskID=x.AccessMaskID and (y.Flags & 64)<>0),
        ReadAccess			= max(x.ReadAccess),
        PostAccess			= max(x.PostAccess),
        ReplyAccess			= max(x.ReplyAccess),
        PriorityAccess		= max(x.PriorityAccess),
        PollAccess			= max(x.PollAccess),
        VoteAccess			= max(x.VoteAccess),
        ModeratorAccess		= max(x.ModeratorAccess),
        EditAccess			= max(x.EditAccess),
        DeleteAccess		= max(x.DeleteAccess),
        UploadAccess		= max(x.UploadAccess),		
        DownloadAccess		= max(x.DownloadAccess)			
    FROM
        [dbo].[yaf_vaccessfull] as x WITH(NOLOCK)
        INNER JOIN [dbo].[yaf_UserGroup] a WITH(NOLOCK) on a.UserID=x.UserID
        INNER JOIN [dbo].[yaf_Group] b WITH(NOLOCK) on b.GroupID=a.GroupID
    GROUP BY
        a.UserID,x.ForumID
GO
SET IDENTITY_INSERT [dbo].[yaf_AccessMask] ON 

INSERT [dbo].[yaf_AccessMask] ([AccessMaskID], [BoardID], [Name], [Flags], [SortOrder]) VALUES (1, 1, N'Admin Access', 2047, 4)
INSERT [dbo].[yaf_AccessMask] ([AccessMaskID], [BoardID], [Name], [Flags], [SortOrder]) VALUES (2, 1, N'Moderator Access', 1511, 3)
INSERT [dbo].[yaf_AccessMask] ([AccessMaskID], [BoardID], [Name], [Flags], [SortOrder]) VALUES (3, 1, N'Member Access', 1447, 2)
INSERT [dbo].[yaf_AccessMask] ([AccessMaskID], [BoardID], [Name], [Flags], [SortOrder]) VALUES (4, 1, N'Read Only Access', 1, 1)
INSERT [dbo].[yaf_AccessMask] ([AccessMaskID], [BoardID], [Name], [Flags], [SortOrder]) VALUES (5, 1, N'No Access', 0, 0)
INSERT [dbo].[yaf_AccessMask] ([AccessMaskID], [BoardID], [Name], [Flags], [SortOrder]) VALUES (6, 1, N'OnlyReplyAccess', 421, 10)
SET IDENTITY_INSERT [dbo].[yaf_AccessMask] OFF
INSERT [dbo].[yaf_Active] ([SessionID], [BoardID], [UserID], [IP], [Login], [LastActive], [Location], [ForumID], [TopicID], [Browser], [Platform], [Flags], [ForumPage]) VALUES (N'vwbyrt5cdtaujzdgfiooimjm', 1, 2, N'41.238.225.204', CAST(N'2015-12-21T12:20:04.497' AS DateTime), CAST(N'2015-12-21T12:20:24.303' AS DateTime), N'/forum/default.aspx', NULL, NULL, N'Chrome 47.0', N'Win7', 5, N'')
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 0, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 3, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 4, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 5, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 6, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 7, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 8, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 9, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 10, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 11, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 12, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 13, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 14, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 15, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 16, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 17, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 18, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 19, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 20, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 21, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 22, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 23, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 25, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 26, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 27, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (1, 1, 28, 0, 0, 0, 1, CAST(N'2015-12-21T12:19:00.640' AS DateTime), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 0, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 3, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 4, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 5, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 6, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 7, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 8, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 9, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 10, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 11, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 12, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 13, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 14, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 15, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 16, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 17, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 18, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 19, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 20, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 21, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 22, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 23, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 25, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 26, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 27, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
INSERT [dbo].[yaf_ActiveAccess] ([UserID], [BoardID], [ForumID], [IsAdmin], [IsForumModerator], [IsModerator], [IsGuestX], [LastActive], [ReadAccess], [PostAccess], [ReplyAccess], [PriorityAccess], [PollAccess], [VoteAccess], [ModeratorAccess], [EditAccess], [DeleteAccess], [UploadAccess], [DownloadAccess]) VALUES (2, 1, 28, 1, 1, 1, 0, CAST(N'2015-12-21T12:19:12.187' AS DateTime), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
SET IDENTITY_INSERT [dbo].[yaf_BBCode] ON 

INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (1, 1, N'YOUTUBE', N'[YOUTUBE][localization=YOUTUBEMOD_DESCRIPTION]Put YouTube URL Here[/localization][/YOUTUBE]', N'', N'', N'', N'', N'\[youtube\](?<inner>(?<prefix>.+?)youtube.com/watch\?v=(?<id>[0-9A-Za-z-_]{11}))[^[]*\[/youtube\]|\[youtube\](?<inner>(?<prefix>.+?)youtu.be/(?<id>[0-9A-Za-z-_]{11}))\[/youtube\]', N'<!-- BEGIN youtube --><div><iframe width="560" height="350" src="//youtube.com/embed/${id}?hd=1" frameborder="0" allowfullscreen></iframe></div><!-- END youtube -->', N'id', 0, N'', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (2, 1, N'GOOGLEMAPS', N'[GOOGLEMAPS][localization=GOOGLEMAPS_DESCRIPTION]Enter Google Maps Url[/localization][/GOOGLEMAPS]', N'', N'', N'', N'', N'\[googlemaps\](?<inner>.+?)\[/googlemaps\]', N'<div><iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="${inner}&amp;output=embed"></iframe></div>', N'', 0, N'', 2)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (3, 1, N'GOOGLEWIDGET', N'[GOOGLEWIDGET]&lt;script src=&quot;url&quot;&gt;&lt;/script&gt;[/GOOGLEWIDGET]', N'', N'', N'', N'', N'\[googlewidget\]&lt;script src=\&quot;(?<prefix>.+?)gmodules.com/ig/ifr\?url=(?<url>.+?)&quot;\&gt;\&lt;/script\&gt;\[/googlewidget\]', N'<!-- BEGIN Google Widget -->
<script type="text/javascript" src="http://www.gmodules.com/ig/ifr?url=${url}"></script>
<!-- END Google Widget -->', N'url:decode;', 0, N'', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (4, 1, N'SPOILER', N'[SPOILER][localization=SPOILERMOD_DESCRIPTION]Put Spoiler Text Here[/localization][/SPOILER]', N'', N'      function toggleSpoiler(btn, elid)
      {
      var el = document.getElementById(elid);
      if (el == null)
      return;
      if (el.style.display == '''')
      {
      el.style.display = ''none'';
      btn.value=''[localization=SPOILERMOD_SHOW]Show Spoiler[/localization]'';
      }
      else
      {
      el.style.display = '''';
      btn.value=''[localization=SPOILERMOD_HIDE]Hide Spoiler[/localization]'';
      }
      }
    ', N'', N'      .spoilerbox
      {
      margin: 5px;
      padding: 4px;
      background-color: #eeeeee;
      border: solid 1px #808080;
      color: #000000;
      }
    ', N'\[spoiler\](?<inner>.+?)\[\/spoiler\]', N'', N'', 1, N'YAF.Modules.SpoilerBBCodeModule', 50)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (5, 1, N'USERLINK', N'[USERLINK][localization=USERLINKMOD_DESCRIPTION]Put User Name Here[/localization][/USERLINK]', N'', N'', N'', N'.yafnet .userLinkContainer
{
    background: url(Content/icons/user.png) #fff no-repeat 4px 50%;
    border: 1px solid #eee;
    padding: 4px 2px 4px 25px;
    margin: 3px;
    font-size: 80%;
    font-weight: bold;    
    background-color: #fff;
    -webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;	    
}

.yafnet .userLinkContainer:hover
{
    border: 1px solid #ddd;
    background-color: #eee;
}', N'\[userlink\](?<inner>.+?)\[\/userlink\]', N'', N'', 1, N'YAF.Modules.UserLinkBBCodeModule', 75)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (6, 1, N'VIMEO', N'[VIMEO]http://www.vimeo.com/xxxxxxx[/VIMEO]', N'', N'', N'', N'', N'\[vimeo\](?<inner>http://(?<prefix>[A-Za-z][A-Za-z][A-Za-z]?\.)?vimeo.com/(?<vimeoId>[0-9]{8}))[^[]*\[/vimeo\]', N'<div><iframe width="560" height="350" src="http://player.vimeo.com/video/${vimeoId}?show_title=1&amp;show_byline=1&amp;show_portrait=1&amp;&amp;fullscreen=1" frameborder="0"></iframe></div>
    ', N'prefix;vimeoId', 0, N'', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (7, 1, N'HIDE', N'[HIDE][localization=HIDEMOD_DESCRIPTION]The tag hides content from people until they press the thank you button for the post.[/localization][/HIDE]', N'', N'', N'', N'.HiddenGuestBox {padding: 0 .7em;}.HiddenGuestBoxImage img {float: left; padding: 0 0 3px 3px;}.HiddenGuestBox br {clear:both}', N'\[hide\](?<inner>(.|\n)*?)\[\/hide\]', N'', N'', 1, N'YAF.Modules.BBCode.HideBBCodeModule', 60)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (8, 1, N'GROUP-HIDE', N'[GROUP-HIDE][localization=HIDEGROUPMOD_DESCRIPTION]The tag hides from Guests[/localization][/GROUP-HIDE]', N'', N'', N'', N'.HiddenGuestBox {padding: 0 .7em;}.HiddenGuestBoxImage {float: left; margin-right: .3em;}', N'\[group-hide\](?<inner>(.|\n)*?)\[\/group-hide\]|\[group-hide=(?<group>([^""\r\n\]\[]*?))\](?<inner>(.|\n)*?)\[\/group-hide\]', N'', N'group', 1, N'YAF.Modules.BBCode.GroupHide', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (9, 1, N'HIDE-THANKS', N'[HIDE-THANKS=x][localization=HIDETHANKS_DESCRIPTION]The tag hides content from people who have below X thanks received.[/localization][/HIDE-THANKS]', N'', N'', N'', N'.HiddenGuestBox {padding: 0 .7em;}.HiddenGuestBoxImage img {float: left; padding: 0 0 3px 3px;}.HiddenGuestBox br {clear:both}', N'\[hide-thanks=(?<thanks>([0-9]*))\](?<inner>(.|\n)*?)\[\/hide-thanks\]', N'', N'thanks', 1, N'YAF.Modules.BBCode.HideBBCodeModule', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (10, 1, N'HIDE-REPLY-THANKS', N'[HIDE-REPLY-THANKS][localization=HIDEREPLYTHANKS_DESCRIPTION]The tag hides content from people until they either reply in the same thread or press the thank you button for the post.[/localization][/HIDE-REPLY-THANKS]', N'', N'', N'', N'.HiddenGuestBox {padding: 0 .7em;}.HiddenGuestBoxImage img {float: left; padding: 0 0 3px 3px;}.HiddenGuestBox br {clear:both}', N'\[hide-reply-thanks\](?<inner>(.|\n)*?)\[\/hide-reply-thanks\]', N'', N'', 1, N'YAF.Modules.BBCode.HideReplyThanksModule', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (11, 1, N'HIDE-REPLY', N'[HIDE-REPLY][localization=HIDEREPLY_DESCRIPTION]The tag hides content from people until they reply in the same thread.[/localization][/HIDE-REPLY]', N'', N'', N'', N'.HiddenGuestBox {padding: 0 .7em;}.HiddenGuestBoxImage img {float: left; padding: 0 0 3px 3px;}.HiddenGuestBox br {clear:both}', N'\[hide-reply\](?<inner>(.|\n)*?)\[\/hide-reply\]', N'', N'', 1, N'YAF.Modules.BBCode.HideReplyModule', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (12, 1, N'HIDE-POSTS', N'[HIDE-POSTS=x][localization=HIDEPOSTS_DESCRIPTION]The tag hides content from people who have below X posts.[/localization][/HIDE-POSTS]', N'', N'', N'', N'.HiddenGuestBox {padding: 0 .7em;}.HiddenGuestBoxImage img {float: left; padding: 0 0 3px 3px;}.HiddenGuestBox br {clear:both}', N'\[hide-posts=(?<posts>([0-9]*))\](?<inner>(.|\n)*?)\[\/hide-posts\]', N'', N'posts', 1, N'YAF.Modules.BBCode.HideBBCodeModule', 2)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (13, 1, N'ALBUMIMG', N'[ALBUMIMG][localization=ALBUMIMG_DESCRIPTION]Enter a Album Image Number[/localization][/ALBUMIMG]', N'', N'', N'', N'', N'\[albumimg\](?<inner>.+?)\[\/albumimg\]', N'', N'', 1, N'YAF.Modules.BBCode.AlbumImage', 30)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (14, 1, N'TWITTER', N'[TWITTER][localization=TWITTER_DESCRIPTION]Enter the Status ID of the Tweet you want to embed[/localization][/TWITTER]', N'', N'!function(d,s,id) {var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)) {js=d.createElement(s);js.id=id;js.async=true;js.src=''//platform.twitter.com/widgets.js'';fjs.parentNode.insertBefore(js,fjs);}}(document, ''script'', ''twitter-wjs'');', N'', N'', N'\[twitter\](?<statusID>[0-9].+?)\[/twitter\]', N'<!-- BEGIN twitter embed --><blockquote class="twitter-tweet"><a href="https://twitter.com/twitterapi/status/${statusID}"></a></blockquote><!-- END twitter embed -->', N'statusID', 0, N'', 100)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (15, 1, N'DAILYMOTION', N'[dailymotion][localization=DAILYMOTION_DESCRIPTION]Enter Dailymotion Url (http://www.dailymotion.com/video/xxxx)[/localization][/dailymotion]', N'', N'', N'', N'', N'\[dailymotion\](?<inner>http://(?<prefix>[A-Za-z][A-Za-z][A-Za-z]?\.)?dailymotion.com/video/(?<id>[^_]*))[^[]*\[/dailymotion\]', N'<div><!-- BEGIN dailymotion --><iframe frameborder="0" width="560" height="315" src="http://${prefix}dailymotion.com/embed/video/${id}?forcedQuality=hd720"></iframe><!-- END dailymotion --></div>', N'id;prefix', 0, N'', 1)
INSERT [dbo].[yaf_BBCode] ([BBCodeID], [BoardID], [Name], [Description], [OnClickJS], [DisplayJS], [EditJS], [DisplayCSS], [SearchRegex], [ReplaceRegex], [Variables], [UseModule], [ModuleClass], [ExecOrder]) VALUES (16, 1, N'ATTACH', N'[ATTACH][localization=ATTACH_DESCRIPTION]Enter a Album Image Number[/localization][/ATTACH]', N'', N'', N'', N'', N'\[attach\](?<inner>.+?)\[\/attach\]', N'', N'', 1, N'YAF.Modules.BBCode.Attach', 31)
SET IDENTITY_INSERT [dbo].[yaf_BBCode] OFF
SET IDENTITY_INSERT [dbo].[yaf_Board] ON 

INSERT [dbo].[yaf_Board] ([BoardID], [Name], [AllowThreaded], [MembershipAppName], [RolesAppName]) VALUES (1, N'Use Titan', 0, N'', N'')
SET IDENTITY_INSERT [dbo].[yaf_Board] OFF
SET IDENTITY_INSERT [dbo].[yaf_Category] ON 

INSERT [dbo].[yaf_Category] ([CategoryID], [BoardID], [Name], [CategoryImage], [SortOrder], [PollGroupID]) VALUES (2, 1, N'News and Information', NULL, 1, NULL)
INSERT [dbo].[yaf_Category] ([CategoryID], [BoardID], [Name], [CategoryImage], [SortOrder], [PollGroupID]) VALUES (3, 1, N'Members', NULL, 2, NULL)
INSERT [dbo].[yaf_Category] ([CategoryID], [BoardID], [Name], [CategoryImage], [SortOrder], [PollGroupID]) VALUES (4, 1, N'Support', NULL, 3, NULL)
INSERT [dbo].[yaf_Category] ([CategoryID], [BoardID], [Name], [CategoryImage], [SortOrder], [PollGroupID]) VALUES (5, 1, N'Non-English', NULL, 8, NULL)
INSERT [dbo].[yaf_Category] ([CategoryID], [BoardID], [Name], [CategoryImage], [SortOrder], [PollGroupID]) VALUES (6, 1, N'Open Discussion', NULL, 5, NULL)
SET IDENTITY_INSERT [dbo].[yaf_Category] OFF
SET IDENTITY_INSERT [dbo].[yaf_EventLog] ON 

INSERT [dbo].[yaf_EventLog] ([EventLogID], [EventTime], [UserID], [Source], [Description], [Type], [UserName]) VALUES (1, CAST(N'2013-03-26T22:08:10.780' AS DateTime), NULL, N'System.String', N'Exception In LatestInformationTask: System.Net.WebException: Unable to connect to the remote server ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond 38.102.33.231:80
   at System.Net.Sockets.Socket.DoConnect(EndPoint endPointSnapshot, SocketAddress socketAddress)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state, IAsyncResult asyncResult, Exception& exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.GetRequestStream(TransportContext& context)
   at System.Net.HttpWebRequest.GetRequestStream()
   at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   at YAF.RegisterV2.RegisterV2.LatestInfo(Int64 currentVersion, String culture)
   at YAF.Classes.LatestInformationTask.RunOnce()', 0, NULL)
INSERT [dbo].[yaf_EventLog] ([EventLogID], [EventTime], [UserID], [Source], [Description], [Type], [UserName]) VALUES (2, CAST(N'2013-03-27T14:48:08.713' AS DateTime), NULL, N'ForumDeleteTask', N'Forum (ID: 1) Delete Task Complete.', 2, NULL)
INSERT [dbo].[yaf_EventLog] ([EventLogID], [EventTime], [UserID], [Source], [Description], [Type], [UserName]) VALUES (3, CAST(N'2013-03-27T15:19:47.447' AS DateTime), NULL, N'ForumDeleteTask', N'Forum (ID: 24) Delete Task Complete.', 2, NULL)
INSERT [dbo].[yaf_EventLog] ([EventLogID], [EventTime], [UserID], [Source], [Description], [Type], [UserName]) VALUES (4, CAST(N'2013-03-28T10:03:19.660' AS DateTime), NULL, N'ForumDeleteTask', N'Forum (ID: 2) Delete Task Complete.', 2, NULL)
SET IDENTITY_INSERT [dbo].[yaf_EventLog] OFF
SET IDENTITY_INSERT [dbo].[yaf_Extension] ON 

INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (1, 1, N'avi')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (2, 1, N'bmp')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (3, 1, N'doc')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (4, 1, N'gif')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (5, 1, N'jpg')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (6, 1, N'mov')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (7, 1, N'mp3')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (8, 1, N'mpg')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (9, 1, N'png')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (10, 1, N'rar')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (11, 1, N'rm')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (12, 1, N'tif')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (13, 1, N'txt')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (14, 1, N'wav')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (15, 1, N'wma')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (16, 1, N'wmv')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (17, 1, N'wpd')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (18, 1, N'xls')
INSERT [dbo].[yaf_Extension] ([ExtensionID], [BoardId], [Extension]) VALUES (19, 1, N'zip')
SET IDENTITY_INSERT [dbo].[yaf_Extension] OFF
SET IDENTITY_INSERT [dbo].[yaf_Forum] ON 

INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (3, 3, NULL, N'Member Introduction', N'Introduce yourself to other members. Don''t be shy', 2, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (4, 3, NULL, N'Payment Proofs', N'Got paid? Post your proofs with screenshots here', 3, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (5, 3, NULL, N'Your Stats', N'Post your account statistics', 4, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (6, 3, NULL, N'Your Success Stories', N'Write about your success story', 5, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (7, 4, NULL, N'Bug Reports', N'Found a bug? Discuss it here and we will fix it immediately', 6, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (8, 4, NULL, N'Feature Requests', N'Is there anything you''d like to see changed or added - let us know', 7, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (9, 4, NULL, N'Problems and Questions', N'If you''re having problems or doubts about any of the services - post here', 8, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (10, 4, NULL, N'Languages Translation', N'Found any spelling mistake? Let us know', 9, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (11, 5, NULL, N'Deutsch', N'Deutsches Forum', 10, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (12, 5, NULL, N'Espanol', N'Foro en Espanol', 11, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (14, 5, NULL, N'Hindi', N'Hindi ke liye forum', 13, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (15, 5, NULL, N'Italiano', N'Forum in Italiano', 14, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (16, 5, NULL, N'Lietuviu', N'Lietuviskas forumas', 15, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (18, 5, NULL, N'Nederlands', N'Forum in Nederlands', 17, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (19, 5, NULL, N'Polski', N'Forum po polsku', 18, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (21, 5, NULL, N'Russkie', N'Russkiy forum', 20, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (22, 2, NULL, N'Moderators area', N'Special forum for moderators only', 21, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 2, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (23, 6, NULL, N'General', N'All topics', 22, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (25, 6, NULL, N'Computers, Technology, Business & Finance', N'And all related topics', 24, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (26, 6, NULL, N'Movies, TV, Music & Games', N'And all related topics', 23, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (27, 6, NULL, N'Sports, Health & Personal development', N'And all related topics', 25, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
INSERT [dbo].[yaf_Forum] ([ForumID], [CategoryID], [ParentID], [Name], [Description], [SortOrder], [LastPosted], [LastTopicID], [LastMessageID], [LastUserID], [LastUserName], [NumTopics], [NumPosts], [RemoteURL], [Flags], [ThemeURL], [PollGroupID], [UserID], [ImageURL], [Styles], [ModeratedPostCount], [IsModeratedNewTopicOnly], [LastUserDisplayName]) VALUES (28, 2, NULL, N'News', N'Read and debate about the latest news', 1, NULL, NULL, NULL, NULL, NULL, 0, 0, NULL, 0, NULL, NULL, NULL, NULL, N'', NULL, 0, NULL)
SET IDENTITY_INSERT [dbo].[yaf_Forum] OFF
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 3, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 4, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 5, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 6, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 7, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 8, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 9, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 10, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 11, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 12, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 14, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 15, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 16, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 18, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 19, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 21, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 22, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 23, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 25, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 26, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 27, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (1, 28, 1)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 3, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 4, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 5, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 6, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 7, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 8, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 9, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 10, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 11, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 12, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 14, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 15, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 16, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 18, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 19, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 21, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 22, 5)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 23, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 25, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 26, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 27, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (2, 28, 4)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 3, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 4, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 5, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 6, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 7, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 8, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 9, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 10, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 11, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 12, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 14, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 15, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 16, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 18, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 19, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 21, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 22, 5)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 23, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 25, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 26, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 27, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (3, 28, 6)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 3, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 4, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 5, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 6, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 7, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 8, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 9, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 10, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 11, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 12, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 14, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 15, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 16, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 18, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 19, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 21, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 22, 3)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 23, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 25, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 26, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 27, 2)
INSERT [dbo].[yaf_ForumAccess] ([GroupID], [ForumID], [AccessMaskID]) VALUES (4, 28, 2)
GO
SET IDENTITY_INSERT [dbo].[yaf_Group] ON 

INSERT [dbo].[yaf_Group] ([GroupID], [BoardID], [Name], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (1, 1, N'Administrators', 9, 2147483647, N'color: red; font-weight:bold;', 0, N'', 256, N'URL,IMG,SPOILER,QUOTE', N'', 10, 120)
INSERT [dbo].[yaf_Group] ([GroupID], [BoardID], [Name], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (2, 1, N'Guests', 2, 0, N'default!font-size: 8pt; font-style: italic; font-weight: bold; color: #0c7333/yafpro!font-size: 8pt; color: #6e1987', 1, NULL, 128, NULL, NULL, 0, 0)
INSERT [dbo].[yaf_Group] ([GroupID], [BoardID], [Name], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (3, 1, N'Registered', 4, 100, NULL, 1, NULL, 128, N'URL,IMG,SPOILER,QUOTE', NULL, 5, 30)
INSERT [dbo].[yaf_Group] ([GroupID], [BoardID], [Name], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (4, 1, N'Moderators', 8, 0, N'color: green; font-weight:bold;', 0, N'', 128, N'', N'', 0, 0)
SET IDENTITY_INSERT [dbo].[yaf_Group] OFF
INSERT [dbo].[yaf_prov_Application] ([ApplicationID], [ApplicationName], [ApplicationNameLwd], [Description]) VALUES (N'52df0d80-ae61-4e58-999d-c71191b7b751', N'/', N'/', NULL)
SET IDENTITY_INSERT [dbo].[yaf_Rank] ON 

INSERT [dbo].[yaf_Rank] ([RankID], [BoardID], [Name], [MinPosts], [RankImage], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (1, 1, N'Administration', NULL, N'Administration.png', 0, 2147483647, N'color: red; font-weight:bold;', 0, N'', 128, N'', N'', 0, 0)
INSERT [dbo].[yaf_Rank] ([RankID], [BoardID], [Name], [MinPosts], [RankImage], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (2, 1, N'Guest', NULL, NULL, 0, 0, NULL, 100, NULL, 0, NULL, NULL, 0, 0)
INSERT [dbo].[yaf_Rank] ([RankID], [BoardID], [Name], [MinPosts], [RankImage], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (3, 1, N'Newbie', 0, NULL, 3, 10, NULL, 3, NULL, 128, NULL, NULL, 0, 0)
INSERT [dbo].[yaf_Rank] ([RankID], [BoardID], [Name], [MinPosts], [RankImage], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (4, 1, N'Member', 10, NULL, 2, 30, NULL, 2, N'', 128, N'', N'', 0, 0)
INSERT [dbo].[yaf_Rank] ([RankID], [BoardID], [Name], [MinPosts], [RankImage], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (5, 1, N'Advanced Member', 30, NULL, 2, 100, NULL, 1, NULL, 128, NULL, NULL, 0, 0)
INSERT [dbo].[yaf_Rank] ([RankID], [BoardID], [Name], [MinPosts], [RankImage], [Flags], [PMLimit], [Style], [SortOrder], [Description], [UsrSigChars], [UsrSigBBCodes], [UsrSigHTMLTags], [UsrAlbums], [UsrAlbumImages]) VALUES (6, 1, N'Moderator', NULL, N'Moderator.png', 0, 0, N'color: green; font-weight:bold;', 0, N'', 100, N'', N'', 3, 10)
SET IDENTITY_INSERT [dbo].[yaf_Rank] OFF
SET IDENTITY_INSERT [dbo].[yaf_Registry] ON 

INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (1, N'version', N'59', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (2, N'versionname', N'2.2.2', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (3, N'timezone', N'60', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (4, N'culture', N'en-US', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (5, N'language', N'english.xml', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (6, N'smtpserver', N'', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (7, N'forumemail', N'contact@usetitan.com', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (8, N'culture', N'en-US', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (9, N'language', N'english.xml', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (10, N'maxusers', N'2', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (11, N'maxuserswhen', N'2013-03-26T12:17:53.020', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (12, N'allowthemedlogo', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (13, N'jqueryuithemecdnhosted', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (14, N'digestsendeveryxhours', N'24', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (15, N'boardpollid', N'0', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (16, N'theme', N'Titan.xml', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (17, N'mobiletheme', N'', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (18, N'showtopicsdefault', N'0', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (19, N'fileextensionareallowed', N'1', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (20, N'notificationonuserregisteremaillist', N'', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (21, N'emailmoderatorsonmoderatedpost', N'0', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (22, N'emailmoderatorsonreportedpost', N'0', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (23, N'allowdigestemail', N'0', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (24, N'defaultsenddigestemail', N'0', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (25, N'defaultnotificationsetting', N'10', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (26, N'copyrightremovaldomainkey', N'', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (27, N'jqueryuitheme', N'smoothness', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (28, N'allowgenderinuserbox', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (29, N'enabledisplayname', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (30, N'enabletopicdescription', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (31, N'enabletopicstatus', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (32, N'allowuserstexteditor', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (33, N'emailverification', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (34, N'allownotificationallpostsalltopics', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (35, N'allowforumswithsamename', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (36, N'usefulltextsearch', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (37, N'usereadtrackingbydatabase', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (38, N'showlastunreadpost', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (39, N'enableipinfoservice', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (40, N'abadonsessionsfordonttrack', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (41, N'usessltologin', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (42, N'usessltoregister', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (43, N'showmoved', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (44, N'showavatarsintopic', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (45, N'showguestsindetailedactivelist', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (46, N'showcrawlersinactivelist', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (47, N'showcountryinfoinuserbox', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (48, N'showgroups', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (49, N'blanklinks', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (50, N'allowusertheme', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (51, N'allowuserhidehimself', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (52, N'allowuserlanguage', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (53, N'allowsinglesignon', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (54, N'registernewfacebookuser', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (55, N'allowmoderatorsviewips', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (56, N'allowpmemailnotification', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (57, N'allowpollchangesafterfirstvote', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (58, N'allowviewpollvotesifnopollacces', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (59, N'usefarsicalender', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (60, N'showrelativetime', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (61, N'allowmultiplechoices', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (62, N'allowguestsviewpolloptions', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (63, N'allowusersimagedpoll', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (64, N'avatarupload', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (65, N'avatarremote', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (66, N'avatargallery', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (67, N'avatargravatar', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (68, N'allowemailchange', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (69, N'allowpasswordchange', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (70, N'usefiletable', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (71, N'showrsslink', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (72, N'showatomlink', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (73, N'showpagegenerationtime', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (74, N'showyafversion', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (75, N'showforumjump', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (76, N'allowprivatemessages', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (77, N'allowemailsending', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (78, N'allowsignatures', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (79, N'externalsearchinnewwindow', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (80, N'showquicksearch', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (81, N'removenestedquotes', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (82, N'disableregistrations', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (83, N'createnntpusers', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (84, N'showgroupsprofile', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (85, N'pollvotetiedtoip', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (86, N'showadstosignedinusers', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (87, N'displaypoints', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (88, N'showquickanswer', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (89, N'showdeletedmessages', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (90, N'showdeletedmessagestoall', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (91, N'showmoderatorlist', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (92, N'showmoderatorlistascolumn', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (93, N'enablecaptchaforpost', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (94, N'enablecaptchaforguests', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (95, N'usenofollowlinks', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (96, N'dourlreferrersecuritycheck', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (97, N'enableimageattachmentresize', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (98, N'showshoutbox', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (99, N'showshoutboxsmiles', N'0', NULL)
GO
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (100, N'nocountforumsinactivediscussions', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (101, N'usestylednicks', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (102, N'usestyledtopictitles', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (103, N'showuseronlinestatus', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (104, N'showthanksdate', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (105, N'enablethanksmod', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (106, N'enablebuddylist', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (107, N'enablednacalendar', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (108, N'enableactivelocationerrorslog', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (109, N'useragentbadlog', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (110, N'enablealbum', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (111, N'adddynamicpagemetatags', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (112, N'allowdisplaynamemodification', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (113, N'imageattachmentresizecropped', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (114, N'useloginbox', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (115, N'enableuserreputation', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (116, N'reputationallownegative', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (117, N'displayjoindate', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (118, N'showbrowsingusers', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (119, N'showmedals', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (120, N'allowposttoblog', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (121, N'allowemailtopic', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (122, N'requirelogin', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (123, N'showactivediscussions', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (124, N'showforumstatistics', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (125, N'showrecentusers', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (126, N'showtodaysbirthdays', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (127, N'showrulesforregistration', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (128, N'akismetapikey', N'', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (129, N'forumeditor', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (130, N'ipinfopageurl', N'http://www.dnsstuff.com/tools/whois.ch?ip={0}', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (131, N'iplocatorurlpath', N'http://api.ipinfodb.com/v3/ip-city/?key=<your_api_key>&ip={0}', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (132, N'iplocatorresultsmapping', N'StatusCode,StatusMessage, IpAddress,CountryCode,CountryName,RegionName,CityName,ZipCode,Latitude,Longitude,TimeZone', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (133, N'recaptchapublickey', N'', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (134, N'recaptchaprivatekey', N'', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (135, N'searchengine1', N'http://google.com/search?as_q={Word}&hl={Language}&num={ResultsPerPage}&btnG={ButtonName}&as_epq={Word}&as_oq={Word}&as_eq={Word}&lr=&cr=&as_ft=i&as_filetype=&as_qdr=&as_occt=&as_dt=i&as_sitesearch={Site}&as_rights=&safe=off', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (136, N'searchengine2', N'http://yandex.ru/yandsearch?date=all&text=&site={Site}&rstr=&zone=all&wordforms=&lang={Language}&within=&from_day=&from_month=&from_year=&to_day=&to_month=&to_year=&mime=&numdoc={ResultsPerPage}&lr=', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (137, N'searchengine1parameters', N'Google^?^&^+^;^AnyWord:as_oq={Word}^AllWords:as_q={Word}^ExactFrase:as_epq={Word}^WithoutWords:as_eq={Word}', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (138, N'searchengine2parameters', N'Yandex^?^&^+^;^AnyWord:text={Word}/wordforms=any^AllWords:text={Word}/wordforms=all^ExactFrase:text={Word}/wordforms=exact^WithoutWords:text=~~{Word}', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (139, N'gravatarrating', N'G', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (140, N'acceptedhtml', N'br,hr,b,i,u,a,div,ol,ul,li,blockquote,img,span,p,em,strong,font,pre,h1,h2,h3,h4,h5,h6,address', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (141, N'adpost', N'', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (142, N'customloginredirecturl', N'', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (143, N'webservicetoken', N'ce8d42fd-36ef-42af-a7ee-7a80893539f8', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (144, N'searchstringpattern', N'.*', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (145, N'userbox', N'<div class="section"><yaf:rankimage /><yaf:rank/></div><br /><yaf:reputation /><yaf:medals /><div class="section"><yaf:joindate /><yaf:posts /></div>', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (146, N'userboxavatar', N'<div class="section">{0}</div><br clear="all" />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (147, N'userboxmedals', N'<div class="section medals">{0} {1}{2}</div><br clear="all" />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (148, N'userboxrankimage', N'{0}<br clear="all" />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (149, N'userboxcountryimage', N'{0}<br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (150, N'userboxrank', N'{0}: {1}<br clear="all" />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (151, N'userboxgroups', N'{0}: {1}<br clear="all" />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (152, N'userboxjoindate', N'{0}: {1}<br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (153, N'userboxgender', N'{0}<br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (154, N'userboxposts', N'{0}: {1:N0}<br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (155, N'userboxreputation', N'<div class="section">{0}: {1:N0}</div><br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (156, N'userboxlocation', N'{0}: {1}<br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (157, N'userboxthanksfrom', N'{0}<br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (158, N'userboxthanksto', N'{0}<br />', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (159, N'spamservicetype', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (160, N'spammessagehandling', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (161, N'showsharetopicto', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (162, N'showretweetmessageto', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (163, N'showteamto', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (164, N'showhelpto', N'2', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (165, N'servertimecorrection', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (166, N'memberlistpagesize', N'20', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (167, N'mytopicslistpagesize', N'20', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (168, N'postlatestfeedaccess', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (169, N'postsfeedaccess', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (170, N'topicsfeedaccess', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (171, N'forumfeedaccess', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (172, N'activetopicfeedaccess', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (173, N'favoritetopicfeedaccess', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (174, N'avatarwidth', N'50', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (175, N'avatarheight', N'80', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (176, N'allowcreatetopicssamename', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (177, N'avatarsize', N'50000', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (178, N'maxwordlength', N'40', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (179, N'maxfilesize', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (180, N'messagehistorydaystolog', N'30', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (181, N'lockposts', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (182, N'postsperpage', N'20', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (183, N'topicsperpage', N'15', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (184, N'postflooddelay', N'30', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (185, N'allowedpollchoicenumber', N'10', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (186, N'allowedpollnumber', N'3', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (187, N'pollimagemaxfilesize', N'100', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (188, N'captchatyperegister', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (189, N'edittimeout', N'30', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (190, N'reportpostpermissions', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (191, N'captchasize', N'8', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (192, N'profileviewpermission', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (193, N'returnsearchmax', N'100', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (194, N'activeusersviewpermissions', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (195, N'memberslistviewpermissions', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (196, N'activediscussionscount', N'5', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (197, N'activediscussionscachetimeout', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (198, N'searchstringminlength', N'4', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (199, N'searchstringmaxlength', N'50', NULL)
GO
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (200, N'searchpermissions', N'2', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (201, N'externalsearchpermissions', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (202, N'forumstatisticscachetimeout', N'60', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (203, N'boarduserstatscachetimeout', N'60', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (204, N'privatemessagemaxrecipients', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (205, N'disablenofollowlinksafterday', N'0', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (206, N'boardmoderatorscachetimeout', N'1440', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (207, N'boardcategoriescachetimeout', N'1440', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (208, N'replacerulescachetimeout', N'1440', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (209, N'firstpostcachetimeout', N'120', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (210, N'maxpostsize', N'32767', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (211, N'maxreportpostchars', N'128', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (212, N'maxnumberofattachments', N'5', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (213, N'pictureattachmentdisplaytreshold', N'262144', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (214, N'imageattachmentresizewidth', N'200', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (215, N'imageattachmentresizeheight', N'200', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (216, N'activeuserlazydatacachetimeout', N'10', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (217, N'onlinestatuscachetimeout', N'60000', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (218, N'usernamemaxlength', N'50', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (219, N'relativetimerefreshtime', N'60000', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (220, N'reputationmaxnegative', N'-100', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (221, N'reputationmaxpositive', N'500', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (222, N'reputationminupvoting', N'1', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (223, N'reputationmindownvoting', N'100', NULL)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (224, N'recapturemultipleinstances', N'1', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (225, N'twitterusername', N'', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (226, N'activelisttime', N'5', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (227, N'albumimagessizemax', N'1048576', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (228, N'albumsperpage', N'6', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (229, N'albumimagesperpage', N'10', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (230, N'populartopicviews', N'100', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (231, N'populartopicreplys', N'10', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (232, N'populartopicdays', N'7', 1)
INSERT [dbo].[yaf_Registry] ([RegistryID], [Name], [Value], [BoardID]) VALUES (233, N'baseurlmask', N'http://hash-ads.com', NULL)
SET IDENTITY_INSERT [dbo].[yaf_Registry] OFF
SET IDENTITY_INSERT [dbo].[yaf_Spam_Words] ON 

INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (1, 1, N'kitchen.*?co.uk')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (2, 1, N'http://www.cheap-for-jerseys.com/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (3, 1, N'http://www.wholesalejerseysclub.com/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (4, 1, N'http://www.allcheapairmax.co.uk/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (5, 1, N'sportschoenenoutletonlinenl')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (6, 1, N'http://www.conversecanvasshoegermany.com/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (7, 1, N'http://www.scarpenikesaldiitalia.com')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (8, 1, N'Nike.*?air')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (9, 1, N'http://www.blazerprezzo.com')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (10, 1, N'Nike.*?free')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (11, 1, N'diesel.*?watch')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (12, 1, N'robertsb2000@gmail.com')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (13, 1, N'fake.*?passport')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (14, 1, N'http://nijia.vn/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (15, 1, N'http://www.umetion.jp/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (16, 1, N'buy.*?passport')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (17, 1, N'http://support.nitropdf.com/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (18, 1, N'oz.*?mobile.*?phone')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (19, 1, N'http://blog.livedoor.jp/dentalsale/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (20, 1, N'http://www.soran.edu.iq/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (21, 1, N'Pandora.*?bracelets')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (22, 1, N'http://www.silvercharmsdiy.co.uk/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (23, 1, N'http://twittyup.com')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (24, 1, N'http://www.fifa15coinsok.com/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (25, 1, N'http://www.onlinexdating.com/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (26, 1, N'http://www.unionbay.se.com/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (27, 1, N'http://www.online12monthloans.co.uk/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (28, 1, N'http://www.quick12monthpaydayloans.co.uk/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (29, 1, N'http://www.honeysneakers.de/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (30, 1, N'http://www.e12monthpaydayloans7.co.uk/')
INSERT [dbo].[yaf_Spam_Words] ([ID], [BoardId], [SpamWord]) VALUES (31, 1, N'http://www.moneyonlineinvestment.com/')
SET IDENTITY_INSERT [dbo].[yaf_Spam_Words] OFF
SET IDENTITY_INSERT [dbo].[yaf_TopicStatus] ON 

INSERT [dbo].[yaf_TopicStatus] ([TopicStatusID], [TopicStatusName], [BoardID], [DefaultDescription]) VALUES (1, N'INFORMATIC', 1, N'Informatic')
INSERT [dbo].[yaf_TopicStatus] ([TopicStatusID], [TopicStatusName], [BoardID], [DefaultDescription]) VALUES (2, N'SOLVED', 1, N'Solved')
INSERT [dbo].[yaf_TopicStatus] ([TopicStatusID], [TopicStatusName], [BoardID], [DefaultDescription]) VALUES (3, N'QUESTION', 1, N'Question')
INSERT [dbo].[yaf_TopicStatus] ([TopicStatusID], [TopicStatusName], [BoardID], [DefaultDescription]) VALUES (4, N'ISSUE', 1, N'Issue')
INSERT [dbo].[yaf_TopicStatus] ([TopicStatusID], [TopicStatusName], [BoardID], [DefaultDescription]) VALUES (5, N'FIXED', 1, N'Fixed')
SET IDENTITY_INSERT [dbo].[yaf_TopicStatus] OFF
SET IDENTITY_INSERT [dbo].[yaf_User] ON 

INSERT [dbo].[yaf_User] ([UserID], [BoardID], [ProviderUserKey], [Name], [DisplayName], [Password], [Email], [Joined], [LastVisit], [IP], [NumPosts], [TimeZone], [Avatar], [Signature], [AvatarImage], [AvatarImageType], [RankID], [Suspended], [LanguageFile], [ThemeFile], [UseSingleSignOn], [TextEditor], [OverrideDefaultThemes], [PMNotification], [AutoWatchTopics], [DailyDigest], [NotificationType], [Flags], [Points], [Culture], [IsFacebookUser], [IsTwitterUser], [UserStyle], [StyleFlags], [IsGoogleUser], [SuspendedReason], [SuspendedBy]) VALUES (1, 1, NULL, N'Guest', N'Guest', N'na', N'contact@usetitan.com', CAST(N'2013-03-25T16:23:56.557' AS DateTime), CAST(N'2015-12-21T12:19:00.640' AS DateTime), N'41.238.225.204', 1, 60, NULL, NULL, NULL, NULL, 2, NULL, NULL, NULL, 0, NULL, 1, 1, 0, 0, 10, 6, 1, NULL, 0, 0, N'default!font-size: 8pt; font-style: italic; font-weight: bold; color: #0c7333/yafpro!font-size: 8pt; color: #6e1987', 0, 0, NULL, 0)
INSERT [dbo].[yaf_User] ([UserID], [BoardID], [ProviderUserKey], [Name], [DisplayName], [Password], [Email], [Joined], [LastVisit], [IP], [NumPosts], [TimeZone], [Avatar], [Signature], [AvatarImage], [AvatarImageType], [RankID], [Suspended], [LanguageFile], [ThemeFile], [UseSingleSignOn], [TextEditor], [OverrideDefaultThemes], [PMNotification], [AutoWatchTopics], [DailyDigest], [NotificationType], [Flags], [Points], [Culture], [IsFacebookUser], [IsTwitterUser], [UserStyle], [StyleFlags], [IsGoogleUser], [SuspendedReason], [SuspendedBy]) VALUES (2, 1, N'1005', N'admin', N'admin', N'na', N'noemail@none.com', CAST(N'2013-03-25T16:23:56.557' AS DateTime), CAST(N'2015-12-21T12:20:24.303' AS DateTime), N'41.238.225.204', 1, 60, NULL, NULL, NULL, NULL, 1, NULL, NULL, NULL, 0, NULL, 1, 1, 1, 0, 30, 3, 1, NULL, 0, 0, N'color: red; font-weight:bold;', 0, 0, NULL, 0)
SET IDENTITY_INSERT [dbo].[yaf_User] OFF
INSERT [dbo].[yaf_UserGroup] ([UserID], [GroupID]) VALUES (1, 2)
INSERT [dbo].[yaf_UserGroup] ([UserID], [GroupID]) VALUES (2, 1)
INSERT [dbo].[yaf_UserGroup] ([UserID], [GroupID]) VALUES (2, 3)
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_BannedEmail]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_BannedEmail] ADD  CONSTRAINT [IX_yaf_BannedEmail] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Mask] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_BannedIP]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_BannedIP] ADD  CONSTRAINT [IX_yaf_BannedIP] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Mask] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_BannedName]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_BannedName] ADD  CONSTRAINT [IX_yaf_BannedName] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Mask] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_yaf_Buddy]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_Buddy] ADD  CONSTRAINT [IX_yaf_Buddy] UNIQUE NONCLUSTERED 
(
	[FromUserID] ASC,
	[ToUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_Category]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_Category] ADD  CONSTRAINT [IX_yaf_Category] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_CheckEmail]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_CheckEmail] ADD  CONSTRAINT [IX_yaf_CheckEmail] UNIQUE NONCLUSTERED 
(
	[Hash] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_Group]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_Group] ADD  CONSTRAINT [IX_yaf_Group] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_Rank]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_Rank] ADD  CONSTRAINT [IX_yaf_Rank] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_Smiley]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_Smiley] ADD  CONSTRAINT [IX_yaf_Smiley] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_User]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [IX_yaf_User] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_yaf_UserProfile]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_UserProfile] ADD  CONSTRAINT [IX_yaf_UserProfile] UNIQUE NONCLUSTERED 
(
	[UserID] ASC,
	[ApplicationName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_yaf_WatchForum]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_WatchForum] ADD  CONSTRAINT [IX_yaf_WatchForum] UNIQUE NONCLUSTERED 
(
	[ForumID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_yaf_WatchTopic]    Script Date: 06.02.2016 16:47:51 ******/
ALTER TABLE [dbo].[yaf_WatchTopic] ADD  CONSTRAINT [IX_yaf_WatchTopic] UNIQUE NONCLUSTERED 
(
	[TopicID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[yaf_AccessMask] ADD  CONSTRAINT [DF_yaf_AccessMask_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_AccessMask] ADD  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[yaf_Attachment] ADD  DEFAULT ((0)) FOR [UserID]
GO
ALTER TABLE [dbo].[yaf_EventLog] ADD  CONSTRAINT [DF_yaf_EventLog_Type]  DEFAULT ((0)) FOR [Type]
GO
ALTER TABLE [dbo].[yaf_Extension] ADD  CONSTRAINT [DF_yaf_Extension_BoardID]  DEFAULT ((1)) FOR [BoardId]
GO
ALTER TABLE [dbo].[yaf_Forum] ADD  CONSTRAINT [DF_yaf_Forum_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_Forum] ADD  CONSTRAINT [DF_yaf_Forum_IsModeratedNewTopicOnly]  DEFAULT ((0)) FOR [IsModeratedNewTopicOnly]
GO
ALTER TABLE [dbo].[yaf_Group] ADD  CONSTRAINT [DF_yaf_Group_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_Group] ADD  CONSTRAINT [DF_yaf_Group_PMLimit]  DEFAULT ((0)) FOR [PMLimit]
GO
ALTER TABLE [dbo].[yaf_Group] ADD  CONSTRAINT [DF_yaf_Group_SortOrder]  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[yaf_Group] ADD  CONSTRAINT [DF_yaf_Group_UsrSigChars]  DEFAULT ((0)) FOR [UsrSigChars]
GO
ALTER TABLE [dbo].[yaf_Group] ADD  CONSTRAINT [DF_yaf_Group_UsrAlbums]  DEFAULT ((0)) FOR [UsrAlbums]
GO
ALTER TABLE [dbo].[yaf_Group] ADD  CONSTRAINT [DF_yaf_Group_UsrAlbumImages]  DEFAULT ((0)) FOR [UsrAlbumImages]
GO
ALTER TABLE [dbo].[yaf_GroupMedal] ADD  CONSTRAINT [DF_yaf_GroupMedal_Hide]  DEFAULT ((0)) FOR [Hide]
GO
ALTER TABLE [dbo].[yaf_GroupMedal] ADD  CONSTRAINT [DF_yaf_GroupMedal_OnlyRibbon]  DEFAULT ((0)) FOR [OnlyRibbon]
GO
ALTER TABLE [dbo].[yaf_GroupMedal] ADD  CONSTRAINT [DF_yaf_GroupMedal_SortOrder]  DEFAULT ((255)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[yaf_Mail] ADD  CONSTRAINT [DF_yaf_Mail_SendTries]  DEFAULT ((0)) FOR [SendTries]
GO
ALTER TABLE [dbo].[yaf_Medal] ADD  CONSTRAINT [DF_yaf_Medal_DefaultOrder]  DEFAULT ((255)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[yaf_Medal] ADD  CONSTRAINT [DF_yaf_Medal_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_Message] ADD  CONSTRAINT [DF_yaf_Message_Flags]  DEFAULT ((23)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_Message] ADD  CONSTRAINT [DF_yaf_Message_IsModeratorChanged]  DEFAULT ((0)) FOR [IsModeratorChanged]
GO
ALTER TABLE [dbo].[yaf_MessageHistory] ADD  CONSTRAINT [DF_yaf_MessageHistory_IsModeratorChanged]  DEFAULT ((0)) FOR [IsModeratorChanged]
GO
ALTER TABLE [dbo].[yaf_MessageHistory] ADD  CONSTRAINT [DF_yaf_MessageHistory_Flags]  DEFAULT ((23)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_MessageReportedAudit] ADD  DEFAULT ((1)) FOR [ReportedNumber]
GO
ALTER TABLE [dbo].[yaf_Poll] ADD  CONSTRAINT [DF_yaf_Poll_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_PollGroupCluster] ADD  CONSTRAINT [DF_yaf_PollGroupCluster_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_Rank] ADD  CONSTRAINT [DF_yaf_Rank_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_Rank] ADD  CONSTRAINT [DF_yaf_Rank_PMLimit]  DEFAULT ((0)) FOR [PMLimit]
GO
ALTER TABLE [dbo].[yaf_Rank] ADD  CONSTRAINT [DF_yaf_Rank_SortOrder]  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[yaf_Rank] ADD  CONSTRAINT [DF_yaf_Rank_UsrSigChars]  DEFAULT ((0)) FOR [UsrSigChars]
GO
ALTER TABLE [dbo].[yaf_Rank] ADD  CONSTRAINT [DF_yaf_Rank_UsrAlbums]  DEFAULT ((0)) FOR [UsrAlbums]
GO
ALTER TABLE [dbo].[yaf_Rank] ADD  CONSTRAINT [DF_yaf_Rank_UsrAlbumImages]  DEFAULT ((0)) FOR [UsrAlbumImages]
GO
ALTER TABLE [dbo].[yaf_Smiley] ADD  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[yaf_Topic] ADD  CONSTRAINT [DF_yaf_Topic_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_UseSingleSignOn]  DEFAULT ((0)) FOR [UseSingleSignOn]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_OverrideDefaultThemes]  DEFAULT ((1)) FOR [OverrideDefaultThemes]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_PMNotification]  DEFAULT ((1)) FOR [PMNotification]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_AutoWatchTopics]  DEFAULT ((0)) FOR [AutoWatchTopics]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_DailyDigest]  DEFAULT ((0)) FOR [DailyDigest]
GO
ALTER TABLE [dbo].[yaf_User] ADD  DEFAULT ((10)) FOR [NotificationType]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_Flags]  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_Points]  DEFAULT ((0)) FOR [Points]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_IsFacebookUser]  DEFAULT ((0)) FOR [IsFacebookUser]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_IsTwitterUser]  DEFAULT ((0)) FOR [IsTwitterUser]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_User_StyleFlags]  DEFAULT ((0)) FOR [StyleFlags]
GO
ALTER TABLE [dbo].[yaf_User] ADD  CONSTRAINT [DF_yaf_IsGoogleUser]  DEFAULT ((0)) FOR [IsGoogleUser]
GO
ALTER TABLE [dbo].[yaf_User] ADD  DEFAULT ((0)) FOR [SuspendedBy]
GO
ALTER TABLE [dbo].[yaf_UserMedal] ADD  CONSTRAINT [DF_yaf_UserMedal_Hide]  DEFAULT ((0)) FOR [Hide]
GO
ALTER TABLE [dbo].[yaf_UserMedal] ADD  CONSTRAINT [DF_yaf_UserMedal_OnlyRibbon]  DEFAULT ((0)) FOR [OnlyRibbon]
GO
ALTER TABLE [dbo].[yaf_UserMedal] ADD  CONSTRAINT [DF_yaf_UserMedal_SortOrder]  DEFAULT ((255)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[yaf_UserPMessage] ADD  DEFAULT ((0)) FOR [Flags]
GO
ALTER TABLE [dbo].[yaf_UserPMessage] ADD  DEFAULT ((0)) FOR [IsReply]
GO
ALTER TABLE [dbo].[yaf_AccessMask]  WITH CHECK ADD  CONSTRAINT [FK_yaf_AccessMask_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_AccessMask] CHECK CONSTRAINT [FK_yaf_AccessMask_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_Active]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Active_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_Active] CHECK CONSTRAINT [FK_yaf_Active_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_Active]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Active_yaf_Forum] FOREIGN KEY([ForumID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
GO
ALTER TABLE [dbo].[yaf_Active] CHECK CONSTRAINT [FK_yaf_Active_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_Active]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Active_yaf_Topic] FOREIGN KEY([TopicID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_Active] CHECK CONSTRAINT [FK_yaf_Active_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_Active]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Active_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Active] CHECK CONSTRAINT [FK_yaf_Active_yaf_User]
GO
ALTER TABLE [dbo].[yaf_AdminPageUserAccess]  WITH CHECK ADD  CONSTRAINT [FK_yaf_AdminPageUserAccess_yaf_UserID] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_AdminPageUserAccess] CHECK CONSTRAINT [FK_yaf_AdminPageUserAccess_yaf_UserID]
GO
ALTER TABLE [dbo].[yaf_Attachment]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Attachment_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Attachment] CHECK CONSTRAINT [FK_yaf_Attachment_yaf_User]
GO
ALTER TABLE [dbo].[yaf_BannedEmail]  WITH CHECK ADD  CONSTRAINT [FK_yaf_BannedEmail_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_BannedEmail] CHECK CONSTRAINT [FK_yaf_BannedEmail_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_BannedIP]  WITH CHECK ADD  CONSTRAINT [FK_yaf_BannedIP_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_BannedIP] CHECK CONSTRAINT [FK_yaf_BannedIP_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_BannedName]  WITH CHECK ADD  CONSTRAINT [FK_yaf_BannedName_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_BannedName] CHECK CONSTRAINT [FK_yaf_BannedName_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_BBCode]  WITH CHECK ADD  CONSTRAINT [FK_yaf_BBCode_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_BBCode] CHECK CONSTRAINT [FK_yaf_BBCode_Board]
GO
ALTER TABLE [dbo].[yaf_Buddy]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Buddy_yaf_User] FOREIGN KEY([FromUserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Buddy] CHECK CONSTRAINT [FK_yaf_Buddy_yaf_User]
GO
ALTER TABLE [dbo].[yaf_Category]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Category_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_Category] CHECK CONSTRAINT [FK_yaf_Category_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_Category]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Category_yaf_PollGroupCluster] FOREIGN KEY([PollGroupID])
REFERENCES [dbo].[yaf_PollGroupCluster] ([PollGroupID])
GO
ALTER TABLE [dbo].[yaf_Category] CHECK CONSTRAINT [FK_yaf_Category_yaf_PollGroupCluster]
GO
ALTER TABLE [dbo].[yaf_CheckEmail]  WITH CHECK ADD  CONSTRAINT [FK_yaf_CheckEmail_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_CheckEmail] CHECK CONSTRAINT [FK_yaf_CheckEmail_yaf_User]
GO
ALTER TABLE [dbo].[yaf_Choice]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Choice_yaf_Poll] FOREIGN KEY([PollID])
REFERENCES [dbo].[yaf_Poll] ([PollID])
GO
ALTER TABLE [dbo].[yaf_Choice] CHECK CONSTRAINT [FK_yaf_Choice_yaf_Poll]
GO
ALTER TABLE [dbo].[yaf_EventLog]  WITH CHECK ADD  CONSTRAINT [FK_yaf_EventLog_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_EventLog] CHECK CONSTRAINT [FK_yaf_EventLog_yaf_User]
GO
ALTER TABLE [dbo].[yaf_EventLogGroupAccess]  WITH CHECK ADD  CONSTRAINT [FK_yaf_EventLogGroupAccess_yaf_GroupID] FOREIGN KEY([GroupID])
REFERENCES [dbo].[yaf_Group] ([GroupID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_EventLogGroupAccess] CHECK CONSTRAINT [FK_yaf_EventLogGroupAccess_yaf_GroupID]
GO
ALTER TABLE [dbo].[yaf_Extension]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Extension_yaf_Board] FOREIGN KEY([BoardId])
REFERENCES [dbo].[yaf_Board] ([BoardID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_Extension] CHECK CONSTRAINT [FK_yaf_Extension_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_FavoriteTopic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_FavoriteTopic_yaf_Topic] FOREIGN KEY([TopicID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_FavoriteTopic] CHECK CONSTRAINT [FK_yaf_FavoriteTopic_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_FavoriteTopic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_FavoriteTopic_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_FavoriteTopic] CHECK CONSTRAINT [FK_yaf_FavoriteTopic_yaf_User]
GO
ALTER TABLE [dbo].[yaf_Forum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Forum_yaf_Category] FOREIGN KEY([CategoryID])
REFERENCES [dbo].[yaf_Category] ([CategoryID])
GO
ALTER TABLE [dbo].[yaf_Forum] CHECK CONSTRAINT [FK_yaf_Forum_yaf_Category]
GO
ALTER TABLE [dbo].[yaf_Forum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Forum_yaf_Forum] FOREIGN KEY([ParentID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
GO
ALTER TABLE [dbo].[yaf_Forum] CHECK CONSTRAINT [FK_yaf_Forum_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_Forum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Forum_yaf_Message] FOREIGN KEY([LastMessageID])
REFERENCES [dbo].[yaf_Message] ([MessageID])
GO
ALTER TABLE [dbo].[yaf_Forum] CHECK CONSTRAINT [FK_yaf_Forum_yaf_Message]
GO
ALTER TABLE [dbo].[yaf_Forum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Forum_yaf_PollGroupCluster] FOREIGN KEY([PollGroupID])
REFERENCES [dbo].[yaf_PollGroupCluster] ([PollGroupID])
GO
ALTER TABLE [dbo].[yaf_Forum] CHECK CONSTRAINT [FK_yaf_Forum_yaf_PollGroupCluster]
GO
ALTER TABLE [dbo].[yaf_Forum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Forum_yaf_Topic] FOREIGN KEY([LastTopicID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_Forum] CHECK CONSTRAINT [FK_yaf_Forum_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_Forum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Forum_yaf_User] FOREIGN KEY([LastUserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Forum] CHECK CONSTRAINT [FK_yaf_Forum_yaf_User]
GO
ALTER TABLE [dbo].[yaf_ForumAccess]  WITH CHECK ADD  CONSTRAINT [FK_yaf_ForumAccess_yaf_AccessMask] FOREIGN KEY([AccessMaskID])
REFERENCES [dbo].[yaf_AccessMask] ([AccessMaskID])
GO
ALTER TABLE [dbo].[yaf_ForumAccess] CHECK CONSTRAINT [FK_yaf_ForumAccess_yaf_AccessMask]
GO
ALTER TABLE [dbo].[yaf_ForumAccess]  WITH CHECK ADD  CONSTRAINT [FK_yaf_ForumAccess_yaf_Forum] FOREIGN KEY([ForumID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
GO
ALTER TABLE [dbo].[yaf_ForumAccess] CHECK CONSTRAINT [FK_yaf_ForumAccess_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_ForumAccess]  WITH CHECK ADD  CONSTRAINT [FK_yaf_ForumAccess_yaf_Group] FOREIGN KEY([GroupID])
REFERENCES [dbo].[yaf_Group] ([GroupID])
GO
ALTER TABLE [dbo].[yaf_ForumAccess] CHECK CONSTRAINT [FK_yaf_ForumAccess_yaf_Group]
GO
ALTER TABLE [dbo].[yaf_ForumReadTracking]  WITH CHECK ADD  CONSTRAINT [FK_yaf_ForumReadTracking_yaf_Forum] FOREIGN KEY([ForumID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
GO
ALTER TABLE [dbo].[yaf_ForumReadTracking] CHECK CONSTRAINT [FK_yaf_ForumReadTracking_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_ForumReadTracking]  WITH CHECK ADD  CONSTRAINT [FK_yaf_ForumReadTracking_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_ForumReadTracking] CHECK CONSTRAINT [FK_yaf_ForumReadTracking_yaf_User]
GO
ALTER TABLE [dbo].[yaf_Group]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Group_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_Group] CHECK CONSTRAINT [FK_yaf_Group_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_GroupMedal]  WITH CHECK ADD  CONSTRAINT [FK_yaf_GroupMedal_yaf_Group] FOREIGN KEY([GroupID])
REFERENCES [dbo].[yaf_Group] ([GroupID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_GroupMedal] CHECK CONSTRAINT [FK_yaf_GroupMedal_yaf_Group]
GO
ALTER TABLE [dbo].[yaf_GroupMedal]  WITH CHECK ADD  CONSTRAINT [FK_yaf_GroupMedal_yaf_Medal] FOREIGN KEY([MedalID])
REFERENCES [dbo].[yaf_Medal] ([MedalID])
GO
ALTER TABLE [dbo].[yaf_GroupMedal] CHECK CONSTRAINT [FK_yaf_GroupMedal_yaf_Medal]
GO
ALTER TABLE [dbo].[yaf_Message]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Message_yaf_Message] FOREIGN KEY([ReplyTo])
REFERENCES [dbo].[yaf_Message] ([MessageID])
GO
ALTER TABLE [dbo].[yaf_Message] CHECK CONSTRAINT [FK_yaf_Message_yaf_Message]
GO
ALTER TABLE [dbo].[yaf_Message]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Message_yaf_Topic] FOREIGN KEY([TopicID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_Message] CHECK CONSTRAINT [FK_yaf_Message_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_Message]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Message_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Message] CHECK CONSTRAINT [FK_yaf_Message_yaf_User]
GO
ALTER TABLE [dbo].[yaf_MessageHistory]  WITH CHECK ADD  CONSTRAINT [FK_yaf_MessageHistory_MessageID] FOREIGN KEY([MessageID])
REFERENCES [dbo].[yaf_Message] ([MessageID])
GO
ALTER TABLE [dbo].[yaf_MessageHistory] CHECK CONSTRAINT [FK_yaf_MessageHistory_MessageID]
GO
ALTER TABLE [dbo].[yaf_MessageReportedAudit]  WITH CHECK ADD  CONSTRAINT [FK_yaf_MessageReportedAudit_yaf_MessageReported] FOREIGN KEY([MessageID])
REFERENCES [dbo].[yaf_MessageReported] ([MessageID])
GO
ALTER TABLE [dbo].[yaf_MessageReportedAudit] CHECK CONSTRAINT [FK_yaf_MessageReportedAudit_yaf_MessageReported]
GO
ALTER TABLE [dbo].[yaf_NntpForum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_NntpForum_yaf_Forum] FOREIGN KEY([ForumID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
GO
ALTER TABLE [dbo].[yaf_NntpForum] CHECK CONSTRAINT [FK_yaf_NntpForum_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_NntpForum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_NntpForum_yaf_NntpServer] FOREIGN KEY([NntpServerID])
REFERENCES [dbo].[yaf_NntpServer] ([NntpServerID])
GO
ALTER TABLE [dbo].[yaf_NntpForum] CHECK CONSTRAINT [FK_yaf_NntpForum_yaf_NntpServer]
GO
ALTER TABLE [dbo].[yaf_NntpServer]  WITH CHECK ADD  CONSTRAINT [FK_yaf_NntpServer_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_NntpServer] CHECK CONSTRAINT [FK_yaf_NntpServer_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_NntpTopic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_NntpTopic_yaf_NntpForum] FOREIGN KEY([NntpForumID])
REFERENCES [dbo].[yaf_NntpForum] ([NntpForumID])
GO
ALTER TABLE [dbo].[yaf_NntpTopic] CHECK CONSTRAINT [FK_yaf_NntpTopic_yaf_NntpForum]
GO
ALTER TABLE [dbo].[yaf_NntpTopic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_NntpTopic_yaf_Topic] FOREIGN KEY([TopicID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_NntpTopic] CHECK CONSTRAINT [FK_yaf_NntpTopic_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_PMessage]  WITH CHECK ADD  CONSTRAINT [FK_yaf_PMessage_yaf_User1] FOREIGN KEY([FromUserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_PMessage] CHECK CONSTRAINT [FK_yaf_PMessage_yaf_User1]
GO
ALTER TABLE [dbo].[yaf_Poll]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Poll_yaf_PollGroupCluster] FOREIGN KEY([PollGroupID])
REFERENCES [dbo].[yaf_PollGroupCluster] ([PollGroupID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_Poll] CHECK CONSTRAINT [FK_yaf_Poll_yaf_PollGroupCluster]
GO
ALTER TABLE [dbo].[yaf_PollVote]  WITH CHECK ADD  CONSTRAINT [FK_yaf_PollVote_yaf_Poll] FOREIGN KEY([PollID])
REFERENCES [dbo].[yaf_Poll] ([PollID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_PollVote] CHECK CONSTRAINT [FK_yaf_PollVote_yaf_Poll]
GO
ALTER TABLE [dbo].[yaf_Rank]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Rank_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_Rank] CHECK CONSTRAINT [FK_yaf_Rank_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_Registry]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Registry_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_Registry] CHECK CONSTRAINT [FK_yaf_Registry_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_ReputationVote]  WITH CHECK ADD  CONSTRAINT [FK_yaf_ReputationVote_yaf_User_From] FOREIGN KEY([ReputationFromUserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_ReputationVote] CHECK CONSTRAINT [FK_yaf_ReputationVote_yaf_User_From]
GO
ALTER TABLE [dbo].[yaf_ReputationVote]  WITH CHECK ADD  CONSTRAINT [FK_yaf_ReputationVote_yaf_User_To] FOREIGN KEY([ReputationToUserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_ReputationVote] CHECK CONSTRAINT [FK_yaf_ReputationVote_yaf_User_To]
GO
ALTER TABLE [dbo].[yaf_Smiley]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Smiley_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_Smiley] CHECK CONSTRAINT [FK_yaf_Smiley_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_Thanks]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Thanks_yaf_User] FOREIGN KEY([ThanksFromUserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Thanks] CHECK CONSTRAINT [FK_yaf_Thanks_yaf_User]
GO
ALTER TABLE [dbo].[yaf_Topic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Topic_yaf_Forum] FOREIGN KEY([ForumID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_Topic] CHECK CONSTRAINT [FK_yaf_Topic_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_Topic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Topic_yaf_Message] FOREIGN KEY([LastMessageID])
REFERENCES [dbo].[yaf_Message] ([MessageID])
GO
ALTER TABLE [dbo].[yaf_Topic] CHECK CONSTRAINT [FK_yaf_Topic_yaf_Message]
GO
ALTER TABLE [dbo].[yaf_Topic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Topic_yaf_PollGroupCluster] FOREIGN KEY([PollID])
REFERENCES [dbo].[yaf_PollGroupCluster] ([PollGroupID])
GO
ALTER TABLE [dbo].[yaf_Topic] CHECK CONSTRAINT [FK_yaf_Topic_yaf_PollGroupCluster]
GO
ALTER TABLE [dbo].[yaf_Topic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Topic_yaf_Topic] FOREIGN KEY([TopicMovedID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_Topic] CHECK CONSTRAINT [FK_yaf_Topic_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_Topic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Topic_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Topic] CHECK CONSTRAINT [FK_yaf_Topic_yaf_User]
GO
ALTER TABLE [dbo].[yaf_Topic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_Topic_yaf_User2] FOREIGN KEY([LastUserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_Topic] CHECK CONSTRAINT [FK_yaf_Topic_yaf_User2]
GO
ALTER TABLE [dbo].[yaf_TopicReadTracking]  WITH CHECK ADD  CONSTRAINT [FK_yaf_TopicReadTracking_yaf_Topic] FOREIGN KEY([TopicID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_TopicReadTracking] CHECK CONSTRAINT [FK_yaf_TopicReadTracking_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_TopicReadTracking]  WITH CHECK ADD  CONSTRAINT [FK_yaf_TopicReadTracking_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_TopicReadTracking] CHECK CONSTRAINT [FK_yaf_TopicReadTracking_yaf_User]
GO
ALTER TABLE [dbo].[yaf_User]  WITH CHECK ADD  CONSTRAINT [FK_yaf_User_yaf_Board] FOREIGN KEY([BoardID])
REFERENCES [dbo].[yaf_Board] ([BoardID])
GO
ALTER TABLE [dbo].[yaf_User] CHECK CONSTRAINT [FK_yaf_User_yaf_Board]
GO
ALTER TABLE [dbo].[yaf_User]  WITH CHECK ADD  CONSTRAINT [FK_yaf_User_yaf_Rank] FOREIGN KEY([RankID])
REFERENCES [dbo].[yaf_Rank] ([RankID])
GO
ALTER TABLE [dbo].[yaf_User] CHECK CONSTRAINT [FK_yaf_User_yaf_Rank]
GO
ALTER TABLE [dbo].[yaf_UserAlbumImage]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserAlbumImage_yaf_UserAlbum] FOREIGN KEY([AlbumID])
REFERENCES [dbo].[yaf_UserAlbum] ([AlbumID])
GO
ALTER TABLE [dbo].[yaf_UserAlbumImage] CHECK CONSTRAINT [FK_yaf_UserAlbumImage_yaf_UserAlbum]
GO
ALTER TABLE [dbo].[yaf_UserForum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserForum_yaf_AccessMask] FOREIGN KEY([AccessMaskID])
REFERENCES [dbo].[yaf_AccessMask] ([AccessMaskID])
GO
ALTER TABLE [dbo].[yaf_UserForum] CHECK CONSTRAINT [FK_yaf_UserForum_yaf_AccessMask]
GO
ALTER TABLE [dbo].[yaf_UserForum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserForum_yaf_Forum] FOREIGN KEY([ForumID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
GO
ALTER TABLE [dbo].[yaf_UserForum] CHECK CONSTRAINT [FK_yaf_UserForum_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_UserForum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserForum_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_UserForum] CHECK CONSTRAINT [FK_yaf_UserForum_yaf_User]
GO
ALTER TABLE [dbo].[yaf_UserGroup]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserGroup_yaf_Group] FOREIGN KEY([GroupID])
REFERENCES [dbo].[yaf_Group] ([GroupID])
GO
ALTER TABLE [dbo].[yaf_UserGroup] CHECK CONSTRAINT [FK_yaf_UserGroup_yaf_Group]
GO
ALTER TABLE [dbo].[yaf_UserGroup]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserGroup_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_UserGroup] CHECK CONSTRAINT [FK_yaf_UserGroup_yaf_User]
GO
ALTER TABLE [dbo].[yaf_UserMedal]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserMedal_yaf_Medal] FOREIGN KEY([MedalID])
REFERENCES [dbo].[yaf_Medal] ([MedalID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_UserMedal] CHECK CONSTRAINT [FK_yaf_UserMedal_yaf_Medal]
GO
ALTER TABLE [dbo].[yaf_UserMedal]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserMedal_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_UserMedal] CHECK CONSTRAINT [FK_yaf_UserMedal_yaf_User]
GO
ALTER TABLE [dbo].[yaf_UserPMessage]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserPMessage_yaf_PMessage] FOREIGN KEY([PMessageID])
REFERENCES [dbo].[yaf_PMessage] ([PMessageID])
GO
ALTER TABLE [dbo].[yaf_UserPMessage] CHECK CONSTRAINT [FK_yaf_UserPMessage_yaf_PMessage]
GO
ALTER TABLE [dbo].[yaf_UserPMessage]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserPMessage_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_UserPMessage] CHECK CONSTRAINT [FK_yaf_UserPMessage_yaf_User]
GO
ALTER TABLE [dbo].[yaf_UserProfile]  WITH CHECK ADD  CONSTRAINT [FK_yaf_UserProfile_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[yaf_UserProfile] CHECK CONSTRAINT [FK_yaf_UserProfile_yaf_User]
GO
ALTER TABLE [dbo].[yaf_WatchForum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_WatchForum_yaf_Forum] FOREIGN KEY([ForumID])
REFERENCES [dbo].[yaf_Forum] ([ForumID])
GO
ALTER TABLE [dbo].[yaf_WatchForum] CHECK CONSTRAINT [FK_yaf_WatchForum_yaf_Forum]
GO
ALTER TABLE [dbo].[yaf_WatchForum]  WITH CHECK ADD  CONSTRAINT [FK_yaf_WatchForum_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_WatchForum] CHECK CONSTRAINT [FK_yaf_WatchForum_yaf_User]
GO
ALTER TABLE [dbo].[yaf_WatchTopic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_WatchTopic_yaf_Topic] FOREIGN KEY([TopicID])
REFERENCES [dbo].[yaf_Topic] ([TopicID])
GO
ALTER TABLE [dbo].[yaf_WatchTopic] CHECK CONSTRAINT [FK_yaf_WatchTopic_yaf_Topic]
GO
ALTER TABLE [dbo].[yaf_WatchTopic]  WITH CHECK ADD  CONSTRAINT [FK_yaf_WatchTopic_yaf_User] FOREIGN KEY([UserID])
REFERENCES [dbo].[yaf_User] ([UserID])
GO
ALTER TABLE [dbo].[yaf_WatchTopic] CHECK CONSTRAINT [FK_yaf_WatchTopic_yaf_User]
GO
/****** Object:  StoredProcedure [dbo].[yaf_accessmask_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* End of procedures for "Thanks" Mod */

create procedure [dbo].[yaf_accessmask_delete](@AccessMaskID int) as
begin
        declare @flag int
    
    set @flag=1
    if exists(select 1 from [dbo].[yaf_ForumAccess] where AccessMaskID=@AccessMaskID) or exists(select 1 from [dbo].[yaf_UserForum] where AccessMaskID=@AccessMaskID)
        set @flag=0
    else
        delete from [dbo].[yaf_AccessMask] where AccessMaskID=@AccessMaskID
    
    select @flag
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_accessmask_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_accessmask_list](@BoardID int,@AccessMaskID int=null,@ExcludeFlags int = 0) as
begin
        if @AccessMaskID is null
        select 
            a.* 
        from 
            [dbo].[yaf_AccessMask] a 
        where
            a.BoardID = @BoardID and
            (a.Flags & @ExcludeFlags) = 0
        order by 
            a.SortOrder
    else
        select 
            a.* 
        from 
            [dbo].[yaf_AccessMask] a 
        where
            a.BoardID = @BoardID and
            a.AccessMaskID = @AccessMaskID
        order by 
            a.SortOrder
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_accessmask_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_accessmask_save](
    @AccessMaskID		int=null,
    @BoardID			int,
    @Name				nvarchar(50),
    @ReadAccess			bit,
    @PostAccess			bit,
    @ReplyAccess		bit,
    @PriorityAccess		bit,
    @PollAccess			bit,
    @VoteAccess			bit,
    @ModeratorAccess	bit,
    @EditAccess			bit,
    @DeleteAccess		bit,
    @UploadAccess		bit,
    @DownloadAccess		bit,
    @SortOrder          smallint
) as
begin
        declare @Flags	int
    
    set @Flags = 0
    if @ReadAccess<>0 set @Flags = @Flags | 1
    if @PostAccess<>0 set @Flags = @Flags | 2
    if @ReplyAccess<>0 set @Flags = @Flags | 4
    if @PriorityAccess<>0 set @Flags = @Flags | 8
    if @PollAccess<>0 set @Flags = @Flags | 16
    if @VoteAccess<>0 set @Flags = @Flags | 32
    if @ModeratorAccess<>0 set @Flags = @Flags | 64
    if @EditAccess<>0 set @Flags = @Flags | 128
    if @DeleteAccess<>0 set @Flags = @Flags | 256
    if @UploadAccess<>0 set @Flags = @Flags | 512
    if @DownloadAccess<>0 set @Flags = @Flags | 1024

    if @AccessMaskID is null
        insert into [dbo].[yaf_AccessMask](Name,BoardID,Flags,SortOrder)
        values(@Name,@BoardID,@Flags,@SortOrder)
    else
        update [dbo].[yaf_AccessMask] set
            Name			= @Name,
            Flags			= @Flags,
            SortOrder       = @SortOrder
        where AccessMaskID=@AccessMaskID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_active_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_active_list](@BoardID int,@Guests bit=0,@ShowCrawlers bit=0,@ActiveTime int,@StyledNicks bit=0,@UTCTIMESTAMP datetime) as
begin
    delete from [dbo].[yaf_Active] where DATEDIFF(minute,LastActive,@UTCTIMESTAMP )>@ActiveTime 
    -- we don't delete guest access
    delete from [dbo].[yaf_ActiveAccess] where DATEDIFF(minute,LastActive,@UTCTIMESTAMP )>@ActiveTime AND  IsGuestX = 0
    -- select active	
    if @Guests<>0 
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),				
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 			
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID	
            INNER JOIN [dbo].[yaf_Active] c ON c.UserID = a.UserID
        where
            c.BoardID = @BoardID 	
                
        order by 
            c.LastActive desc
    else if @ShowCrawlers = 1 and @Guests = 0 
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),		
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 	 						
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID	
            INNER JOIN [dbo].[yaf_Active] c ON c.UserID = a.UserID							  
        where
            c.BoardID = @BoardID 
               -- is registered or is crawler 
               and ((c.Flags & 4) = 4 OR (c.Flags & 8) = 8)			  
        order by 
            c.LastActive desc
    else
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 				
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            INNER JOIN [dbo].[yaf_Active] c ON c.UserID = a.UserID							  
        where
            c.BoardID = @BoardID and
            -- no guests
            not exists(				
                select 1 
                    from [dbo].[yaf_UserGroup] x
                        inner join [dbo].[yaf_Group] y ON y.GroupID=x.GroupID 
                    where x.UserID=a.UserID and (y.Flags & 2)<>0
                )
        order by
            c.LastActive desc
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_active_list_user]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_active_list_user](@BoardID int, @UserID int, @Guests bit=0, @ShowCrawlers bit = 0, @ActiveTime int,@StyledNicks bit=0) as
begin
    -- select active
    if @Guests<>0
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            HasForumAccess = CONVERT(int,x.ReadAccess),			
            c.TopicID,
            ForumName = (select [Name] from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = ISNULL((select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 				
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,		
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            inner join [dbo].[yaf_Active] c 
            ON c.UserID = a.UserID
            inner join [dbo].[yaf_ActiveAccess] x  with(nolock)
            ON (x.ForumID = ISNULL(c.ForumID,0))						
        where		
            c.BoardID = @BoardID AND x.UserID = @UserID		
        order by
            c.LastActive desc
        else if @ShowCrawlers = 1 and @Guests = 0 
            select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            HasForumAccess = CONVERT(int,x.ReadAccess),			
            c.TopicID,
            ForumName = (select [Name] from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = ISNULL((select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 					
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            inner join [dbo].[yaf_Active] c 
            ON c.UserID = a.UserID
            inner join [dbo].[yaf_ActiveAccess] x  with(nolock)
            ON (x.ForumID = ISNULL(c.ForumID,0))						
        where		
            c.BoardID = @BoardID AND x.UserID = @UserID	     
            -- is registered or (is crawler and is registered 	
               and ((c.Flags & 4) = 4 OR (c.Flags & 8) = 8)		
        order by
            c.LastActive desc
    else
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            HasForumAccess = CONVERT(int,x.ReadAccess),			
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 					
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            INNER JOIN [dbo].[yaf_Active] c 
            ON c.UserID = a.UserID
            inner join [dbo].[yaf_ActiveAccess] x  with(nolock)
            ON (x.ForumID = ISNULL(c.ForumID,0))
            where		
            c.BoardID = @BoardID  AND x.UserID = @UserID				      
         and
            not exists(
                select 1 
                    from [dbo].[yaf_UserGroup] x
                        inner join [dbo].[yaf_Group] y ON y.GroupID=x.GroupID 
                    where x.UserID=a.UserID and (y.Flags & 2)<>0
                )
        order by
            c.LastActive desc
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_active_listforum]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_active_listforum](@ForumID int, @StyledNicks bit = 0) as
begin
        select
        UserID		= a.UserID,
        UserName	= b.Name,
        UserDisplayName = b.DisplayName,
        IsHidden	= ( b.IsActiveExcluded ),
        IsCrawler	= Convert(int,a.Flags & 8),		
        Style = case(@StyledNicks)
        when 1 then  b.UserStyle
        else ''	 end, 			
        UserCount   = (SELECT COUNT(ac.UserID) from
        [dbo].[yaf_Active] ac with(nolock) where ac.UserID = a.UserID and ac.ForumID = @ForumID),
        Browser = a.Browser
    from
        [dbo].[yaf_Active] a 
        join [dbo].[yaf_User] b on b.UserID=a.UserID
    where
        a.ForumID = @ForumID
    group by
        a.UserID,
        b.DisplayName,
        b.Name,
        b.IsActiveExcluded,
        b.UserID,
        b.UserStyle,
        a.Flags,
        a.Browser
    order by
        b.Name
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_active_listtopic]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_active_listtopic](@TopicID int,@StyledNicks bit = 0) as
begin   
        select
        UserID		= a.UserID,
        UserName	= b.Name,
        UserDisplayName = b.DisplayName,
        IsHidden = ( b.IsActiveExcluded ),		
        IsCrawler	= Convert(int,a.Flags & 8),
        Style = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end, 	
        UserCount   = (SELECT COUNT(ac.UserID) from
        [dbo].[yaf_Active] ac with(nolock) where ac.UserID = a.UserID and ac.TopicID = @TopicID),
        Browser = a.Browser
    from
        [dbo].[yaf_Active] a with(nolock)
        join [dbo].[yaf_User] b on b.UserID=a.UserID		
    where
        a.TopicID = @TopicID
    group by
        a.UserID,
        b.DisplayName,
        b.Name,
        b.IsActiveExcluded,
        b.UserID,
        b.UserStyle,
        a.Flags,
        a.Browser		
    order by
        b.Name
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_active_stats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_active_stats](@BoardID int) as
begin
        select
        ActiveUsers = (select count(1) from [dbo].[yaf_Active] x JOIN [dbo].[yaf_User] usr ON x.UserID = usr.UserID where x.BoardID = @BoardID AND usr.IsActiveExcluded = 0),
        ActiveMembers = (select count(1) from [dbo].[yaf_Active] x JOIN [dbo].[yaf_User] usr ON x.UserID = usr.UserID where x.BoardID = @BoardID and exists(select 1 from [dbo].[yaf_UserGroup] y inner join [dbo].[yaf_Group] z on y.GroupID=z.GroupID where y.UserID=x.UserID and (z.Flags & 2)=0  AND usr.IsActiveExcluded = 0)),
        ActiveGuests = (select count(1) from [dbo].[yaf_Active] x where x.BoardID = @BoardID and exists(select 1 from [dbo].[yaf_UserGroup] y inner join [dbo].[yaf_Group] z on y.GroupID=z.GroupID where y.UserID=x.UserID and (z.Flags & 2)<>0)),
        ActiveHidden = (select count(1) from [dbo].[yaf_Active] x JOIN [dbo].[yaf_User] usr ON x.UserID = usr.UserID where x.BoardID = @BoardID and exists(select 1 from [dbo].[yaf_UserGroup] y inner join [dbo].[yaf_Group] z on y.GroupID=z.GroupID where y.UserID=x.UserID and (z.Flags & 2)=0  AND usr.IsActiveExcluded = 1))
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_active_updatemaxstats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_active_updatemaxstats]
(
    @BoardID int, @UTCTIMESTAMP datetime
)
AS
BEGIN
        DECLARE @count int, @max int, @maxStr nvarchar(255), @countStr nvarchar(255), @dtStr nvarchar(255)
    
    SET @count = ISNULL((SELECT COUNT(DISTINCT IP + '.' + CAST(UserID as varchar(10))) FROM [dbo].[yaf_Active] WITH (NOLOCK) WHERE BoardID = @BoardID),0)
    SET @maxStr = (SELECT ISNULL([dbo].[yaf_registry_value](N'maxusers', @BoardID), '1'))
    SET @max = CAST(@maxStr AS int)
    SET @countStr = CAST(@count AS nvarchar)
    SET @dtStr = CONVERT(nvarchar,@UTCTIMESTAMP,126)

    IF NOT EXISTS ( SELECT 1 FROM [dbo].[yaf_Registry] WHERE BoardID = @BoardID and [Name] = N'maxusers')
    BEGIN 
        INSERT INTO [dbo].[yaf_Registry](BoardID,[Name],[Value]) VALUES (@BoardID,N'maxusers',CAST(@countStr AS ntext))
        INSERT INTO [dbo].[yaf_Registry](BoardID,[Name],[Value]) VALUES (@BoardID,N'maxuserswhen',CAST(@dtStr AS ntext))
    END
    ELSE IF (@count > @max)	
    BEGIN
        UPDATE [dbo].[yaf_Registry] SET [Value] = CAST(@countStr AS ntext) WHERE BoardID = @BoardID AND [Name] = N'maxusers'
        UPDATE [dbo].[yaf_Registry] SET [Value] = CAST(@dtStr AS ntext) WHERE BoardID = @BoardID AND [Name] = N'maxuserswhen'
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_admin_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_admin_list](@BoardID int = null, @StyledNicks bit = null,@UTCTIMESTAMP datetime) as
begin
         select 
        a.UserID,
        a.BoardID,
        b.Name AS BoardName,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],
            a.NumPosts,
            CultureUser = a.Culture,			
            r.RankID,						
            RankName = r.Name,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 
            NumDays = datediff(d,a.Joined,@UTCTIMESTAMP )+1,
            NumPostsForum = (select count(1) from [dbo].[yaf_Message] x where x.IsApproved = 1 and x.IsDeleted = 0),
            HasAvatarImage = (select count(1) from [dbo].[yaf_User] x where x.UserID=a.UserID and AvatarImage is not null),
            IsAdmin	= IsNull(c.IsAdmin,0),			
            IsHostAdmin	= IsNull(a.Flags & 1,0)
        from 
            [dbo].[yaf_User] a
            JOIN
            [dbo].[yaf_Board] b	
            ON b.BoardID = a.BoardID			
            JOIN
            [dbo].[yaf_Rank] r	
            ON r.RankID = a.RankID		
            left join [dbo].[yaf_vaccess] c on c.UserID=a.UserID
        where 			
            (@BoardID IS NULL OR a.BoardID = @BoardID) and
            -- is not guest 
            IsNull(a.Flags & 4,0) = 0 and
            c.ForumID = 0 and
            -- is admin 
            (IsNull(c.IsAdmin,0) <> 0) 
        order by 
            a.DisplayName
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_admin_pageaccesslist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_admin_pageaccesslist](@BoardID int = null, @StyledNicks bit = null,@UTCTIMESTAMP datetime) as
begin
         select 
        a.UserID,
        a.BoardID,
        b.Name AS BoardName,
        a.[Name],
        a.[DisplayName],
        a.[Culture],
            a.NumPosts,
            CultureUser = a.Culture,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end
        from 
            [dbo].[yaf_User] a
            JOIN
            [dbo].[yaf_Board] b	
            ON b.BoardID = a.BoardID			
            left join [dbo].[yaf_vaccess] c 
            on c.UserID=a.UserID
        where 			
            (@BoardID IS NULL OR a.BoardID = @BoardID) and
            -- is admin 
            (IsNull(c.IsAdmin,0) <> 0) and
            c.ForumID = 0 and 			
            -- is not host admin 
            IsNull(a.Flags & 1,0) = 0 
        order by 
            a.DisplayName
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_adminpageaccess_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_adminpageaccess_delete] (@UserID int, @PageName nvarchar(128)) as
begin
        delete from [dbo].[yaf_AdminPageUserAccess]  where UserID = @UserID AND (@PageName IS NULL OR PageName = @PageName);
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_adminpageaccess_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_adminpageaccess_list] (@UserID int, @PageName nvarchar(128) = null) as
begin
        if (@UserID > 0  and @PageName IS NOT NULL) 
        select ap.*, 
        u.Name as UserName, 
        u.DisplayName as UserDisplayName, 
        b.Name as BoardName
        from [dbo].[yaf_AdminPageUserAccess] ap 
        JOIN  [dbo].[yaf_User] u on ap.UserID = u.UserID 
        JOIN [dbo].[yaf_Board] b ON b.BoardID = u.BoardID 
        where u.UserID = @UserID and PageName = @PageName and (u.Flags & 1) <> 1 order by  b.BoardID,u.Name,ap.PageName;
        else if (@UserID > 0 and @PageName IS  NULL) 
        select ap.*, 
        u.Name as UserName, 
        u.DisplayName as UserDisplayName, 
        b.Name as BoardName,
        1 as ReadAccess  
         from [dbo].[yaf_AdminPageUserAccess] ap 
        JOIN  [dbo].[yaf_User] u on ap.UserID = u.UserID 
        JOIN [dbo].[yaf_Board] b ON b.BoardID = u.BoardID 
        where u.UserID = @UserID and (u.Flags & 1) <> 1 order by  b.BoardID,u.Name,ap.PageName;
        else
        select ap.*, 
        u.Name as UserName, 
        u.DisplayName as UserDisplayName, 
        b.Name as BoardName
        from [dbo].[yaf_AdminPageUserAccess] ap 
        JOIN  [dbo].[yaf_User] u on ap.UserID = u.UserID 
        JOIN [dbo].[yaf_Board] b ON b.BoardID = u.BoardID 
        where (u.Flags & 1) <> 1
        order by  b.BoardID,u.Name,ap.PageName;
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_adminpageaccess_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_adminpageaccess_save] (@UserID int, @PageName nvarchar(128)) as
begin
    if not exists (select 1 from [dbo].[yaf_AdminPageUserAccess] where UserID = @UserID and PageName = @PageName) 
        begin
        insert into [dbo].[yaf_AdminPageUserAccess]  (UserID,PageName) 
        values(@UserID,@PageName)
    end	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_album_delete] ( @AlbumID int )
as 
    BEGIN
        DELETE  FROM [dbo].[yaf_UserAlbumImage]
        WHERE   AlbumID = @AlbumID
        DELETE  FROM [dbo].[yaf_UserAlbum]
        WHERE   AlbumID = @AlbumID       
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_getstats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_album_getstats]
    @UserID INT = NULL,
    @AlbumID INT = NULL,
    @AlbumNumber INT = NULL OUTPUT,
    @ImageNumber BIGINT = NULL OUTPUT
as 
    BEGIN
        IF @AlbumID IS NOT NULL 
            SET @ImageNumber = ( SELECT COUNT(ImageID)
                                 FROM   [dbo].[yaf_UserAlbumImage]
                                 WHERE  AlbumID = @AlbumID
                               )
        ELSE 
            BEGIN
                SET @AlbumNumber = ( SELECT COUNT(AlbumID)
                                     FROM   [dbo].[yaf_UserAlbum]
                                     WHERE  UserID = @UserID
                                   )
                SET @ImageNumber = ( SELECT COUNT(ImageID)
                                     FROM   [dbo].[yaf_UserAlbumImage]
                                     WHERE  AlbumID in (
                                            SELECT  AlbumID
                                            FROM    [dbo].[yaf_UserAlbum]
                                            WHERE   UserID = @UserID )
                                   )
            END
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_gettitle]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_album_gettitle]
    (
      @AlbumID INT,
      @paramOutput NVARCHAR(255) = NULL OUT
    )
as 
    BEGIN
        SET @paramOutput = ( SELECT [Title]
                             FROM   [dbo].[yaf_UserAlbum]
                             WHERE  ( AlbumID = @AlbumID )
                           )
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_image_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_album_image_delete] ( @ImageID INT )
as 
    BEGIN
        DELETE  FROM [dbo].[yaf_UserAlbumImage]
        WHERE   ImageID = @ImageID
        UPDATE  [dbo].[yaf_UserAlbum]
        SET     CoverImageID = NULL
        WHERE   CoverImageID = @ImageID
        UPDATE  [dbo].[yaf_UserAlbum]
        SET     CoverImageID = NULL
        WHERE   CoverImageID = @ImageID
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_image_download]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_album_image_download] ( @ImageID INT )
as 
    BEGIN
        UPDATE  [dbo].[yaf_UserAlbumImage]
        SET     Downloads = Downloads + 1
        WHERE   ImageID = @ImageID
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_image_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_album_image_list]
    (
      @AlbumID INT = NULL,
      @ImageID INT = null
    )
as 
    BEGIN
        IF @AlbumID IS NOT null 
            SELECT  *
            FROM    [dbo].[yaf_UserAlbumImage]
            WHERE   AlbumID = @AlbumID
            ORDER BY Uploaded DESC
        ELSE 
            SELECT  a.*,
                    b.UserID
            FROM    [dbo].[yaf_UserAlbumImage] a
                    INNER JOIN [dbo].[yaf_UserAlbum] b ON b.AlbumID = a.AlbumID
            WHERE   ImageID = @ImageID
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_image_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_album_image_save]
    (
      @ImageID INT = NULL,
      @AlbumID INT = null,
      @Caption NVARCHAR(255) = null,
      @FileName NVARCHAR(255) = null,
      @Bytes INT = null,
      @ContentType NVARCHAR(50) = null,
      @UTCTIMESTAMP datetime
    )
as 
    BEGIN
        IF @ImageID is not null 
            UPDATE  [dbo].[yaf_UserAlbumImage]
            SET     Caption = @Caption
            WHERE   ImageID = @ImageID
        ELSE
            INSERT  INTO [dbo].[yaf_UserAlbumImage]
                    (
                      AlbumID,
                      Caption,
                      [FileName],
                      Bytes,
                      ContentType,
                      Uploaded,
                      Downloads
                    )
            VALUES  (
                      @AlbumID,
                      @Caption,
                      @FileName,
                      @Bytes,
                      @ContentType,
                      @UTCTIMESTAMP ,
                      0
                    )
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_images_by_user]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_album_images_by_user](@UserID INT = null)
as 
    BEGIN
        SELECT      a.*
        FROM    [dbo].[yaf_UserAlbumImage] a
                    INNER JOIN [dbo].[yaf_UserAlbum] b ON b.AlbumID = a.AlbumID
        WHERE  b.UserID = @UserID
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_album_list]
    (
      @UserID INT = NULL,
      @AlbumID INT = NULL
    )
as 
    BEGIN
        IF @UserID IS NOT null 
            select  *
            FROM    [dbo].[yaf_UserAlbum]
            WHERE   UserID = @UserID
            ORDER BY Updated DESC
        ELSE 
            SELECT  *
            FROM    [dbo].[yaf_UserAlbum]
            WHERE   AlbumID = @AlbumID
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_album_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_album_save]
    (
      @AlbumID INT = NULL,
      @UserID INT = null,
      @Title NVARCHAR(255) = NULL,
      @CoverImageID INT = NULL,
      @UTCTIMESTAMP datetime
    )
as 
    BEGIN
        -- Update Cover?
        IF ( @CoverImageID IS NOT NULL
             AND @CoverImageID <> 0
           ) 
            UPDATE  [dbo].[yaf_UserAlbum]
            SET     CoverImageID = @CoverImageID
            WHERE   AlbumID = @AlbumID
        ELSE 
            --Remove Cover?
            IF ( @CoverImageID = 0 ) 
                UPDATE  [dbo].[yaf_UserAlbum]
                SET     CoverImageID = NULL
                WHERE   AlbumID = @AlbumID            
            ELSE 
            -- Update Title?
                IF @AlbumID is not null 
                    UPDATE  [dbo].[yaf_UserAlbum]
                    SET     Title = @Title
                    WHERE   AlbumID = @AlbumID
                ELSE 
                    BEGIN
                    -- New album. insert into table.
                        INSERT  INTO [dbo].[yaf_UserAlbum]
                                (
                                  UserID,
                                  Title,
                                  CoverImageID,
                                  Updated
                                )
                        VALUES  (
                                  @UserID,
                                  @Title,
                                  @CoverImageID,
                                  @UTCTIMESTAMP 
                                )
                        RETURN SCOPE_IDENTITY()
                    END
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_announcements_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_announcements_list]
(
    @ForumID int,
    @UserID int = null,
    @Date datetime=null,
    @ToDate datetime=null,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,
    @ShowMoved  bit = 0,
    @FindLastRead bit = 0
)
AS
begin
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   
   -- find total returned count
   select  @TotalRows = COUNT(c.TopicID)
   FROM [dbo].[yaf_Topic] c 
   WHERE c.ForumID = @ForumID
   AND	c.[Priority] = 2
   AND	c.IsDeleted = 0
    AND	(c.TopicMovedID IS NOT NULL OR c.NumPosts > 0) 
    AND
    (@ShowMoved = 1 or (@ShowMoved <> 1 AND  c.TopicMovedID IS NULL))
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by tt.[Priority] desc,tt.LastPosted desc) as RowNum, tt.TopicID
     from  [dbo].[yaf_Topic] tt
     where tt.ForumID = @ForumID and tt.[Priority] = 2
      AND	tt.IsDeleted = 0
      AND	((tt.TopicMovedID IS NOT NULL) OR (tt.NumPosts > 0))
      AND
      (@ShowMoved = 1 or (@ShowMoved <> 1 AND  TopicMovedID IS NULL))
      )	  
      select
            c.ForumID,
            c.TopicID,
            c.Posted,
            LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
            c.TopicMovedID,
            FavoriteCount = (SELECT COUNT(1) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
            [Subject] = c.Topic,
            c.[Description],
            c.[Status],
            c.[Styles],
            c.UserID,
            Starter = IsNull(c.UserName,b.Name),
            StarterDisplay = IsNull(c.UserDisplayName,b.DisplayName),
            Replies = c.NumPosts - 1,
            NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@UserID IS NOT NULL AND mes.UserID = @UserID) OR (@UserID IS NULL)) ),			
            [Views] = c.[Views],
            LastPosted = c.LastPosted,
            LastUserID = c.LastUserID,
            LastUserName = IsNull(c.LastUserName,(SELECT x.Name FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastUserDisplayName = IsNull(c.LastUserDisplayName,(SELECT x.DisplayName FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastMessageID = c.LastMessageID,
            LastTopicID = c.TopicID,
            LinkDate = c.LinkDate,
            TopicFlags = c.Flags,
            c.Priority,
            c.PollID,
            ForumFlags = d.Flags,
            FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
            StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
            LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = c.LastUserID)
            else ''	 end,
            LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=c.ForumID AND x.UserID = @UserID)
             else ''	 end,
            LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @UserID)
             else ''	 end,         
             c.TopicImage,           
             0 as HasAttachments,           
            PageIndex = @PageIndex,   	
            @TotalRows as TotalRows			       
            from
            TopicIds ti
            inner join [dbo].[yaf_Topic] c	
            ON c.TopicID = ti.TopicID
            JOIN [dbo].[yaf_User] b 
            ON b.UserID=c.UserID
            join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
            WHERE ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC 
    
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_attachment_download]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_attachment_download](@AttachmentID int) as
begin
        update [dbo].[yaf_Attachment] set Downloads=Downloads+1 where AttachmentID=@AttachmentID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_attachment_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_attachment_list](@MessageID int=null,@UserID int=null,@AttachmentID int=null,@BoardID int=null,@PageIndex int = null, @PageSize int = 0) as begin
declare @TotalRows int
declare @FirstSelectRowNumber int
declare @FirstSelectRowID int		
   if @MessageID is not null
        select 
            a.*,
            e.BoardID
        from
            [dbo].[yaf_Attachment] a
            inner join [dbo].[yaf_Message] b on b.MessageID = a.MessageID
            inner join [dbo].[yaf_Topic] c on c.TopicID = b.TopicID
            inner join [dbo].[yaf_Forum] d on d.ForumID = c.ForumID
            inner join [dbo].[yaf_Category] e on e.CategoryID = d.CategoryID
            inner join [dbo].[yaf_Board] brd on brd.BoardID = e.BoardID
        where
            a.MessageID=@MessageID
    else if @AttachmentID is not null
        select 
            a.*
        from
            [dbo].[yaf_Attachment] a
        where 
            a.AttachmentID=@AttachmentID
    else if @UserID is not null
        begin
           set @PageIndex = @PageIndex + 1
           set @TotalRows = 0
           
           select 
               @TotalRows = count(1) 
           from 
               [dbo].[yaf_Attachment]
           where
               UserID = @UserID
		   		
           select top (@PageSize)
               *
                   from
                   (
				       select 
					       *,
					       TotalRows = @TotalRows ,
					       ROW_NUMBER() over (order by AttachmentID desc) as RowNum
				       from 
					       [dbo].[yaf_Attachment] a
				       where 
					       UserID=@UserID
                   ) as Attachments
           where
               RowNum > ((@PageIndex -1) * @PageSize)
           order by 
               AttachmentID desc
        end
    else
        begin
           set @PageIndex = @PageIndex + 1
           set @TotalRows = 0
           
           select @TotalRows = count(1) from [dbo].[yaf_Attachment] a
		                                     inner join [dbo].[yaf_Message] b on b.MessageID = a.MessageID
		                                     inner join [dbo].[yaf_Topic] c on c.TopicID = b.TopicID
		                                     inner join [dbo].[yaf_Forum] d on d.ForumID = c.ForumID
		                                     inner join [dbo].[yaf_Category] e on e.CategoryID = d.CategoryID			
									    where
		                                     e.BoardID = @BoardID
		   		
           select top (@PageSize)
               *
                   from
                   (
				       select 
					       a.*,
					       BoardID		= @BoardID,
					       Posted		= b.Posted,
					       ForumID		= d.ForumID,
					       ForumName	= d.Name,
					       TopicID		= c.TopicID,
					       TopicName	= c.Topic,
					       TotalRows  = @TotalRows,
					       ROW_NUMBER() over (order by AttachmentID desc) as RowNum
				       from 
					       [dbo].[yaf_Attachment] a
					       inner join [dbo].[yaf_Message] b on b.MessageID = a.MessageID
					       inner join [dbo].[yaf_Topic] c on c.TopicID = b.TopicID
					       inner join [dbo].[yaf_Forum] d on d.ForumID = c.ForumID
					       inner join [dbo].[yaf_Category] e on e.CategoryID = d.CategoryID			
				       where 
					       e.BoardID=BoardID
                   ) as Attachments
           where
               RowNum > ((@PageIndex -1) * @PageSize)
           order by 
               AttachmentID desc
        end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedemail_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedemail_delete](@ID int) as
begin
        delete from [dbo].[yaf_BannedEmail] where ID = @ID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedemail_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedemail_list](@BoardID int, @Mask varchar(255) = null,@ID int=null,@PageIndex int=null, @PageSize int=null) as
begin
  declare @TotalRows int
  declare @FirstSelectRowNumber int
  declare @LastSelectRowNumber int

  if @ID is not null
      begin
          select * from [dbo].[yaf_BannedEmail] where ID=@ID and BoardID=@BoardID
	  end
  else if @Mask is not null
      begin
	       set @PageIndex = @PageIndex + 1;
           set @FirstSelectRowNumber = 0;  
           set @LastSelectRowNumber = 0;  
           set @TotalRows = 0;
           
           select @TotalRows = count(1) from [dbo].[yaf_BannedEmail] where Mask like '%' +@Mask + '%' and BoardID=@BoardID;
           select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
           select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
           with BannedEmails  as 
           (
             select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
             from  [dbo].[yaf_BannedEmail] where Mask like '%' +@Mask + '%' and BoardID=@BoardID
           )
           select
            a.*,
            @TotalRows as TotalRows
            from
            BannedEmails c
            inner join [dbo].[yaf_BannedEmail] a	
            on 	c.Mask = a.Mask	
            where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
            order by c.RowNum asc
	  end
  else
      begin
           set @PageIndex = @PageIndex + 1;
           set @FirstSelectRowNumber = 0;  
           set @LastSelectRowNumber = 0;  
           set @TotalRows = 0;
           
           select @TotalRows = count(1) from [dbo].[yaf_BannedEmail] where BoardID=@BoardID;
           select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
           select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
           with BannedEmails  as 
           (
             select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
             from  [dbo].[yaf_BannedEmail] where BoardID=@BoardID
           )
           select
            a.*,
            @TotalRows as TotalRows
            from
            BannedEmails c
            inner join [dbo].[yaf_BannedEmail] a	
            on 	c.Mask = a.Mask	
            where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
            order by c.RowNum asc
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedemail_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedemail_save](@ID int=null,@BoardID int,@Mask varchar(255), @Reason nvarchar(128), @UTCTIMESTAMP datetime) as
begin
    if (@ID is null or @ID = 0 ) 
    begin
        declare @ExistsRow int
        select @ExistsRow = count(1) from [dbo].[yaf_BannedEmail] where BoardID=@BoardID and Mask=@Mask;
        if (@ExistsRow  is null or @ExistsRow = 0)
        begin
            insert into [dbo].[yaf_BannedEmail](BoardID,Mask,Since,Reason) values(@BoardID,@Mask,@UTCTIMESTAMP,@Reason)
        end
    end
    else begin
        update [dbo].[yaf_BannedEmail] set Mask = @Mask,Reason = @Reason where ID = @ID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedip_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedip_delete](@ID int) as
begin
        delete from [dbo].[yaf_BannedIP] where ID = @ID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedip_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedip_list](@BoardID int, @Mask varchar(57) = null,@ID int=null,@PageIndex int=null, @PageSize int=null) as
    begin
	    declare @TotalRows int
	    declare @FirstSelectRowNumber int
	    declare @LastSelectRowNumber int
        
		if @ID is not null
            begin
			    select * from [dbo].[yaf_BannedIP] where ID=@ID and BoardID=@BoardID
			end
		else if @Mask is not null
		    begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedName] where Mask like '%' +@Mask + '%' and BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedIPs  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedIP] where Mask like '%' +@Mask + '%' and BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedIPs c
                 inner join [dbo].[yaf_BannedIP] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
	        end
		else
		    begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedIP] where BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedIPs  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedIP] where BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedIPs c
                 inner join [dbo].[yaf_BannedIP] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
	        end       
    end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedip_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedip_save](@ID int=null,@BoardID int,@Mask varchar(57), @Reason nvarchar(128), @UserID int, @UTCTIMESTAMP datetime) as
begin
    if (@ID is null or @ID = 0 ) 
    begin
        declare @IPExistsRow int
        select @IPExistsRow = count(1) from [dbo].[yaf_BannedIP] where BoardID=@BoardID and Mask=@Mask;
        if (@IPExistsRow  is null or @IPExistsRow = 0)
        begin
            insert into [dbo].[yaf_BannedIP](BoardID,Mask,Since,Reason,UserID) values(@BoardID,@Mask,@UTCTIMESTAMP,@Reason,@UserID)
        end
    end
    else begin
        update [dbo].[yaf_BannedIP] set Mask = @Mask,Reason = @Reason, UserID = @UserID where ID = @ID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedname_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedname_delete](@ID int) as
begin
        delete from [dbo].[yaf_BannedName] where ID = @ID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedname_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedname_list](@BoardID int, @Mask varchar(255) = null, @ID int=null,@PageIndex int=null, @PageSize int=null) as
    begin
        declare @TotalRows int
        declare @FirstSelectRowNumber int
        declare @LastSelectRowNumber int
  
        if @ID is not null
            begin
	            select * from [dbo].[yaf_BannedName] where ID=@ID and BoardID=@BoardID
            end       
        else if @Mask is not null
            begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedName] where Mask like '%' +@Mask + '%' and BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedNames  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedName] where Mask like '%' +@Mask + '%' and BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedNames c
                 inner join [dbo].[yaf_BannedName] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
            end
        else
            begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedName] where BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedNames  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedName] where BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedNames c
                 inner join [dbo].[yaf_BannedName] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
            end
    end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bannedname_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_bannedname_save](@ID int=null,@BoardID int,@Mask varchar(255), @Reason nvarchar(128), @UTCTIMESTAMP datetime) as
begin
    if (@ID is null or @ID = 0 ) 
    begin
        declare @ExistsRow int
        select @ExistsRow = count(1) from [dbo].[yaf_BannedName] where BoardID=@BoardID and Mask=@Mask;
        if (@ExistsRow  is null or @ExistsRow = 0)
        begin
            insert into [dbo].[yaf_BannedName](BoardID,Mask,Since,Reason) values(@BoardID,@Mask,@UTCTIMESTAMP,@Reason)
        end
    end
    else begin
        update [dbo].[yaf_BannedName] set Mask = @Mask,Reason = @Reason where ID = @ID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_bbcode_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- BBCode

CREATE PROCEDURE [dbo].[yaf_bbcode_delete]
(
    @BBCodeID int = NULL
)
AS
BEGIN
        
    IF @BBCodeID IS NOT NULL
        DELETE FROM [dbo].[yaf_BBCode] WHERE BBCodeID = @BBCodeID
    ELSE
        DELETE FROM [dbo].[yaf_BBCode]
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_bbcode_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_bbcode_list]
(
    @BoardID int,
    @BBCodeID int = null
)
AS
BEGIN
        
    IF @BBCodeID IS NULL
        SELECT * FROM [dbo].[yaf_BBCode] WHERE BoardID = @BoardID ORDER BY ExecOrder, [Name] DESC
    ELSE
        SELECT * FROM [dbo].[yaf_BBCode] WHERE BBCodeID = @BBCodeID ORDER BY ExecOrder
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_bbcode_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_bbcode_save]
(
    @BBCodeID int = null,
    @BoardID int,
    @Name nvarchar(255),
    @Description nvarchar(4000) = null,
    @OnClickJS nvarchar(1000) = null,
    @DisplayJS ntext = null,
    @EditJS ntext = null,
    @DisplayCSS ntext = null,
    @SearchRegEx ntext,
    @ReplaceRegEx ntext,
    @Variables nvarchar(1000) = null,
    @UseModule bit = null,
    @ModuleClass nvarchar(255) = null,	
    @ExecOrder int = 1
)
AS
BEGIN
        
    IF @BBCodeID IS NOT NULL BEGIN
        UPDATE
            [dbo].[yaf_BBCode]
        SET
            [Name] = @Name,
            [Description] = @Description,
            [OnClickJS] = @OnClickJS,
            [DisplayJS] = @DisplayJS,
            [EditJS] = @EditJS,
            [DisplayCSS] = @DisplayCSS,
            [SearchRegex] = @SearchRegEx,
            [ReplaceRegex] = @ReplaceRegEx,
            [Variables] = @Variables,
            [UseModule] = @UseModule,
            [ModuleClass] = @ModuleClass,			
            [ExecOrder] = @ExecOrder
        WHERE
            BBCodeID = @BBCodeID
    END
    ELSE BEGIN
        IF NOT EXISTS(SELECT 1 FROM [dbo].[yaf_BBCode] WHERE BoardID = @BoardID AND [Name] = @Name)
            INSERT INTO
                [dbo].[yaf_BBCode] ([BoardID],[Name],[Description],[OnClickJS],[DisplayJS],[EditJS],[DisplayCSS],[SearchRegex],[ReplaceRegex],[Variables],[UseModule],[ModuleClass],[ExecOrder])
            VALUES (@BoardID,@Name,@Description,@OnClickJS,@DisplayJS,@EditJS,@DisplayCSS,@SearchRegEx,@ReplaceRegEx,@Variables,@UseModule,@ModuleClass,@ExecOrder)
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_create]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_board_create](
    @BoardName 		nvarchar(50),
    @Culture varchar(10),
    @LanguageFile 	nvarchar(50),
    @MembershipAppName nvarchar(50),
    @RolesAppName nvarchar(50),
    @UserName		nvarchar(255),
    @UserEmail		nvarchar(255),
    @UserKey		nvarchar(64),
    @IsHostAdmin	bit,
    @RolePrefix     nvarchar(255),
    @UTCTIMESTAMP datetime
) as 
begin
    declare @BoardID				int
    declare @TimeZone				int
    declare @ForumEmail				nvarchar(50)
    declare	@GroupIDAdmin			int
    declare	@GroupIDGuest			int
    declare @GroupIDMember			int
    declare	@AccessMaskIDAdmin		int
    declare @AccessMaskIDModerator	int
    declare @AccessMaskIDMember		int
    declare	@AccessMaskIDReadOnly	int
    declare @UserIDAdmin			int
    declare @UserIDGuest			int
    declare @RankIDAdmin			int
    declare @RankIDGuest			int
    declare @RankIDNewbie			int
    declare @RankIDMember			int
    declare @RankIDAdvanced			int
    declare	@CategoryID				int
    declare	@ForumID				int
    declare @UserFlags				int

    -- Board
    INSERT INTO [dbo].[yaf_Board](Name, AllowThreaded, MembershipAppName, RolesAppName ) values(@BoardName,0, @MembershipAppName, @RolesAppName)
    SET @BoardID = SCOPE_IDENTITY()

    SET @TimeZone = (SELECT ISNULL(CAST([dbo].[yaf_registry_value](N'TimeZone', @BoardID) as int), 0))
    SET @ForumEmail = (SELECT [dbo].[yaf_registry_value](N'ForumEmail', @BoardID))
    
    EXEC [dbo].[yaf_registry_save] 'culture',@Culture,@BoardID
    EXEC [dbo].[yaf_registry_save] 'language',@LanguageFile,@BoardID
    
    -- Rank
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,Style,SortOrder) VALUES (@BoardID,'Administration',0,null,2147483647,'default!font-size: 8pt; color: #811334/yafpro!font-size: 8pt; color:blue',0)
    SET @RankIDAdmin = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Guest',0,null,0,100)
    SET @RankIDGuest = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Newbie',3,0,10,3)
    SET @RankIDNewbie = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Member',2,10,30,2)
    SET @RankIDMember = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Advanced Member',2,30,100,1)
    SET @RankIDAdvanced = SCOPE_IDENTITY()

    -- AccessMask
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Admin Access',1023 + 1024,4)
    SET @AccessMaskIDAdmin = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Moderator Access',487 + 1024,3)
    SET @AccessMaskIDModerator = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Member Access',423 + 1024,2)
    SET @AccessMaskIDMember = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Read Only Access',1,1)
    SET @AccessMaskIDReadOnly = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'No Access',0,0)

    -- Group
    INSERT INTO [dbo].[yaf_Group](BoardID,Name,Flags,PMLimit,Style,SortOrder,UsrSigChars,UsrSigBBCodes,UsrAlbums,UsrAlbumImages) values(@BoardID, ISNULL(@RolePrefix,'') + 'Administrators',1,2147483647,'default!font-size: 8pt; color: red/yafpro!font-size: 8pt; color:blue',0,256,'URL,IMG,SPOILER,QUOTE',10,120)
    set @GroupIDAdmin = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Group](BoardID,Name,Flags,PMLimit,Style,SortOrder,UsrSigChars,UsrSigBBCodes,UsrAlbums,UsrAlbumImages) values(@BoardID,'Guests',2,0,'default!font-size: 8pt; font-style: italic; font-weight: bold; color: #0c7333/yafpro!font-size: 8pt; color: #6e1987',1,0,null,0,0)
    SET @GroupIDGuest = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Group](BoardID,Name,Flags,PMLimit,SortOrder,UsrSigChars,UsrSigBBCodes,UsrAlbums,UsrAlbumImages) values(@BoardID,ISNULL(@RolePrefix,'') + 'Registered',4,100,1,128,'URL,IMG,SPOILER,QUOTE',5,30)
    SET @GroupIDMember = SCOPE_IDENTITY()	
    
    -- User (GUEST)
    INSERT INTO [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName,[Password],Joined,LastVisit,NumPosts,TimeZone,Email,Flags)
    VALUES(@BoardID,@RankIDGuest,'Guest','Guest','na',@UTCTIMESTAMP ,@UTCTIMESTAMP ,0,@TimeZone,@ForumEmail,6)
    SET @UserIDGuest = SCOPE_IDENTITY()	
    
    SET @UserFlags = 2
    if @IsHostAdmin<>0 SET @UserFlags = 3
    
    -- User (ADMIN)
    INSERT INTO [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName, [Password], Email,ProviderUserKey, Joined,LastVisit,NumPosts,TimeZone,Flags)
    VALUES(@BoardID,@RankIDAdmin,@UserName,@UserName,'na',@UserEmail,@UserKey,@UTCTIMESTAMP ,@UTCTIMESTAMP ,0,@TimeZone,@UserFlags)
    SET @UserIDAdmin = SCOPE_IDENTITY()

    -- UserGroup
    INSERT INTO [dbo].[yaf_UserGroup](UserID,GroupID) VALUES(@UserIDAdmin,@GroupIDAdmin)
    INSERT INTO [dbo].[yaf_UserGroup](UserID,GroupID) VALUES(@UserIDGuest,@GroupIDGuest)

    -- Category
    INSERT INTO [dbo].[yaf_Category](BoardID,Name,SortOrder) VALUES(@BoardID,'Test Category',1)
    set @CategoryID = SCOPE_IDENTITY()
    
    -- Forum
    INSERT INTO [dbo].[yaf_Forum](CategoryID,Name,Description,SortOrder,NumTopics,NumPosts,Flags)
    VALUES(@CategoryID,'Test Forum','A test forum',1,0,0,4)
    set @ForumID = SCOPE_IDENTITY()

    -- ForumAccess
    INSERT INTO [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) VALUES(@GroupIDAdmin,@ForumID,@AccessMaskIDAdmin)
    INSERT INTO [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) VALUES(@GroupIDGuest,@ForumID,@AccessMaskIDReadOnly)
    INSERT INTO [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) VALUES(@GroupIDMember,@ForumID,@AccessMaskIDMember)

    SELECT @BoardID;
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_board_delete](@BoardID int) as
begin
        declare @tmpForumID int;
    declare forum_cursor cursor for
        select ForumID 
        from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on a.CategoryID=b.CategoryID
        where b.BoardID=@BoardID
        order by ForumID desc
    
    open forum_cursor
    fetch next from forum_cursor into @tmpForumID
    while @@FETCH_STATUS = 0
    begin
        exec [dbo].[yaf_forum_delete] @tmpForumID;
        fetch next from forum_cursor into @tmpForumID
    end
    close forum_cursor
    deallocate forum_cursor

    delete from [dbo].[yaf_ForumAccess] where exists(select 1 from [dbo].[yaf_Group] x where x.GroupID=[dbo].[yaf_ForumAccess].GroupID and x.BoardID=@BoardID)
    delete from [dbo].[yaf_Forum] where exists(select 1 from [dbo].[yaf_Category] x where x.CategoryID=[dbo].[yaf_Forum].CategoryID and x.BoardID=@BoardID)
    delete from [dbo].[yaf_UserGroup] where exists(select 1 from [dbo].[yaf_User] x where x.UserID=[dbo].[yaf_UserGroup].UserID and x.BoardID=@BoardID)
    delete from [dbo].[yaf_Category] where BoardID=@BoardID
    delete from [dbo].[yaf_ActiveAccess] where BoardID=@BoardID
    delete from [dbo].[yaf_Active] where BoardID=@BoardID
    delete from [dbo].[yaf_User] where BoardID=@BoardID
    delete from [dbo].[yaf_Rank] where BoardID=@BoardID
    delete from [dbo].[yaf_Group] where BoardID=@BoardID
    delete from [dbo].[yaf_AccessMask] where BoardID=@BoardID	
    delete from [dbo].[yaf_BBCode] where BoardID=@BoardID
    delete from [dbo].[yaf_Extension] where BoardId=@BoardID
    delete from [dbo].[yaf_ShoutboxMessage] where BoardId=@BoardID
    delete from [dbo].[yaf_Medal] where BoardID=@BoardID
    delete from [dbo].[yaf_Smiley] where BoardID=@BoardID
    delete from [dbo].[yaf_Replace_Words] where BoardId=@BoardID
	delete from [dbo].[yaf_Spam_Words] where BoardId=@BoardID
    delete from [dbo].[yaf_NntpServer] where BoardID=@BoardID
    delete from [dbo].[yaf_BannedIP] where BoardID=@BoardID
    delete from [dbo].[yaf_Registry] where BoardID=@BoardID
    delete from [dbo].[yaf_Board] where BoardID=@BoardID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_board_list](@BoardID int=null) as
begin
        select
        a.*,
        SQLVersion = @@VERSION
    from 
        [dbo].[yaf_Board] a
    where
        (@BoardID is null or a.BoardID = @BoardID)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_poststats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_board_poststats](@BoardID int, @StyledNicks bit = 0, @ShowNoCountPosts bit = 0, @GetDefaults bit = 0 ) as
BEGIN

-- vzrus: while  a new installation or like this we don't have the row and should return a dummy data
IF @GetDefaults <= 0
BEGIN
        SELECT TOP 1 
        Posts = (select count(1) from [dbo].[yaf_Message] a join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID join [dbo].[yaf_Forum] c on c.ForumID=b.ForumID join [dbo].[yaf_Category] d on d.CategoryID=c.CategoryID where d.BoardID=@BoardID AND (a.Flags & 24)=16),
        Topics = (select count(1) from [dbo].[yaf_Topic] a join [dbo].[yaf_Forum] b on b.ForumID=a.ForumID join [dbo].[yaf_Category] c on c.CategoryID=b.CategoryID where c.BoardID=@BoardID AND a.IsDeleted = 0),
        Forums = (select count(1) from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID),	
        LastPostInfoID	= 1,
        LastPost	= a.Posted,
        LastUserID	= a.UserID,
        LastUser	= e.Name,
        LastUserDisplayName	= e.DisplayName,
        LastUserStyle =  case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = a.UserID)
            else ''	 end
            FROM 
                [dbo].[yaf_Message] a 
				join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
                join [dbo].[yaf_Forum] c on c.ForumID=b.ForumID 
                join [dbo].[yaf_Category] d on d.CategoryID=c.CategoryID 
                join [dbo].[yaf_User] e on e.UserID=a.UserID						
            WHERE 
                (a.Flags & 24) = 16
                AND b.IsDeleted = 0 
                AND d.BoardID = @BoardID 
                AND c.[IsNoCount] <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 1 END)
            ORDER BY
                a.Posted DESC
        END
        ELSE
        BEGIN
        SELECT
        Posts = 0,
        Topics = 0,
        Forums = 1,	
        LastPostInfoID	= 1,
        LastPost	= null,
        LastUserID	= null,
        LastUser	= null,
        LastUserDisplayName	= null,
        LastUserStyle = ''
        END
        -- this can be in any very rare updatable cached place 
        DELETE FROM [dbo].[yaf_Topic] where TopicMovedID IS NOT NULL AND LinkDate IS NOT NULL AND LinkDate < GETUTCDATE()
        
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_resync]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_board_resync]
    @BoardID int = null
as
begin
    
    if (@BoardID is null) begin
        declare curBoards cursor for
            select BoardID from	[dbo].[yaf_Board]

        open curBoards
        
        -- cycle through forums
        fetch next from curBoards into @BoardID
        while @@FETCH_STATUS = 0
        begin
            --resync board forums
            exec [dbo].[yaf_forum_resync] @BoardID

            fetch next from curBoards into @BoardID
        end
        close curBoards
        deallocate curBoards
    end
    else begin
        --resync board forums
        exec [dbo].[yaf_forum_resync] @BoardID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_board_save](@BoardID int,@Name nvarchar(50), @LanguageFile nvarchar(50),@Culture varchar(10), @AllowThreaded bit) as
begin

        EXEC [dbo].[yaf_registry_save] 'culture', @Culture, @BoardID
        EXEC [dbo].[yaf_registry_save] 'language', @LanguageFile, @BoardID
        update [dbo].[yaf_Board] set
        Name = @Name,
        AllowThreaded = @AllowThreaded
    where BoardID=@BoardID
    select @BoardID 
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_stats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_board_stats]
    @BoardID	int = null
as 
begin
        if (@BoardID is null) begin
        select
            NumPosts	= (select count(1) from [dbo].[yaf_Message] where IsApproved = 1 AND IsDeleted = 0),
            NumTopics	= (select count(1) from [dbo].[yaf_Topic] where IsDeleted = 0),
            NumUsers	= (select count(1) from [dbo].[yaf_User] where IsApproved = 1),
            BoardStart	= (select min(Joined) from [dbo].[yaf_User])
    end
    else begin
        select
            NumPosts	= (select count(1)	
                                from [dbo].[yaf_Message] a
                                join [dbo].[yaf_Topic] b ON a.TopicID=b.TopicID
                                join [dbo].[yaf_Forum] c ON b.ForumID=c.ForumID
                                join [dbo].[yaf_Category] d ON c.CategoryID=d.CategoryID
                                where a.IsApproved = 1 AND a.IsDeleted = 0 and b.IsDeleted = 0 AND d.BoardID=@BoardID
                            ),
            NumTopics	= (select count(1) 
                                from [dbo].[yaf_Topic] a
                                join [dbo].[yaf_Forum] b ON a.ForumID=b.ForumID
                                join [dbo].[yaf_Category] c ON b.CategoryID=c.CategoryID
                                where c.BoardID=@BoardID AND a.IsDeleted = 0
                            ),
            NumUsers	= (select count(1) from [dbo].[yaf_User] where IsApproved = 1 and BoardID=@BoardID),
            BoardStart	= (select min(Joined) from [dbo].[yaf_User] where BoardID=@BoardID)
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_board_userstats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_board_userstats](@BoardID int) as
BEGIN
        SELECT		
        Members = (select count(1) from [dbo].[yaf_User] a where a.BoardID=@BoardID AND (Flags & 2) = 2 AND (a.Flags & 4) = 0),
        MaxUsers = (SELECT [dbo].[yaf_registry_value](N'maxusers', @BoardID)),
        MaxUsersWhen = (SELECT [dbo].[yaf_registry_value](N'maxuserswhen', @BoardID)),
        LastMemberInfo.*
    FROM
        (
            SELECT TOP 1 
                LastMemberInfoID= 1,
                LastMemberID	= UserID,
                LastMember	= [Name],
                LastMemberDisplayName	= [DisplayName]
            FROM 
                [dbo].[yaf_User]
            WHERE 
               -- is approved
                (Flags & 2) = 2
                -- is not a guest
                AND (Flags & 4) <> 4
                AND BoardID = @BoardID 
            ORDER BY 
                Joined DESC
        ) as LastMemberInfo
        
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_buddy_addrequest]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* Stored procedures for Buddy feature */

CREATE PROCEDURE [dbo].[yaf_buddy_addrequest]
    @FromUserID INT,
    @ToUserID INT,
    @UTCTIMESTAMP datetime,
    @approved BIT = NULL OUT,
	@UseDisplayName BIT,	
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        IF NOT EXISTS ( SELECT  ID
                        FROM    [dbo].[yaf_Buddy]
                        WHERE   ( FromUserID = @FromUserID
                                  AND ToUserID = @ToUserID
                                ) ) 
            BEGIN
                IF ( NOT EXISTS ( SELECT    ID
                                  FROM      [dbo].[yaf_Buddy]
                                  WHERE     ( FromUserID = @ToUserID
                                              AND ToUserID = @FromUserID
                                            ) )
                   ) 
                    BEGIN
                        INSERT  INTO [dbo].[yaf_Buddy]
                                (
                                  FromUserID,
                                 ToUserID,
                                  Approved,
                                  Requested
                                )
                        VALUES  (
                                  @FromUserID,
                                  @ToUserID,
                                  0,
                                  @UTCTIMESTAMP 
                                )
                        SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @ToUserID )
                           )
                        SET @approved = 0
                    END
                ELSE 
                    BEGIN
                        INSERT  INTO [dbo].[yaf_Buddy]
                                (
                                  FromUserID,
                                  ToUserID,
                                  Approved,
                                  Requested
                                )
                        VALUES  (
                                  @FromUserID,
                                  @ToUserID,
                                  1,
                                  @UTCTIMESTAMP 
                                )
                        UPDATE  [dbo].[yaf_Buddy]
                        SET     Approved = 1
                        WHERE   ( FromUserID = @ToUserID
                                  AND ToUserID = @FromUserID
                                )
                        SET @paramOutput = ( SELECT [Name]
                                             FROM   [dbo].[yaf_User]
                                             WHERE  ( UserID = @ToUserID )
                                           )
                        SET @approved = 1
                    END
            END	
        ELSE 
            BEGIN
                SET @paramOutput = ''
                SET @approved = 0
            END
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_buddy_approverequest]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_buddy_approverequest]
    @FromUserID INT,
    @ToUserID INT,
    @Mutual BIT,
    @UTCTIMESTAMP datetime,
	@UseDisplayName BIT,
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        IF EXISTS ( SELECT  ID
                    FROM    [dbo].[yaf_Buddy]
                    WHERE   ( FromUserID = @FromUserID
                              AND ToUserID = @ToUserID
                            ) ) 
            BEGIN
                UPDATE  [dbo].[yaf_Buddy]
                SET     Approved = 1
                WHERE   ( FromUserID = @FromUserID
                          AND ToUserID = @ToUserID
                        )
                SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @FromUserID )
                           )
                IF ( @Mutual = 1 )
                    AND ( NOT EXISTS ( SELECT   ID
                                       FROM     [dbo].[yaf_Buddy]
                                       WHERE    FromUserID = @ToUserID
                                                AND ToUserID = @FromUserID )
                        ) 
                    INSERT  INTO [dbo].[yaf_Buddy]
                            (
                              FromUserID,
                              ToUserID,
                              Approved,
                              Requested
                            )
                    VALUES  (
                              @ToUserID,
                              @FromUserID,
                              1,
                              @UTCTIMESTAMP 
                            )
            END
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_buddy_denyrequest]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_buddy_denyrequest]
    @FromUserID INT,
    @ToUserID INT,
	@UseDisplayName BIT,
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        DELETE  FROM [dbo].[yaf_Buddy]
        WHERE   FromUserID = @FromUserID
                AND ToUserID = @ToUserID
        SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @FromUserID 
							)
)
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_buddy_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_buddy_list] @FromUserID INT
AS 
    BEGIN
        SELECT  a.UserID,
                a.BoardID,
                a.[Name],
                a.Joined,
                a.NumPosts,
                RankName = b.Name,
                c.Approved,
                c.FromUserID,
                c.Requested
        FROM   [dbo].[yaf_User] a
                JOIN [dbo].[yaf_Rank] b ON b.RankID = a.RankID
                JOIN [dbo].[yaf_Buddy] c ON ( c.ToUserID = a.UserID
                                              AND c.FromUserID = @FromUserID
                                            )
        UNION
        SELECT  @FromUserID AS UserID,
                a.BoardID,
                a.[Name],
                a.Joined,
                a.NumPosts,
                RankName = b.Name,
                c.Approved,
                c.FromUserID,
                c.Requested
        FROM    [dbo].[yaf_User] a
                JOIN [dbo].[yaf_Rank] b ON b.RankID = a.RankID
                JOIN [dbo].[yaf_Buddy] c ON ( ( c.Approved = 0 )
                                              AND ( c.ToUserID = @FromUserID )
                                              AND ( a.UserID = c.FromUserID )
                                            )
        ORDER BY a.Name
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_buddy_remove]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_buddy_remove]
    @FromUserID INT,
    @ToUserID INT,
	@UseDisplayName BIT,
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        DELETE  FROM [dbo].[yaf_Buddy]
        WHERE   ( FromUserID = @FromUserID
                  AND ToUserID = @ToUserID
                )
        SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @ToUserID )
                           )
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_category_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_category_delete](@CategoryID int) as
begin
        declare @flag int
 
    if exists(select 1 from [dbo].[yaf_Forum] where CategoryID = @CategoryID)
    begin
        set @flag = 0
    end else
    begin
        delete from [dbo].[yaf_Category] where CategoryID = @CategoryID
        set @flag = 1
    end

    select @flag
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_category_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_category_list](@BoardID int,@CategoryID int=null) as
begin
        if @CategoryID is null
        select * from [dbo].[yaf_Category] where BoardID = @BoardID order by SortOrder
    else
        select * from [dbo].[yaf_Category] where BoardID = @BoardID and CategoryID = @CategoryID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_category_listread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_category_listread](@BoardID int,@UserID int,@CategoryID int=null) as
begin
        select 
        a.CategoryID,
        a.Name,
        a.CategoryImage
    from 
        [dbo].[yaf_Category] a
        join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] v  with(nolock) on v.ForumID=b.ForumID
    where
        a.BoardID=@BoardID and
        v.UserID=@UserID and
        (CONVERT(int,v.ReadAccess)<>0 or (b.Flags & 2)=0) and
        (@CategoryID is null or a.CategoryID=@CategoryID) and
        b.ParentID is null
    group by
        a.CategoryID,
        a.Name,
        a.SortOrder,
        a.CategoryImage
    order by 
        a.SortOrder
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_category_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_category_save]
(
    @BoardID    INT,
    @CategoryID INT,
    @Name       NVARCHAR(128),	
    @SortOrder  SMALLINT,
    @CategoryImage NVARCHAR(255) = NULL
)
AS
BEGIN
        IF @CategoryID > 0
    BEGIN
        UPDATE [dbo].[yaf_Category]
        SET    Name = @Name,
               CategoryImage = @CategoryImage,
               SortOrder = @SortOrder
        WHERE  CategoryID = @CategoryID
        SELECT CategoryID = @CategoryID
    END
    ELSE
    BEGIN
        INSERT INTO [dbo].[yaf_Category]
                   (BoardID,
                    [Name],
                    [CategoryImage],
                    SortOrder)
        VALUES     (@BoardID,
                    @Name,
                    @CategoryImage,
                    @SortOrder)
        SELECT CategoryID = Scope_identity()
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_category_simplelist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_category_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN       
        SELECT TOP(@Limit) c.[CategoryID],
                 c.[Name]
        FROM     [dbo].[yaf_Category] c
        WHERE    c.[CategoryID] >= @StartID
        AND c.[CategoryID] < (@StartID + @Limit)
        ORDER BY c.[CategoryID]       
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_checkemail_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_checkemail_list]
(
    @Email nvarchar(255) = null
)
AS
BEGIN
        IF @Email IS NULL
        SELECT * FROM [dbo].[yaf_CheckEmail]
    ELSE
        SELECT * FROM [dbo].[yaf_CheckEmail] WHERE Email = LOWER(@Email)
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_checkemail_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_checkemail_save]
(
    @UserID int,
    @Hash nvarchar(32),
    @Email nvarchar(255),
    @UTCTIMESTAMP datetime
)
AS
BEGIN
        INSERT INTO [dbo].[yaf_CheckEmail]
        (UserID,Email,Created,Hash)
    VALUES
        (@UserID,LOWER(@Email),@UTCTIMESTAMP ,@Hash)	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_checkemail_update]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_checkemail_update](@Hash nvarchar(32)) as
begin
        declare @UserID int
    declare @CheckEmailID int
    declare @Email nvarchar(255)

    set @UserID = null

    select 
        @CheckEmailID = CheckEmailID,
        @UserID = UserID,
        @Email = Email
    from
        [dbo].[yaf_CheckEmail]
    where
        Hash = @Hash

    if @UserID is null
    begin
        select convert(nvarchar(64),NULL) as ProviderUserKey, convert(nvarchar(255),NULL) as Email
        return
    end

    -- Update new user email
    update [dbo].[yaf_User] set Email = LOWER(@Email), Flags = Flags | 2 where UserID = @UserID
    delete [dbo].[yaf_CheckEmail] where CheckEmailID = @CheckEmailID

    -- return the UserProviderKey
    SELECT ProviderUserKey, Email, UserID FROM [dbo].[yaf_User] WHERE UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_choice_add]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- polls

CREATE procedure [dbo].[yaf_choice_add](
    @PollID		int,
    @Choice		nvarchar(50),
    @ObjectPath nvarchar(255),
    @MimeType nvarchar(50)
) as
begin
    
    insert into [dbo].[yaf_Choice]
        (PollID, Choice, Votes, ObjectPath, MimeType)
        values
        (@PollID, @Choice, 0, @ObjectPath, @MimeType)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_choice_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_choice_delete](
    @ChoiceID	int
) as
begin
    
    delete from [dbo].[yaf_Choice]
        where ChoiceID = @ChoiceID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_choice_update]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_choice_update](
    @ChoiceID	int,
    @Choice		nvarchar(50),
    @ObjectPath nvarchar(255),
    @MimeType nvarchar(50)
) as
begin
    
    update [dbo].[yaf_Choice]
        set Choice = @Choice, ObjectPath =  @ObjectPath, MimeType = @MimeType
        where ChoiceID = @ChoiceID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_choice_vote]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_choice_vote](@ChoiceID int,@UserID int = NULL, @RemoteIP varchar(39) = NULL) AS
BEGIN
        DECLARE @PollID int

    SET @PollID = (SELECT PollID FROM [dbo].[yaf_Choice] WHERE ChoiceID = @ChoiceID)

    IF @UserID = NULL
    BEGIN
        IF @RemoteIP != NULL
        BEGIN
            INSERT INTO [dbo].[yaf_PollVote] (PollID, UserID, RemoteIP, ChoiceID) VALUES (@PollID,NULL,@RemoteIP, @ChoiceID)	
        END
    END
    ELSE
    BEGIN
        INSERT INTO [dbo].[yaf_PollVote] (PollID, UserID, RemoteIP, ChoiceID) VALUES (@PollID,@UserID,@RemoteIP,@ChoiceID)
    END

    UPDATE [dbo].[yaf_Choice] SET Votes = Votes + 1 WHERE ChoiceID = @ChoiceID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_db_handle_computedcolumns]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_db_handle_computedcolumns]( @SetOnDisk bit )  
as
begin
    declare @tmpC nvarchar(255)
    declare @tmpT nvarchar(255)
    declare @tmpD nvarchar(255)	

    CREATE TABLE #MyTempTable (tname nvarchar(255),cname nvarchar(255), ctext nvarchar(255))
    INSERT INTO #MyTempTable(tname,cname, ctext)     
        SELECT        o.name,s.name,sc.text
FROM            sys.columns AS s INNER JOIN
                         sys.objects AS o ON o.object_id = s.object_id INNER JOIN
                         sys.syscomments AS sc ON sc.id = o.object_id
WHERE        (s.is_computed = 1) AND (o.type = 'U') AND (s.system_type_id = 104)

    if @SetOnDisk = 1
    begin
        declare c cursor for
        SELECT    tname, cname, ctext
        FROM           #MyTempTable       
        
        open c
        
        fetch next from c into @tmpT, @tmpC, @tmpD
        while @@FETCH_STATUS = 0
        begin
            
        exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] drop column ' + @tmpC)
        exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] add ' + @tmpC + ' AS ' + @tmpD + ' PERSISTED ' )

            fetch next from c into  @tmpT, @tmpC, @tmpD
        end
        close c
        deallocate c
    end
    else
    begin
        declare c cursor for
            SELECT    tname, cname, ctext
        FROM           #MyTempTable 
        
        open c
        
        fetch next from c into @tmpT, @tmpC, @tmpD
        while @@FETCH_STATUS = 0
        begin		    	
            exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] drop column ' + @tmpC)
            exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] add ' + @tmpC + ' AS ' + @tmpD)
            fetch next from c into @tmpT, @tmpC, @tmpD
        end
        close c
        deallocate c
    end	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_drop_defaultconstraint_oncolumn]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_drop_defaultconstraint_oncolumn](@tablename varchar(255), @columnname varchar(255)) as
BEGIN
DECLARE @DefName sysname

SELECT 
  @DefName = o1.name
FROM
  sys.objects o1
  INNER JOIN sys.columns c ON
  o1.object_id = c.default_object_id
  INNER JOIN sys.objects o2 ON
  c.object_id = o2.object_id
WHERE
  o2.name = @tablename AND
  c.name = @columnname
  
IF @DefName IS NOT NULL
  EXECUTE ('ALTER TABLE [dbo].[' + @tablename + '] DROP constraint [' + @DefName + ']')
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_eventlog_create]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_eventlog_create](@UserID int,@Source nvarchar(50),@Description ntext,@Type int,@UTCTIMESTAMP datetime) as
begin
        insert into [dbo].[yaf_EventLog](UserID,Source,[Description],[Type])
    values(@UserID,@Source,@Description,@Type)	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_eventlog_deletebyuser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_eventlog_deletebyuser]
(	
    @BoardID int = null,
    @PageUserID int 
) as
begin
if (exists (select top 1 1 from [dbo].[yaf_User] where ((Flags & 1) = 1 and UserID = @PageUserID)))
begin
delete from [dbo].[yaf_EventLog] where
            (UserID is null or
            UserID in (select UserID from [dbo].[yaf_User] where BoardID=@BoardID))
end
else
begin
declare @tmp_evlogdelacc table (EventLogTID int);

        -- either EventLogID or BoardID must be null, not both at the same time
    insert into	@tmp_evlogdelacc(EventLogTID)
    select a.EventLogID from [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type] 
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
        where e.DeleteAccess = 1
        delete from [dbo].[yaf_EventLog]
        where EventLogID in (select EventLogTID from @tmp_evlogdelacc)
    end	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_eventlog_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_eventlog_list](@BoardID int, @PageUserID int, @MaxRows int, @MaxDays int,  @PageIndex int,
   @PageSize int, @SinceDate datetime, @ToDate datetime, @EventIDs varchar(8000) = null,
@UTCTIMESTAMP datetime) as
begin
   declare @TotalRows int 
   declare @FirstSelectRowNumber int 
   declare @FirstSelectRowID int
   DECLARE @ParsedEventIDs TABLE
      (
            EventID int
      )
      
DECLARE @EventID varchar(11), @Pos INT      
SET @Pos = CHARINDEX(',', @EventIDs, 1)
-- check here if the value is not empty
IF REPLACE(@EventIDs, ',', '') <> ''
BEGIN
 WHILE @Pos > 0
                  BEGIN
                        SET @EventID = LTRIM(RTRIM(LEFT(@EventIDs, @Pos - 1)))
                        IF @EventID <> ''
                        BEGIN
                              INSERT INTO @ParsedEventIDs (EventID) VALUES (CAST(@EventID AS int)) --Use Appropriate conversion
                        END
                        SET @EventIDs = RIGHT(@EventIDs, LEN(@EventIDs) - @Pos)
                        SET @Pos = CHARINDEX(',', @EventIDs, 1)
                  END
                     -- to be sure that last value is inserted
                    IF (LEN(@EventIDs) > 0)
                           INSERT INTO @ParsedEventIDs (EventID) VALUES (CAST(@EventIDs AS int)) 
END

-- delete entries older than 10 days
    delete from [dbo].[yaf_EventLog] where EventTime+@MaxDays<@UTCTIMESTAMP 

    -- or if there are more then 1000	
    if ((select count(1) from [dbo].[yaf_eventlog]) >= @MaxRows + 50)
    begin		
        delete from [dbo].[yaf_EventLog] WHERE EventLogID IN (SELECT TOP 100 EventLogID FROM [dbo].[yaf_EventLog] ORDER BY EventTime)
    end	

    set nocount on
     set @PageIndex = @PageIndex + 1
    if (exists (select top 1 1 from [dbo].[yaf_User] where ((Flags & 1) = 1 and UserID = @PageUserID)))		
    begin
      set @FirstSelectRowNumber = 0
      set @FirstSelectRowID = 0
      set @TotalRows = 0

        select @TotalRows = count(1) from
        [dbo].[yaf_EventLog] a		
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
        where	   
        (b.UserID IS NULL or b.BoardID = @BoardID)	and ((@EventIDs IS NULL )  OR  a.[Type] IN (select * from @ParsedEventIDs))  and EventTime between @SinceDate and @ToDate
    
        select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1

    if (@FirstSelectRowNumber <= @TotalRows)
        begin
           -- find first selectedrowid 
  
    set rowcount @FirstSelectRowNumber
   end
   else
   begin   
   set rowcount 1
   end
       
        select @FirstSelectRowID = EventLogID 
       from
        [dbo].[yaf_EventLog] a		
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
        where	   
        (b.UserID IS NULL or b.BoardID = @BoardID) and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs))  and a.EventTime between @SinceDate and @ToDate
        order by a.EventLogID desc

      set rowcount @PageSize
      select
        a.*,		
        ISNULL(b.[Name],'System') as [Name],
        TotalRows = @TotalRows
    from
        [dbo].[yaf_EventLog] a		
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
      where EventLogID <= @FirstSelectRowID  and (b.UserID IS NULL or b.BoardID = @BoardID)	and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs)) -- and a.EventTime between @SinceDate and @ToDate
      order by a.EventLogID   desc   
   end  
else
begin
        select @TotalRows = count(1)  from
        [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type]
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
    where	 
        (b.UserID IS NULL or b.BoardID = @BoardID)		and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs))	 and a.EventTime between @SinceDate and @ToDate
    
        select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1
                   -- find first selectedrowid 
   if (@TotalRows > 0)
   begin
    set rowcount @FirstSelectRowNumber
   end
   else
   begin   
   set rowcount 1
   end

        select @FirstSelectRowID = EventLogID 
      from
        [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type]
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
    where	   
        (b.UserID IS NULL or b.BoardID = @BoardID)	and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs))	 and a.EventTime between @SinceDate and @ToDate
        order by  a.EventLogID   desc

      set rowcount @PageSize
      select
      a.*,		
        ISNULL(b.[Name],'System') as [Name],
        TotalRows = @TotalRows
         from
        [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type]
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
    where	  EventLogID <= @FirstSelectRowID and (b.UserID IS NULL or b.BoardID = @BoardID) and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs)) and a.EventTime between @SinceDate and @ToDate	
      order by a.EventLogID  desc   
   end  
   set rowcount 0
 set nocount off

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_eventloggroupaccess_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_eventloggroupaccess_delete] (@GroupID int, @EventTypeID int, @EventTypeName nvarchar(128)) as
begin
    if @EventTypeName is not null 
    begin
        delete from [dbo].[yaf_EventLogGroupAccess]  where GroupID = @GroupID and EventTypeID = @EventTypeID
    end	
    else
    begin
    -- delete all access rights
        delete from [dbo].[yaf_EventLogGroupAccess]  where GroupID = @GroupID 
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_eventloggroupaccess_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_eventloggroupaccess_list] (@GroupID int, @EventTypeID int = null) as
begin 
-- TODO - exclude host admins from list   
if @EventTypeID is null   
        select e.*, g.Name as GroupName from [dbo].[yaf_EventLogGroupAccess] e 
        join [dbo].[yaf_Group] g on g.GroupID = e.GroupID where  e.GroupID = @GroupID
        else
        select e.*, g.Name as GroupName from [dbo].[yaf_EventLogGroupAccess] e 
        join [dbo].[yaf_Group] g on g.GroupID = e.GroupID where  e.GroupID = @GroupID and e.EventTypeID = @EventTypeID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_eventloggroupaccess_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_eventloggroupaccess_save] (@GroupID int, @EventTypeID int, @EventTypeName nvarchar(128), @DeleteAccess bit = 0) as
begin
    if not exists (select top 1 1 from [dbo].[yaf_EventLogGroupAccess] where GroupID = @GroupID and EventTypeName = @EventTypeName) 
        begin
        insert into [dbo].[yaf_EventLogGroupAccess]  (GroupID,EventTypeID,EventTypeName,DeleteAccess) 
        values(@GroupID,@EventTypeID,@EventTypeName,@DeleteAccess)
    end	
    else
    begin
        update [dbo].[yaf_EventLogGroupAccess]  set DeleteAccess = @DeleteAccess
        where GroupID = @GroupID and EventTypeID = @EventTypeID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_extension_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_extension_list] (@BoardID int, @Extension nvarchar(10)) as
BEGIN
    
    -- If an extension is passed, then we want to check for THAT extension
    IF LEN(@Extension) > 0
        BEGIN
            SELECT
                a.*
            FROM
                [dbo].[yaf_Extension] a
            WHERE
                a.BoardId = @BoardID AND a.Extension=@Extension
            ORDER BY
                a.Extension
        END

    ELSE
        -- Otherwise, just get a list for the given @BoardId
        BEGIN
            SELECT
                a.*
            FROM
                [dbo].[yaf_Extension] a
            WHERE
                a.BoardId = @BoardID	
            ORDER BY
                a.Extension
        END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_forum_delete](@ForumID int) as
begin
        -- Maybe an idea to use cascading foreign keys instead? Too bad they don't work on MS SQL 7.0...
    update [dbo].[yaf_Forum] set LastMessageID=null,LastTopicID=null where ForumID=@ForumID
    update [dbo].[yaf_Topic] set LastMessageID=null where ForumID=@ForumID
    update [dbo].[yaf_Active] set ForumID=null where ForumID=@ForumID
    delete from [dbo].[yaf_WatchTopic] from [dbo].[yaf_Topic] where [dbo].[yaf_Topic].ForumID = @ForumID and [dbo].[yaf_WatchTopic].TopicID = [dbo].[yaf_Topic].TopicID
    delete from [dbo].[yaf_Active] from [dbo].[yaf_Topic] where [dbo].[yaf_Topic].ForumID = @ForumID and [dbo].[yaf_Active].TopicID = [dbo].[yaf_Topic].TopicID
    delete from [dbo].[yaf_NntpTopic] from [dbo].[yaf_NntpForum] where [dbo].[yaf_NntpForum].ForumID = @ForumID and [dbo].[yaf_NntpTopic].NntpForumID = [dbo].[yaf_NntpForum].NntpForumID
    delete from [dbo].[yaf_NntpForum] where ForumID=@ForumID	
    delete from [dbo].[yaf_WatchForum] where ForumID = @ForumID
    delete from [dbo].[yaf_ForumReadTracking] where ForumID = @ForumID

    -- BAI CHANGED 02.02.2004
    -- Delete topics, messages and attachments

    declare @tmpTopicID int;
    declare topic_cursor cursor for
        select TopicID from [dbo].[yaf_Topic]
        where ForumID = @ForumID
        order by TopicID desc
    
    open topic_cursor
    
    fetch next from topic_cursor
    into @tmpTopicID
    
    -- Check @@FETCH_STATUS to see if there are any more rows to fetch.
    while @@FETCH_STATUS = 0
    begin
        exec [dbo].[yaf_topic_delete] @tmpTopicID,1,1;
    
       -- This is executed as long as the previous fetch succeeds.
        fetch next from topic_cursor
        into @tmpTopicID
    end
    
    close topic_cursor
    deallocate topic_cursor

    -- TopicDelete finished
    -- END BAI CHANGED 02.02.2004

    delete from [dbo].[yaf_ForumAccess] where ForumID = @ForumID
    --ABOT CHANGED
    --Delete UserForums Too 
    delete from [dbo].[yaf_UserForum] where ForumID = @ForumID
    --END ABOT CHANGED 09.04.2004
    delete from [dbo].[yaf_Forum] where ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_initdisplayname]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_initdisplayname] as
 
begin
    declare @tmpUserName nvarchar(255)
    declare @tmpUserDisplayName nvarchar(255)
    declare @tmpLastUserName nvarchar(255)
    declare @tmpLastUserDisplayName nvarchar(255)
    declare @tmp int
    declare @tmpUserID int
    declare @tmpLastUserID int
 
     update d
      set    d.LastUserDisplayName = ISNULL((select top 1 f.LastUserDisplayName FROM [dbo].[yaf_Forum] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID), 
           (select top 1 f.LastUserName FROM [dbo].[yaf_Forum] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_Forum] d where d.LastUserDisplayName IS NULL OR d.LastUserDisplayName = d.LastUserName;
         
        /* declare fc cursor for
        select ForumID, LastUserID from [dbo].[yaf_Forum]
        where (LastUserDisplayName IS NULL OR LastUserName IS NULL) and LastUserID IS NOT NULL
        FOR UPDATE     
        open fc
         
        fetch next from fc into @tmp,@tmpLastUserID
        while @@FETCH_STATUS = 0
        begin
        select @tmpLastUserDisplayName = u.DisplayName,  @tmpLastUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpLastUserID
        update [dbo].[yaf_Forum] set LastUserDisplayName = @tmpLastUserDisplayName, LastUserName = @tmpLastUserName where [dbo].[yaf_Forum].ForumID = @tmp    
        fetch next from fc into @tmp,@tmpLastUserID
        end
        close fc
        deallocate fc */
 
        update d
       set    d.UserDisplayName = ISNULL((select top 1 f.UserDisplayName FROM [dbo].[yaf_ShoutboxMessage] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID), 
           (select top 1 f.UserName FROM [dbo].[yaf_ShoutboxMessage] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_ShoutboxMessage] d where d.UserDisplayName IS NULL OR d.UserDisplayName = d.UserName;
         
    /*  declare sbc cursor for
        select ShoutBoxMessageID,UserID from [dbo].[yaf_ShoutboxMessage]
        where UserDisplayName IS NULL
        FOR UPDATE     
        open sbc
         
        fetch next from sbc into @tmp,@tmpUserID
        while @@FETCH_STATUS = 0
        begin
        select @tmpUserDisplayName = u.DisplayName,  @tmpUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpUserID
        update [dbo].[yaf_ShoutboxMessage] set UserDisplayName = @tmpUserDisplayName,UserName = @tmpUserName where [dbo].[yaf_ShoutboxMessage].ShoutBoxMessageID = @tmp
        fetch next from sbc into @tmp,@tmpUserID
        end
        close sbc
        deallocate sbc  
        */  
         
            update d
       set    d.UserDisplayName = ISNULL((select top 1 m.UserDisplayName FROM [dbo].[yaf_Message] m
          join [dbo].[yaf_User] u on u.UserID = m.UserID where u.UserID = d.UserID), 
           (select top 1 m.UserName FROM [dbo].[yaf_Message] m
          join [dbo].[yaf_User] u on u.UserID = m.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_Message] d where d.UserDisplayName IS NULL OR d.UserDisplayName = d.UserName;  
         
    /*  declare mc cursor for
        select MessageID,UserID from [dbo].[yaf_Message]
        where UserDisplayName IS NULL
        FOR UPDATE
                 
        open mc
         
        fetch next from mc into @tmp,@tmpUserID
        while @@FETCH_STATUS = 0
        begin
        select @tmpUserDisplayName = u.DisplayName,  @tmpUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpUserID     
        update [dbo].[yaf_Message]  set UserDisplayName = @tmpUserDisplayName, UserName = @tmpUserName where MessageID = @tmp
        fetch next from mc into @tmp,@tmpUserID
        end
        close mc
        deallocate mc
        */      
         
            update d
       set    d.UserDisplayName = ISNULL((select top 1 t.UserDisplayName FROM [dbo].[yaf_Topic] t
          join [dbo].[yaf_User] u on u.UserID = t.UserID where u.UserID = d.UserID), 
           (select top 1 t.UserName FROM [dbo].[yaf_Topic] t
          join [dbo].[yaf_User] u on u.UserID = t.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_Message] d where d.UserDisplayName IS NULL OR d.UserDisplayName = d.UserName;  
 
    /*  declare tc cursor for
        select TopicID,UserID,LastUserID from [dbo].[yaf_Topic]
        where (UserDisplayName IS NULL OR LastUserDisplayName IS NULL) and LastUserID IS NOT NULL
        FOR UPDATE
                 
        open tc
         
        fetch next from tc into @tmp,@tmpUserID,@tmpLastUserID
        while @@FETCH_STATUS = 0
        begin  
        select @tmpUserDisplayName = u.DisplayName,  @tmpUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpUserID 
        select @tmpLastUserDisplayName = u.DisplayName,  @tmpLastUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpLastUserID     
        update [dbo].[yaf_Topic] set UserDisplayName = @tmpUserDisplayName, UserName = @tmpUserName  where TopicID = @tmp
        update [dbo].[yaf_Topic] set LastUserDisplayName = @tmpLastUserDisplayName, LastUserName = @tmpLastUserName where TopicID = @tmp           
 
        fetch next from tc into @tmp,@tmpUserID,@tmpLastUserID
        end
        close tc
        deallocate tc   */      
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_list](@BoardID int,@ForumID int=null) as
begin
    if @ForumID = 0 set @ForumID = null
    if @ForumID is null
        select a.* from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID order by a.SortOrder
    else
        select a.* from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID and a.ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_listall]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_forum_listall] (@BoardID int,@UserID int,@root int = 0) as
begin
    if @root = 0
begin
      select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        Indent = 0,
        a.ParentID,
        a.PollGroupID
    from
        [dbo].[yaf_Forum] a
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c  with(nolock) on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ReadAccess) > 0
    order by
        b.SortOrder,
        a.SortOrder,
        b.CategoryID,
        a.ForumID
end
else if  @root > 0
begin
    select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        Indent = 0,
        a.ParentID
    from
        [dbo].[yaf_Forum] a
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c  with(nolock) on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ReadAccess) > 0 and
        a.ForumID = @root

    order by
        b.SortOrder,
        a.SortOrder,
        b.CategoryID,
        a.ForumID
end
else
begin
    select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        Indent = 0,
        a.ParentID
    from
        [dbo].[yaf_Forum] a
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c  with(nolock) on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ReadAccess) > 0 and
        b.CategoryID = -@root

    order by
        b.SortOrder,
        a.SortOrder,
        b.CategoryID,
        a.ForumID
end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_listall_fromcat]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_forum_listall_fromcat](@BoardID int,@CategoryID int) AS
BEGIN
        SELECT     b.CategoryID, b.Name AS Category, a.ForumID, a.Name AS Forum, a.ParentID, a.PollGroupID 
    FROM         [dbo].[yaf_Forum] a INNER JOIN
                          [dbo].[yaf_Category] b ON b.CategoryID = a.CategoryID
        WHERE
            b.CategoryID=@CategoryID and
            b.BoardID=@BoardID
        ORDER BY
            b.SortOrder,
            a.SortOrder
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_listallmymoderated]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_listallmymoderated](@BoardID int,@UserID int) as
begin
        select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        x.Indent
    from
        (select
            b.ForumID,
            Indent = 0
        from
            [dbo].[yaf_Category] a
            join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
        where
            a.BoardID=@BoardID and
            b.ParentID is null
    
        union
    
        select
            c.ForumID,
            Indent = 1
        from
            [dbo].[yaf_Category] a
            join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
            join [dbo].[yaf_Forum] c on c.ParentID=b.ForumID
        where
            a.BoardID=@BoardID and
            b.ParentID is null
    
        union
    
        select
            d.ForumID,
            Indent = 2
        from
            [dbo].[yaf_Category] a
            join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
            join [dbo].[yaf_Forum] c on c.ParentID=b.ForumID
            join [dbo].[yaf_Forum] d on d.ParentID=c.ForumID
        where
            a.BoardID=@BoardID and
            b.ParentID is null
        ) as x
        join [dbo].[yaf_Forum] a on a.ForumID=x.ForumID
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c  with(nolock) on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ModeratorAccess)>0
    order by
        b.SortOrder,
        a.SortOrder
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_listpath]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_listpath](@ForumID int) as
begin
declare @tbllpath TABLE (ForumID int, Name nvarchar(255), Indent int);
declare @Indent int;
declare @CurrentParentID int;
declare @CurrentForumID int;
declare @CurrentForumName nvarchar(255);

-- Flag if a record was selected
declare @Selectcount int;

-- Forum 1000 is a legal value... always use -1 instead
SET @CurrentParentID = -1;

SET @Indent = 0;
	while (@CurrentParentID IS NOT NULL and @Indent < 1000)
      begin                
	   set @Selectcount = 0;
       select
			@Selectcount = 1,
            @CurrentForumID =  a.ForumID,
            @CurrentParentID = a.ParentID,
            @CurrentForumName = a.Name			                      
        from
             [dbo].[yaf_Forum] a
        where
            a.ForumID=@ForumID;

		if @Selectcount = 0
		begin
			break;
		end
            Insert into @tbllpath(ForumID, Name,Indent)
            values (@CurrentForumID,@CurrentForumName,@Indent)
            SET @ForumID = @CurrentParentID; 
            SET @Indent = @Indent + 1;
     end     
     select ForumID, Name from  @tbllpath order by Indent Desc; 
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_listread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_listread](@BoardID int,@UserID int,@CategoryID int=null,@ParentID int=null, @StyledNicks bit=null,	@FindLastRead bit = 0) as
begin
declare @tbl1 table
( ForumID int, ParentID int)
declare @tbl table
( ForumID int, ParentID int)
-- get parent forums list first
insert into @tbl1(ForumID,ParentID)
select 	
        b.ForumID,
        b.ParentID		
    from 
        [dbo].[yaf_Category] a with(nolock) 
        join [dbo].[yaf_Forum] b  with(nolock) on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=b.ForumID	
    where 
        a.BoardID = @BoardID and
        ((b.Flags & 2)=0 or x.ReadAccess<>0) and
        (@CategoryID is null or a.CategoryID=@CategoryID) and
        ((@ParentID is null and b.ParentID is null) or b.ParentID=@ParentID) and
        x.UserID = @UserID
            order by
        a.SortOrder,
        b.SortOrder
            
-- child forums
insert into @tbl(ForumID,ParentID)
select 	
        b.ForumID,
        b.ParentID		
    from 
        [dbo].[yaf_Category] a  with(nolock)
        join [dbo].[yaf_Forum] b  with(nolock) on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=b.ForumID		
    where 
        a.BoardID = @BoardID and
        ((b.Flags & 2)=0 or x.ReadAccess<>0) and
        (@CategoryID is null or a.CategoryID=@CategoryID) and
        (b.ParentID IN (SELECT ForumID FROM @tbl1)) and
        x.UserID = @UserID
        order by
        a.SortOrder,
        b.SortOrder

 insert into @tbl(ForumID,ParentID)
 select * FROM @tbl1
 -- more childrens can be added to display as a tree

        select 
        a.CategoryID, 
        Category		= a.Name, 
        ForumID			= b.ForumID,
        Forum			= b.Name, 
        b.[Description],
        b.ImageURL,
        b.Styles,
        b.ParentID,
        b.PollGroupID,
        Topics			= [dbo].[yaf_forum_topics](b.ForumID),
        Posts			= [dbo].[yaf_forum_posts](b.ForumID),		
        LastPosted		= t.LastPosted,
        LastMessageID	= t.LastMessageID,
        LastMessageFlags = t.LastMessageFlags,
        LastUserID		= t.LastUserID,
        LastUser		= IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x with(nolock) where x.UserID=t.LastUserID)),
        LastUserDisplayName	= IsNull(t.LastUserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x with(nolock) where x.UserID=t.LastUserID)),
        LastTopicID		= t.TopicID,
        TopicMovedID    = t.TopicMovedID,
        LastTopicName	= t.Topic,
        LastTopicStatus = t.Status,
        LastTopicStyles = t.Styles,
        b.Flags,
        Viewing			= (select count(1) from [dbo].[yaf_Active] x with(nolock) JOIN [dbo].[yaf_User] usr with(nolock) ON x.UserID = usr.UserID where x.ForumID=b.ForumID AND usr.IsActiveExcluded = 0),
        b.RemoteURL,		
        ReadAccess = CONVERT(int,x.ReadAccess),
        Style = case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = t.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x with(nolock) WHERE x.ForumID=b.ForumID AND x.UserID = @UserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y with(nolock) WHERE y.TopicID=t.TopicID AND y.UserID = @UserID)
             else ''	 end 					
    from 
        [dbo].[yaf_Category] a with(nolock)
        join [dbo].[yaf_Forum] b with(nolock) on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] x with(nolock) on x.ForumID=b.ForumID
        left outer join [dbo].[yaf_Topic] t with(nolock) ON t.TopicID = [dbo].[yaf_forum_lasttopic](b.ForumID,@UserID,b.LastTopicID,b.LastPosted)
    where 		
        (@CategoryID is null or a.CategoryID=@CategoryID) and		
         x.UserID = @UserID and		
        (b.ForumID IN (SELECT ForumID FROM @tbl) )
    order by
        a.SortOrder,
        b.SortOrder
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_listSubForums]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_listSubForums](@ForumID int) as
begin
        select Sum(1) from [dbo].[yaf_Forum] where ParentID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_listtopics]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_listtopics](@ForumID int) as
begin
        select * from [dbo].[yaf_Topic]
    Where ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_maxid]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_maxid](@BoardID int) as
begin	
    select top 1 a.ForumID from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID order by a.ForumID desc	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_moderatelist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_forum_moderatelist](@BoardID int,@UserID int) AS
BEGIN
    
SELECT
        b.*,
        MessageCount  = 
        (SELECT     count([dbo].[yaf_Message].MessageID)
        FROM         [dbo].[yaf_Message] INNER JOIN
                              [dbo].[yaf_Topic] ON [dbo].[yaf_Message].TopicID = [dbo].[yaf_Topic].TopicID
        WHERE ([dbo].[yaf_Message].IsApproved=0) and ([dbo].[yaf_Message].IsDeleted=0) and ([dbo].[yaf_Topic].IsDeleted  = 0) AND ([dbo].[yaf_Topic].ForumID=b.ForumID)),

        ReportedCount	= 
        (SELECT     count([dbo].[yaf_Message].MessageID)
        FROM         [dbo].[yaf_Message] INNER JOIN
                              [dbo].[yaf_Topic] ON [dbo].[yaf_Message].TopicID = [dbo].[yaf_Topic].TopicID
        WHERE (([dbo].[yaf_Message].Flags & 128)=128) and ([dbo].[yaf_Message].IsDeleted=0) and ([dbo].[yaf_Topic].IsDeleted = 0) AND ([dbo].[yaf_Topic].ForumID=b.ForumID))
        FROM
        [dbo].[yaf_Category] a

    JOIN [dbo].[yaf_Forum] b ON b.CategoryID=a.CategoryID
    JOIN [dbo].[yaf_ActiveAccess] c  with(nolock) ON c.ForumID=b.ForumID

    WHERE
        a.BoardID=@BoardID AND
        CONVERT(int,c.ModeratorAccess)>0 AND
        c.UserID=@UserID
    ORDER BY
        a.SortOrder,
        b.SortOrder
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_moderators]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_moderators] (@StyledNicks bit) as
BEGIN
        select
        ForumID = a.ForumID, 
        ForumName = f.Name,
        ModeratorID = a.GroupID, 
        ModeratorName = b.Name,	
        ModeratorEmail = '',
        ModeratorAvatar = '',
        ModeratorAvatarImage = CAST(0 as bit),
        ModeratorDisplayName = b.Name,
        Style = case(@StyledNicks)
            when 1 then b.Style  
            else ''	 end,						
        IsGroup=1
    from
        [dbo].[yaf_Forum] f WITH(NOLOCK) 
        INNER JOIN [dbo].[yaf_ForumAccess] a WITH(NOLOCK) ON a.ForumID = f.ForumID
        INNER JOIN [dbo].[yaf_Group] b WITH(NOLOCK) ON b.GroupID = a.GroupID
        INNER JOIN [dbo].[yaf_AccessMask] c WITH(NOLOCK) ON c.AccessMaskID = a.AccessMaskID
    where
        (c.Flags & 64)<>0
    union all
    select 
        ForumID = access.ForumID,
        ForumName = f.Name,
        ModeratorID = usr.UserID, 
        ModeratorName = usr.Name,
        ModeratorEmail = usr.Email,
        ModeratorAvatar = ISNULL(usr.Avatar, ''),
        ModeratorAvatarImage = CAST((select count(1) from [dbo].[yaf_User] x where x.UserID=usr.UserID and AvatarImage is not null)as bit),
        ModeratorDisplayName = usr.DisplayName,
        Style = case(@StyledNicks)
            when 1 then  usr.UserStyle
            else ''	 end,						
        IsGroup=0
    from
        [dbo].[yaf_User] usr WITH(NOLOCK)
        INNER JOIN (
            select
                UserID				= a.UserID,
                ForumID				= x.ForumID,
                ModeratorAccess		= MAX(ModeratorAccess)						
            from
                [dbo].[yaf_vaccessfull] as x WITH(NOLOCK)		       				
                INNER JOIN [dbo].[yaf_UserGroup] a WITH(NOLOCK) on a.UserID=x.UserID
                INNER JOIN [dbo].[yaf_Group] b WITH(NOLOCK) on b.GroupID=a.GroupID
            WHERE 
                ModeratorAccess <> 0 AND x.AdminGroup = 0
            GROUP BY a.UserID, x.ForumID
        ) access ON usr.UserID = access.UserID
        JOIN    [dbo].[yaf_Forum] f WITH(NOLOCK) 
        ON f.ForumID = access.ForumID
                   
        JOIN [dbo].[yaf_Rank] r
        ON r.RankID = usr.RankID
    where
        access.ModeratorAccess<>0
    order by
        IsGroup desc,
        ModeratorName asc
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_move]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_forum_move](@ForumOldID int,@ForumNewID int, @UTCTIMESTAMP datetime) as
begin
        -- Maybe an idea to use cascading foreign keys instead? Too bad they don't work on MS SQL 7.0...
    update [dbo].[yaf_Forum] set LastMessageID=null,LastTopicID=null where ForumID=@ForumOldID
    update [dbo].[yaf_Active] set ForumID=@ForumNewID where ForumID=@ForumOldID
    update [dbo].[yaf_NntpForum] set ForumID=@ForumNewID where ForumID=@ForumOldID
    update [dbo].[yaf_WatchForum] set ForumID=@ForumNewID where ForumID=@ForumOldID
    delete from [dbo].[yaf_ForumReadTracking] where ForumID = @ForumOldID

    -- BAI CHANGED 02.02.2004
    -- Move topics, messages and attachments

    declare @tmpTopicID int;
    declare topic_cursor cursor for
        select TopicID from [dbo].[yaf_Topic]
        where ForumID = @ForumOldID
        order by TopicID desc
    
    open topic_cursor
    
    fetch next from topic_cursor
    into @tmpTopicID
    
    -- Check @@FETCH_STATUS to see if there are any more rows to fetch.
    while @@FETCH_STATUS = 0
    begin
        exec [dbo].[yaf_topic_move] @tmpTopicID,@ForumNewID,0, -1,@UTCTIMESTAMP;
    
       -- This is executed as long as the previous fetch succeeds.
        fetch next from topic_cursor
        into @tmpTopicID
    end
    
    close topic_cursor
    deallocate topic_cursor

    -- TopicMove finished
    -- END BAI CHANGED 02.02.2004

    delete from [dbo].[yaf_ForumAccess] where ForumID = @ForumOldID

    --Update UserForums Too 
    update [dbo].[yaf_UserForum] set ForumID=@ForumNewID where ForumID=@ForumOldID
    --END ABOT CHANGED 09.04.2004
    delete from [dbo].[yaf_Forum] where ForumID = @ForumOldID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_resync]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_forum_resync]
    @BoardID int,
    @ForumID int = null
AS
begin
    
    if (@ForumID is null) begin
        declare curForums cursor for
            select 
                a.ForumID
            from
                [dbo].[yaf_Forum] a
                JOIN [dbo].[yaf_Category] b on a.CategoryID=b.CategoryID
                JOIN [dbo].[yaf_Board] c on b.BoardID = c.BoardID  
            where
                c.BoardID=@BoardID

        open curForums
        
        -- cycle through forums
        fetch next from curForums into @ForumID
        while @@FETCH_STATUS = 0
        begin
            --update statistics
            exec [dbo].[yaf_forum_updatestats] @ForumID
            --update last post
            exec [dbo].[yaf_forum_updatelastpost] @ForumID

            fetch next from curForums into @ForumID
        end
        close curForums
        deallocate curForums
    end
    else begin
        --update statistics
        exec [dbo].[yaf_forum_updatestats] @ForumID
        --update last post
        exec [dbo].[yaf_forum_updatelastpost] @ForumID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_forum_save](
    @ForumID 		int=null,
    @CategoryID		int,
    @ParentID		int=null,
    @Name			nvarchar(50),
    @Description	nvarchar(255),
    @SortOrder		smallint,
    @Locked			bit,
    @Hidden			bit,
    @IsTest			bit,
    @Moderated		bit,
	@ModeratedPostCount int = null,
	@IsModeratedNewTopicOnly bit,
    @RemoteURL		nvarchar(100)=null,
    @ThemeURL		nvarchar(100)=null,
    @ImageURL       nvarchar(128)=null,
    @Styles         nvarchar(255)=null,
    @AccessMaskID	int = null
) as
begin
    declare @BoardID	int
    declare @Flags		int	
    
    set @Flags = 0
    if @Locked<>0 set @Flags = @Flags | 1
    if @Hidden<>0 set @Flags = @Flags | 2
    if @IsTest<>0 set @Flags = @Flags | 4
    if @Moderated<>0 set @Flags = @Flags | 8
    
    if @ForumID = 0 set @ForumID = null
    if @ParentID = 0 set @ParentID = null
    
    if @ForumID is not null begin	
        update [dbo].[yaf_Forum] set 
            ParentID=@ParentID,
            Name=@Name,
            [Description]=@Description,
            SortOrder=@SortOrder,
            CategoryID=@CategoryID,
            RemoteURL = @RemoteURL,
            ThemeURL = @ThemeURL,
            ImageURL = @ImageURL,
            Styles = @Styles,
            Flags = @Flags,
			ModeratedPostCount = @ModeratedPostCount,
			IsModeratedNewTopicOnly = @IsModeratedNewTopicOnly
        where ForumID=@ForumID
    end
    else begin		
    
        insert into [dbo].[yaf_Forum](ParentID,Name,Description,SortOrder,CategoryID,NumTopics,NumPosts,RemoteURL,ThemeURL,Flags,ImageURL,Styles,ModeratedPostCount,IsModeratedNewTopicOnly)
        values(@ParentID,@Name,@Description,@SortOrder,@CategoryID,0,0,@RemoteURL,@ThemeURL,@Flags,@ImageURL,@Styles,@ModeratedPostCount,@IsModeratedNewTopicOnly)
        select @ForumID = SCOPE_IDENTITY()

        insert into [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) 
        select GroupID,@ForumID,@AccessMaskID
        from [dbo].[yaf_Group]
        where BoardID IN (select BoardID from [dbo].[yaf_Category] where CategoryID=@CategoryID)
    end
    select ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_simplelist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_forum_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN
        SET ARITHABORT ON        
        SELECT TOP(@Limit)  f.[ForumID],
                 f.[Name]
        FROM     [dbo].[yaf_Forum] f
        WHERE    f.[ForumID] >= @StartID
        AND f.[ForumID] < (@StartID + @Limit)
        ORDER BY f.[ForumID]    
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_updatelastpost]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_updatelastpost](@ForumID int) as
begin
        update [dbo].[yaf_Forum] set
        LastPosted = (select top 1 y.Posted from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0 order by y.Posted desc),
        LastTopicID = (select top 1 y.TopicID from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastMessageID = (select top 1 y.MessageID from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastUserID = (select top 1 y.UserID from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastUserName = (select top 1 y.UserName from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastUserDisplayName = (select top 1 y.UserDisplayName from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0 order by y.Posted desc)
    where ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forum_updatestats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forum_updatestats]
@ForumID int
as
begin
    --update Forum with forum and subforum topic values
    update  f
        set NumPosts  = isnull(t.Numposts, 0),
            NumTopics = isnull(t.Numtopics, 0)
    from    [dbo].[yaf_Forum] as f cross apply (select sum(t.NumPosts) as Numposts,
                                                                                count(t.TopicID) as Numtopics
                                                                         from   [dbo].[yaf_Topic] as t
                                                                                inner join
                                                                                [dbo].[yaf_Forum] as ff
                                                                                on ff.ForumID = t.ForumID
                                                                         where  (ff.ForumID = f.ForumID
                                                                                 or ff.ParentID = f.ForumID)
                                                                                and t.IsDeleted <> 1) as t
    where   f.ForumID = isnull(@ForumID, f.ForumID);
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forumaccess_group]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_forumaccess_group](@GroupID int) as
begin
        select 
        a.*,
        ForumName = b.Name,
        CategoryName = c.Name ,
        CategoryID = b.CategoryID,
        ParentID = b.ParentID,
        BoardName = brd.Name 
    from 
        [dbo].[yaf_ForumAccess] a
        inner join [dbo].[yaf_Forum] b on b.ForumID=a.ForumID
        inner join [dbo].[yaf_Category] c on c.CategoryID=b.CategoryID
        inner join [dbo].[yaf_Board] brd on brd.BoardID=c.BoardID
    where 
        a.GroupID = @GroupID
    order by
        brd.Name,
        c.SortOrder,
        b.SortOrder
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forumaccess_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forumaccess_list](@ForumID int) as
begin
        select 
        a.*,
        GroupName=b.Name 
    from 
        [dbo].[yaf_ForumAccess] a 
        inner join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
    where 
        a.ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_forumaccess_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_forumaccess_save](
    @ForumID			int,
    @GroupID			int,
    @AccessMaskID		int
) as
begin
        update [dbo].[yaf_ForumAccess]
        set AccessMaskID=@AccessMaskID
    where 
        ForumID = @ForumID and 
        GroupID = @GroupID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_group_delete](@GroupID int) as
begin
    delete from [dbo].[yaf_EventLogGroupAccess] where GroupID = @GroupID
    delete from [dbo].[yaf_ForumAccess] where GroupID = @GroupID
    delete from [dbo].[yaf_UserGroup] where GroupID = @GroupID
    delete from [dbo].[yaf_Group] where GroupID = @GroupID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_eventlogaccesslist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_group_eventlogaccesslist](@BoardID int = null) as
begin
        if @BoardID is null
        select g.*,b.Name as BoardName from [dbo].[yaf_Group] g
        join [dbo].[yaf_Board] b on b.BoardID = g.BoardID order by g.SortOrder 
    else
        select g.*,b.Name as BoardName from [dbo].[yaf_Group] g
        join [dbo].[yaf_Board] b on b.BoardID = g.BoardID where g.BoardID=@BoardID  order by g.SortOrder
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_group_list](@BoardID int,@GroupID int=null) as
begin
        if @GroupID is null
        select * from [dbo].[yaf_Group] where BoardID=@BoardID order by SortOrder 
    else
        select * from [dbo].[yaf_Group] where BoardID=@BoardID and GroupID=@GroupID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_medal_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- medals

create proc [dbo].[yaf_group_medal_delete]
    @GroupID int,
    @MedalID int
as begin
    
    delete from [dbo].[yaf_GroupMedal] where [GroupID]=@GroupID and [MedalID]=@MedalID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_medal_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[yaf_group_medal_list]
    @GroupID int = null,
    @MedalID int = null
as begin
    
    select 
        a.[MedalID],
        a.[Name],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        a.[SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        a.[SmallRibbonWidth],
        a.[SmallRibbonHeight],
        b.[SortOrder],
        a.[Flags],
        c.[Name] as [GroupName],
        b.[GroupID],
        isnull(b.[Message],a.[Message]) as [Message],
        b.[Message] as [MessageEx],
        b.[Hide],
        b.[OnlyRibbon],
        b.[SortOrder] as CurrentSortOrder
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_GroupMedal] b on b.[MedalID] = a.[MedalID]
        inner join [dbo].[yaf_Group] c on  c.[GroupID] = b.[GroupID]
    where
        (@GroupID is null or b.[GroupID] = @GroupID) and
        (@MedalID is null or b.[MedalID] = @MedalID)		
    order by
        c.[Name] ASC,
        b.[SortOrder] ASC

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_medal_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_group_medal_save]
   @GroupID int,
   @MedalID int,
   @Message nvarchar(100) = NULL,
   @Hide bit,
   @OnlyRibbon bit,
   @SortOrder tinyint
as begin
    
    if exists(select 1 from [dbo].[yaf_GroupMedal] where [GroupID]=@GroupID and [MedalID]=@MedalID) begin
        update [dbo].[yaf_GroupMedal]
        set
            [Message] = @Message,
            [Hide] = @Hide,
            [OnlyRibbon] = @OnlyRibbon,
            [SortOrder] = @SortOrder
        where 
            [GroupID]=@GroupID and 
            [MedalID]=@MedalID
    end
    else begin

        insert into [dbo].[yaf_GroupMedal]
            ([GroupID],[MedalID],[Message],[Hide],[OnlyRibbon],[SortOrder])
        values
            (@GroupID,@MedalID,@Message,@Hide,@OnlyRibbon,@SortOrder)
    end

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_member]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_group_member](@BoardID int,@UserID int) as
begin
        select 
        a.GroupID,
        a.Name,
        Member = (select count(1) from [dbo].[yaf_UserGroup] x where x.UserID=@UserID and x.GroupID=a.GroupID)
    from
        [dbo].[yaf_Group] a
    where
        a.BoardID=@BoardID  
    order by
        a.Name
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_rank_style]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_group_rank_style]( @BoardID int) as
begin
-- added fields to get overall info about groups and ranks
SELECT 1 AS LegendID,[Name],Style, PMLimit,[Description],UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages FROM [dbo].[yaf_Group]
WHERE BoardID = @BoardID GROUP BY SortOrder,[Name],Style,[Description],PMLimit,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages
UNION
SELECT 2  AS LegendID,[Name],Style,PMLimit, [Description],UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages FROM [dbo].[yaf_Rank]
WHERE BoardID = @BoardID GROUP BY SortOrder,[Name],Style,[Description],PMLimit,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_group_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_group_save](
    @GroupID		int,
    @BoardID		int,
    @Name			nvarchar(255),
    @IsAdmin		bit,
    @IsGuest		bit,
    @IsStart		bit,
    @IsModerator	bit,   
    @AccessMaskID	int=null,
    @PMLimit int=null,
    @Style nvarchar(255)=null,
    @SortOrder smallint,
    @Description nvarchar(128)=null,
    @UsrSigChars int=null,
    @UsrSigBBCodes	nvarchar(255)=null,
    @UsrSigHTMLTags nvarchar(255)=null,
    @UsrAlbums int=null,
    @UsrAlbumImages int=null
) as
begin
        declare @Flags	int
    
    set @Flags = 0
    if @IsAdmin<>0 set @Flags = @Flags | 1
    if @IsGuest<>0 set @Flags = @Flags | 2
    if @IsStart<>0 set @Flags = @Flags | 4
    if @IsModerator<>0 set @Flags = @Flags | 8
    if @Style IS NOT NULL AND LEN(@Style) <=2 set @Style = NULL

    if @GroupID>0 begin
        update [dbo].[yaf_Group] set
            Name = @Name,
            Flags = @Flags,
            PMLimit = @PMLimit,
            Style = @Style,
            SortOrder = @SortOrder,
            Description = @Description,
            UsrSigChars = @UsrSigChars,
            UsrSigBBCodes = @UsrSigBBCodes,
            UsrSigHTMLTags = @UsrSigHTMLTags,
            UsrAlbums = @UsrAlbums,
            UsrAlbumImages = @UsrAlbumImages 
        where GroupID = @GroupID
    end
    else begin
        insert into [dbo].[yaf_Group](Name,BoardID,Flags,PMLimit,Style, SortOrder,Description,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages)
        values(@Name,@BoardID,@Flags,@PMLimit,@Style,@SortOrder,@Description,@UsrSigChars,@UsrSigBBCodes,@UsrSigHTMLTags,@UsrAlbums,@UsrAlbumImages);
        set @GroupID = SCOPE_IDENTITY()
        insert into [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID)
        select @GroupID,a.ForumID,@AccessMaskID from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID
    end	 
    -- group styles override rank styles
    IF @Style IS NOT NULL AND len(@Style) > 2
      BEGIN
      EXEC [dbo].[yaf_user_savestyle] @GroupID,null
      END	
 
    
          
    select GroupID = @GroupID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_init_styles]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_init_styles] as
begin 
-- previously it was mangled so it's desirable update styles every time to be sure
exec('[dbo].[yaf_user_savestyle] null,null')
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_mail_create]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_mail_create]
(
    @From nvarchar(255),
    @FromName nvarchar(255) = NULL,
    @To nvarchar(255),
    @ToName nvarchar(255) = NULL,
    @Subject nvarchar(100),
    @Body ntext,
    @BodyHtml ntext = NULL,
	@SendTries int,
	@SendAttempt datetime,
    @UTCTIMESTAMP datetime
)
AS 
BEGIN
        insert into [dbo].[yaf_Mail]
        (FromUser,FromUserName,ToUser,ToUserName,Created,Subject,Body,BodyHtml,SendTries,SendAttempt)
    values
        (@From,@FromName,@To,@ToName,@UTCTIMESTAMP ,@Subject,@Body,@BodyHtml,@SendTries,@SendAttempt)	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_mail_createwatch]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_mail_createwatch]
(
    @TopicID int,
    @From nvarchar(255),
    @FromName nvarchar(255) = NULL,
    @Subject nvarchar(100),
    @Body ntext,
    @BodyHtml ntext = null,
    @UserID int,
    @UTCTIMESTAMP datetime
)
AS
BEGIN
    insert into [dbo].[yaf_Mail](FromUser,FromUserName,ToUser,ToUserName,Created,[Subject],Body,BodyHtml)
    select
        @From,
        @FromName,
        b.Email,
        b.Name,
        @UTCTIMESTAMP ,
        @Subject,
        @Body,
        @BodyHtml
    from
        [dbo].[yaf_WatchTopic] a
        inner join [dbo].[yaf_User] b on b.UserID=a.UserID
    where
        b.UserID <> @UserID and
        b.NotificationType NOT IN (10, 20) AND
        a.TopicID = @TopicID and
        (a.LastMail is null or a.LastMail < b.LastVisit)
    
    insert into [dbo].[yaf_Mail](FromUser,FromUserName,ToUser,ToUserName,Created,Subject,Body,BodyHtml)
    select
        @From,
        @FromName,
        b.Email,
        b.Name,
        @UTCTIMESTAMP,
        @Subject,
        @Body,
        @BodyHtml
    from
        [dbo].[yaf_WatchForum] a
        inner join [dbo].[yaf_User] b on b.UserID=a.UserID
        inner join [dbo].[yaf_Topic] c on c.ForumID=a.ForumID
    where
        b.UserID <> @UserID and
        b.NotificationType NOT IN (10, 20) AND
        c.TopicID = @TopicID and
        (a.LastMail is null or a.LastMail < b.LastVisit) and
        not exists(select 1 from [dbo].[yaf_WatchTopic] x where x.UserID=b.UserID and x.TopicID=c.TopicID)

    update [dbo].[yaf_WatchTopic] set LastMail = @UTCTIMESTAMP
    where TopicID = @TopicID
    and UserID <> @UserID
    
    update [dbo].[yaf_WatchForum] set LastMail = @UTCTIMESTAMP  
    where ForumID = (select ForumID from [dbo].[yaf_Topic] where TopicID = @TopicID)
    and UserID <> @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_mail_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_mail_delete](@MailID int) as
BEGIN
        DELETE FROM [dbo].[yaf_Mail] WHERE MailID = @MailID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_mail_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_mail_list]
(
    @ProcessID int,
    @UTCTIMESTAMP datetime
)
AS
begin
	declare @count int

	set @count = (select (count(*)/100) 
	              from [dbo].[yaf_Mail] 
				  where SendAttempt is null or SendAttempt < @UTCTIMESTAMP
				 )
	set @count = (select Case When @count < 10 Then 10 Else @count End)

	update [dbo].[yaf_Mail]
	set 
		SendTries = SendTries + 1,
		SendAttempt = DATEADD(n,5,@UTCTIMESTAMP),
		ProcessID = @ProcessID
	where
		MailID in (select top (@count) MailID 
		           from [dbo].[yaf_Mail] 
				   where SendAttempt is null or SendAttempt < @UTCTIMESTAMP)

	select top (@count) * 
	from [dbo].[yaf_Mail] 
	where ProcessID = @ProcessID 
	order by SendAttempt, Created desc

	delete from [dbo].[yaf_Mail] where ProcessID = @ProcessID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_mail_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_mail_save]
(
    @MailID int,
    @SendTries int,
    @SendAttempt datetime
)
AS 
BEGIN
    update [dbo].[yaf_Mail] set 
    SendAttempt = @SendAttempt,
    SendTries = @SendTries
    where MailID = @MailID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_medal_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[yaf_medal_delete]
    @BoardID	int = null,
    @MedalID	int = null,
    @Category	nvarchar(50) = null
as begin
    
    if not @MedalID is null begin
        delete from [dbo].[yaf_GroupMedal] where [MedalID] = @MedalID
        delete from [dbo].[yaf_UserMedal] where [MedalID] = @MedalID

        delete from [dbo].[yaf_Medal] where [MedalID]=@MedalID
    end
    else if not @Category is null and not @BoardID is null begin
        delete from [dbo].[yaf_GroupMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [Category]=@Category and [BoardID]=@BoardID)

        delete from [dbo].[yaf_UserMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [Category]=@Category and [BoardID]=@BoardID)

        delete from [dbo].[yaf_Medal] where [Category]=@Category
    end
    else if not @BoardID is null begin
        delete from [dbo].[yaf_GroupMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [BoardID]=@BoardID)

        delete from [dbo].[yaf_UserMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [BoardID]=@BoardID)

        delete from [dbo].[yaf_Medal] where [BoardID]=@BoardID
    end

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_medal_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[yaf_medal_list]
    @BoardID	int = null,
    @MedalID	int = null,
    @Category	nvarchar(50) = null
as begin
        if not @MedalID is null begin
        select 
            * 
        from 
            [dbo].[yaf_Medal] 
        where 
            [MedalID]=@MedalID 
        order by 
            [Category] asc, 
            [SortOrder] asc
    end
    else if not @Category is null and not @BoardID is null begin
        select 
            * 
        from 
            [dbo].[yaf_Medal] 
        where 
            [Category]=@Category and [BoardID]=@BoardID
        order by 
            [Category] asc, 
            [SortOrder] asc
    end
    else if not @BoardID is null begin
        select 
            * 
        from 
            [dbo].[yaf_Medal] 
        where 
            [BoardID]=@BoardID
        order by 
            [Category] asc, 
            [SortOrder] asc
    end

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_medal_listusers]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[yaf_medal_listusers]
    @MedalID	int
as begin
        (select 
        a.UserID, a.Name
    from 
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserMedal] b on a.[UserID] = b.[UserID]
    where
        b.[MedalID]=@MedalID) 
    
    union	

    (select 
        a.UserID, a.Name
    from 
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on a.[UserID] = b.[UserID]
        inner join [dbo].[yaf_GroupMedal] c on b.[GroupID] = c.[GroupID]
    where
        c.[MedalID]=@MedalID) 


end
GO
/****** Object:  StoredProcedure [dbo].[yaf_medal_resort]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_medal_resort]
    @BoardID int,@MedalID int,@Move int
as
begin
        declare @Position int
    declare @Category nvarchar(50)

    select 
        @Position=[SortOrder],
        @Category=[Category]
    from 
        [dbo].[yaf_Medal] 
    where 
        [BoardID]=@BoardID and [MedalID]=@MedalID

    if (@Position is null) return

    if (@Move > 0) begin
        update 
            [dbo].[yaf_Medal]
        set 
            [SortOrder]=[SortOrder]-1
        where 
            [BoardID]=@BoardID and 
            [Category]=@Category and
            [SortOrder] between @Position and (@Position + @Move) and
            [SortOrder] between 1 and 255
    end
    else if (@Move < 0) begin
        update 
            [dbo].[yaf_Medal]
        set
            [SortOrder]=[SortOrder]+1
        where 
            BoardID=@BoardID and 
            [Category]=@Category and
            [SortOrder] between (@Position+@Move) and @Position and
            [SortOrder] between 0 and 254
    end

    SET @Position = @Position + @Move

    if (@Position>255) SET @Position = 255
    else if (@Position<0) SET @Position = 0

    update [dbo].[yaf_Medal]
        set [SortOrder]=@Position
        where [BoardID]=@BoardID and 
            [MedalID]=@MedalID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_medal_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[yaf_medal_save]
    @BoardID int = NULL,
    @MedalID int = NULL,
    @Name nvarchar(100),
    @Description ntext,
    @Message nvarchar(100),
    @Category nvarchar(50) = NULL,
    @MedalURL nvarchar(250),
    @RibbonURL nvarchar(250) = NULL,
    @SmallMedalURL nvarchar(250),
    @SmallRibbonURL nvarchar(250) = NULL,
    @SmallMedalWidth smallint,
    @SmallMedalHeight smallint,
    @SmallRibbonWidth smallint = NULL,
    @SmallRibbonHeight smallint = NULL,
    @SortOrder tinyint = 255,
    @Flags int = 0
as begin
        if @MedalID is null begin
        insert into [dbo].[yaf_Medal]
            ([BoardID],[Name],[Description],[Message],[Category],
            [MedalURL],[RibbonURL],[SmallMedalURL],[SmallRibbonURL],
            [SmallMedalWidth],[SmallMedalHeight],[SmallRibbonWidth],[SmallRibbonHeight],
            [SortOrder],[Flags])
        values
            (@BoardID,@Name,@Description,@Message,@Category,
            @MedalURL,@RibbonURL,@SmallMedalURL,@SmallRibbonURL,
            @SmallMedalWidth,@SmallMedalHeight,@SmallRibbonWidth,@SmallRibbonHeight,
            @SortOrder,@Flags)

        select @@rowcount
    end
    else begin
        update [dbo].[yaf_Medal]
            set [BoardID] = BoardID,
                [Name] = @Name,
                [Description] = @Description,
                [Message] = @Message,
                [Category] = @Category,
                [MedalURL] = @MedalURL,
                [RibbonURL] = @RibbonURL,
                [SmallMedalURL] = @SmallMedalURL,
                [SmallRibbonURL] = @SmallRibbonURL,
                [SmallMedalWidth] = @SmallMedalWidth,
                [SmallMedalHeight] = @SmallMedalHeight,
                [SmallRibbonWidth] = @SmallRibbonWidth,
                [SmallRibbonHeight] = @SmallRibbonHeight,
                [SortOrder] = @SortOrder,
                [Flags] = @Flags
        where [MedalID] = @MedalID

        select @@rowcount
    end

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_addthanks]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*****************************************************************************************************************************/
/***** BEGIN CREATE PROCEDURES ******/
/*****************************************************************************************************************************/

/* Procedures for "Thanks" Mod */
CREATE PROCEDURE [dbo].[yaf_message_addthanks] 
    @FromUserID int,
    @MessageID int,
    @UTCTIMESTAMP datetime,
    @UseDisplayName bit=0,
    @paramOutput nvarchar(255) = null out
AS
BEGIN
IF not exists (SELECT top 1 ThanksID FROM [dbo].[yaf_Thanks] WHERE (MessageID = @MessageID AND ThanksFromUserID=@FromUserID))
BEGIN
DECLARE @ToUserID int
    SET @ToUserID = (SELECT UserID FROM [dbo].[yaf_Message] WHERE (MessageID = @MessageID))
    INSERT INTO [dbo].[yaf_Thanks] (ThanksFromUserID, ThanksToUserID, MessageID, ThanksDate) Values 
                                (@FromUserID, @ToUserId, @MessageID, @UTCTIMESTAMP )
    
    IF @UseDisplayName = 1
            SET @paramOutput = (SELECT [DisplayName] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
    ELSE
            SET @paramOutput = (SELECT [Name] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
END
ELSE
    SET @paramOutput = ''
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_approve]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_message_approve](@MessageID int) as begin
    
    declare	@UserID		int
    declare	@ForumID	int
    declare	@TopicID	int
    declare	@Flags	    int
    declare @Posted		datetime
    declare	@UserName	nvarchar(255)
    declare	@UserDisplayName	nvarchar(255)
    select 
        @UserID = a.UserID,
        @TopicID = a.TopicID,
        @ForumID = b.ForumID,
        @Posted = a.Posted,
        @UserName = a.UserName,
        @UserDisplayName = a.UserDisplayName,
        @Flags	= a.Flags
    from
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
    where
        a.MessageID = @MessageID

    -- update Message table, set meesage flag to approved
    update [dbo].[yaf_Message] set Flags = Flags | 16 where MessageID = @MessageID

    -- update User table to increase postcount
    if exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
    begin
        update [dbo].[yaf_User] set NumPosts = NumPosts + 1 where UserID = @UserID
        -- upgrade user, i.e. promote rank if conditions allow it
        exec [dbo].[yaf_user_upgrade] @UserID
    end

    -- update Forum table with last topic/post info
    update [dbo].[yaf_Forum] set
        LastPosted = @Posted,
        LastTopicID = @TopicID,
        LastMessageID = @MessageID,
        LastUserID = @UserID,
        LastUserName = @UserName,
        LastUserDisplayName = @UserDisplayName
    where ForumID = @ForumID

    -- update Topic table with info about last post in topic
    update [dbo].[yaf_Topic] set
        LastPosted = @Posted,
        LastMessageID = @MessageID,
        LastUserID = @UserID,
        LastUserName = @UserName,
        LastUserDisplayName = @UserDisplayName,		
        LastMessageFlags = @Flags | 16,
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @TopicID
    
    -- update forum stats
    exec [dbo].[yaf_forum_updatestats] @ForumID	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_message_delete](@MessageID int, @EraseMessage bit = 0) as
begin
    
    declare @TopicID		int
    declare @ForumID		int
    declare @MessageCount	int
    declare @LastMessageID	int
    declare @UserID			int
	declare @ReplyToID      int

    -- Find TopicID and ForumID
    select @TopicID=b.TopicID,@ForumID=b.ForumID,@UserID = a.UserID 
        from 
            [dbo].[yaf_Message] a
            inner join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
        where
            a.MessageID=@MessageID
   

    -- Update LastMessageID in Topic
    update [dbo].[yaf_Topic] set 
        LastPosted = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null,
        LastMessageFlags = null
    where LastMessageID = @MessageID

    -- Update LastMessageID in Forum
    update [dbo].[yaf_Forum] set 
        LastPosted = null,
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

    -- should it be physically deleter or not?
    if (@EraseMessage = 1) begin
        delete [dbo].[yaf_Attachment] where MessageID = @MessageID
        delete [dbo].[yaf_MessageReportedAudit] where MessageID = @MessageID
        delete [dbo].[yaf_MessageReported] where MessageID = @MessageID        
        --delete thanks related to this message
        delete [dbo].[yaf_Thanks] where MessageID = @MessageID
        delete [dbo].[yaf_MessageHistory] where MessageID = @MessageID

		-- update message positions inside the topic
		declare @Posted datetime = (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID)
		
		update [dbo].[yaf_Message] 
		    set Position = Position-1
		where    
		    TopicID = @TopicID and Posted > @Posted and MessageID != @MessageID

		-- update ReplyTo
		set	@ReplyToID = (select 
		                      MessageID
						  from
						      [dbo].[yaf_Message]
                          where     
						      TopicID = @TopicID and Position = 0 and MessageID != @MessageID
					     )

		update 
		    [dbo].[yaf_Message] 
	        set ReplyTo = @ReplyToID
        where
		    TopicID = @TopicID and ReplyTo = @MessageID

	    -- fix Reply To if equal with MessageID
		update 
		    [dbo].[yaf_Message] 
	        set ReplyTo = NULL
        where
		    TopicID = @TopicID and MessageID = @ReplyToID

	    -- finally delete the message we want to delete
        delete 
		    [dbo].[yaf_Message] 
		where 
		    MessageID = @MessageID
        
    end
    else begin
        -- "Delete" it only by setting deleted flag message
        update [dbo].[yaf_Message] set Flags = Flags | 8 where MessageID = @MessageID
    end
    
    -- update user post count
    if exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
    begin
	     UPDATE [dbo].[yaf_User] SET NumPosts = (SELECT count(MessageID) FROM [dbo].[yaf_Message] WHERE UserID = @UserID AND IsDeleted = 0 AND IsApproved = 1) WHERE UserID = @UserID
    end
    
    -- Delete topic if there are no more messages
    select @MessageCount = count(1) from [dbo].[yaf_Message] where TopicID = @TopicID and IsDeleted=0
    if @MessageCount=0 exec [dbo].[yaf_topic_delete] @TopicID, 1, @EraseMessage

    -- update lastpost
    exec [dbo].[yaf_topic_updatelastpost] @ForumID,@TopicID
    exec [dbo].[yaf_forum_updatestats] @ForumID

    -- update topic numposts
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @TopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_deleteundelete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_message_deleteundelete](@MessageID int, @isModeratorChanged bit, @DeleteReason nvarchar(100), @isDeleteAction int) as
begin
    
    declare @TopicID		int
    declare @ForumID		int
    declare @MessageCount	int
    declare @LastMessageID	int
    declare @UserID			int

    -- Find TopicID and ForumID
    select @TopicID=b.TopicID,@ForumID=b.ForumID,@UserID = a.UserID 
    from 
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
    where 
        a.MessageID=@MessageID

    -- Update LastMessageID in Topic and Forum
    update [dbo].[yaf_Topic] set
        LastPosted = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null,
        LastMessageFlags = null
    where LastMessageID = @MessageID

    update [dbo].[yaf_Forum] set
        LastPosted = null,
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

    -- "Delete" message
    update [dbo].[yaf_Message]
     set IsModeratorChanged = @isModeratorChanged, DeleteReason = @DeleteReason, Flags = Flags ^ 8
     where MessageID = @MessageID and ((Flags & 8) <> @isDeleteAction*8)
    
    -- update num posts for user now that the delete/undelete status has been toggled...
    if exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
    begin
	    UPDATE [dbo].[yaf_User] SET NumPosts = (SELECT count(MessageID) FROM [dbo].[yaf_Message] WHERE UserID = @UserID AND IsDeleted = 0 AND IsApproved = 1) WHERE UserID = @UserID
	end

    -- Delete topic if there are no more messages
    select @MessageCount = count(1) from [dbo].[yaf_Message] where TopicID = @TopicID and IsDeleted=0
    if @MessageCount=0 exec [dbo].[yaf_topic_delete] @TopicID
    -- update lastpost
    exec [dbo].[yaf_topic_updatelastpost] @ForumID,@TopicID
    exec [dbo].[yaf_forum_updatestats] @ForumID
    -- update topic numposts
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0 )
    where TopicID = @TopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_findunread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_message_findunread](
@TopicID int,
@MessageID int,
@LastRead datetime,
@MinDateTime datetime,
@ShowDeleted bit = 0,
@AuthorUserID int) as
begin
   declare @MessagePosition int

   if (@MessageID > 0)
   begin
   select top 1 @MessagePosition = CONVERT(int,RowNum), @MessageID = tbl.MessageID  from 
   (
   select ROW_NUMBER() OVER ( order by Posted desc) as RowNum, m.MessageID
   from [dbo].[yaf_Message] m  
   where m.TopicID = @TopicID			
        AND m.IsApproved = 1
        AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))        
   ) as tbl
   where tbl.MessageID = @MessageID
   order by tbl.RowNum ASC;
   end
-- a message with the id was not found or we are looking for first unread or last post 
  if (@MessageID <= 0)
   begin  
   -- if value > yaf db min value (1-1-1903) we are looking for first unread 
   if (@LastRead > @MinDateTime)  
   begin
   select top 1 @MessagePosition = CONVERT(int,RowNum), @MessageID = tbl.MessageID  from 
   (
   select ROW_NUMBER() OVER ( order by m.Posted asc) as RowNum, m.MessageID, m.Posted
   from [dbo].[yaf_Message] m  
   where m.TopicID = @TopicID			
        AND m.IsApproved = 1
        AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))		     
   ) as tbl
   where tbl.Posted > @LastRead 
   order by tbl.RowNum ASC;
   end
   -- if first unread was not found or we looking for last posted 
   if (@LastRead < @MinDateTime OR @MessagePosition IS NULL) 
   begin    
        select top 1 @MessageID = m.MessageID, @MessagePosition = 1
    from
        [dbo].[yaf_Message] m	
    where
        m.TopicID = @TopicID			
        AND m.IsApproved = 1
       AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))
    order by		
        m.Posted DESC;    
    end

	 select top 1 @MessagePosition = CONVERT(int,RowNum), @MessageID = tbl.MessageID  from 
   (
   select ROW_NUMBER() OVER ( order by Posted desc) as RowNum, m.MessageID
   from [dbo].[yaf_Message] m  
   where m.TopicID = @TopicID			
        AND m.IsApproved = 1
        AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))        
   ) as tbl
   where tbl.MessageID = @MessageID
   order by tbl.RowNum ASC;
end
  
select @MessageID as MessageID, @MessagePosition as MessagePosition;
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_getallthanks]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_getallthanks] 
    @MessageIDs varchar(max)
AS
BEGIN
-- vzrus says: the server version > 2000 ntext works too slowly with substring in the 2005 
DECLARE @ParsedMessageIDs TABLE
      (
            MessageID int
      )
      
DECLARE @MessageID varchar(11), @Pos INT      

SET @Pos = CHARINDEX(',', @MessageIDs, 1)
-- check here if the value is not empty
IF REPLACE(@MessageIDs, ',', '') <> ''
BEGIN
 WHILE @Pos > 0
                  BEGIN
                        SET @MessageID = LTRIM(RTRIM(LEFT(@MessageIDs, @Pos - 1)))
                        IF @MessageID <> ''
                        BEGIN
                              INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageID AS int)) --Use Appropriate conversion
                        END
                        SET @MessageIDs = RIGHT(@MessageIDs, LEN(@MessageIDs) - @Pos)
                        SET @Pos = CHARINDEX(',', @MessageIDs, 1)
                  END
                     -- to be sure that last value is inserted
                    IF (LEN(@MessageIDs) > 0)
                           INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageIDs AS int)) 
END 
    SELECT a.MessageID, b.ThanksFromUserID AS FromUserID, b.ThanksDate,
    (SELECT COUNT(ThanksID) FROM [dbo].[yaf_Thanks] b WHERE b.ThanksFromUserID=d.UserID) AS ThanksFromUserNumber,
    (SELECT COUNT(ThanksID) FROM [dbo].[yaf_Thanks] b WHERE b.ThanksToUserID=d.UserID) AS ThanksToUserNumber,
    (SELECT COUNT(DISTINCT(MessageID)) FROM [dbo].[yaf_Thanks] b WHERE b.ThanksToUserID=d.UserID) AS ThanksToUserPostsNumber
    FROM @ParsedMessageIDs a
    INNER JOIN [dbo].[yaf_Message] d ON (d.MessageID=a.MessageID)
    LEFT JOIN [dbo].[yaf_Thanks] b ON (b.MessageID = a.MessageID)
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_getReplies]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_getReplies](@MessageID int) as
BEGIN
    SELECT MessageID FROM [dbo].[yaf_Message] WHERE ReplyTo = @MessageID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_GetTextByIds]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_GetTextByIds] (@MessageIDs varchar(max))
AS 
    BEGIN
    -- vzrus says: the server version > 2000 ntext works too slowly with substring in the 2005 
    DECLARE @ParsedMessageIDs TABLE
          (
                MessageID int
          )
      
    DECLARE @MessageID varchar(11), @Pos INT      

    SET @Pos = CHARINDEX(',', @MessageIDs, 1)

    -- check here if the value is not empty
    IF REPLACE(@MessageIDs, ',', '') <> ''
    BEGIN
        WHILE @Pos > 0
        BEGIN
            SET @MessageID = LTRIM(RTRIM(LEFT(@MessageIDs, @Pos - 1)))
            IF @MessageID <> ''
            BEGIN
                  INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageID AS int)) --Use Appropriate conversion
            END
            SET @MessageIDs = RIGHT(@MessageIDs, LEN(@MessageIDs) - @Pos)
            SET @Pos = CHARINDEX(',', @MessageIDs, 1)
        END
        -- to be sure that last value is inserted
        IF (LEN(@MessageIDs) > 0)
               INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageIDs AS int)) 
        END 

        SELECT a.MessageID, d.Message
            FROM @ParsedMessageIDs a
            INNER JOIN [dbo].[yaf_Message] d ON (d.MessageID = a.MessageID)
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_getthanks]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_getthanks] 
    @MessageID int
AS
BEGIN
    SELECT a.ThanksFromUserID as UserID, a.ThanksDate, b.Name, b.DisplayName
    FROM [dbo].[yaf_Thanks] a 
    Inner Join [dbo].[yaf_User] b
    ON (a.ThanksFromUserID = b.UserID) WHERE (MessageID=@MessageID)
    ORDER BY a.ThanksDate DESC
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_list](@MessageID int) AS
BEGIN
        SELECT
        a.MessageID,
        a.UserID,
        UserName = b.Name,
        UserDisplayName = b.DisplayName,
        a.[Message],
        c.TopicID,
        c.ForumID,
        c.Topic,
        c.Priority,
        c.Description,
        c.Status,
        c.Styles,
        a.Flags,
        c.UserID AS TopicOwnerID,
        Edited = IsNull(a.Edited,a.Posted),
        TopicFlags = c.Flags,
        ForumFlags = d.Flags,
        a.EditReason,
        a.Position,
        a.IsModeratorChanged,
        a.DeleteReason,
        a.BlogPostID,
        c.PollID,
        a.IP,
        a.ReplyTo,
        a.ExternalMessageId,
        a.ReferenceMessageId,
        HasAttachments	= convert(bit,ISNULL((select top 1 1 from [dbo].[yaf_Attachment] x where x.MessageID=a.MessageID),0))
    FROM
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] c on c.TopicID = a.TopicID
        inner join [dbo].[yaf_Forum] d on c.ForumID = d.ForumID
    WHERE
        a.MessageID = @MessageID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_listreported]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_listreported](@ForumID int) AS
BEGIN
        SELECT
        a.*,
        OriginalMessage = b.[Message],
        b.[Flags],
        b.[IsModeratorChanged],	
        UserName	= IsNull(b.UserName,d.Name),
        UserDisplayName	= IsNull(b.UserDisplayName,d.DisplayName),
        UserID = b.UserID,
        Posted		= b.Posted,
        TopicID = b.TopicID,
        Topic		= c.Topic,		
        NumberOfReports = (SELECT count(LogID) FROM [dbo].[yaf_MessageReportedAudit] WHERE [dbo].[yaf_MessageReportedAudit].MessageID = a.MessageID)
    FROM
        [dbo].[yaf_MessageReported] a
    INNER JOIN
        [dbo].[yaf_Message] b ON a.MessageID = b.MessageID
    INNER JOIN
        [dbo].[yaf_Topic] c ON b.TopicID = c.TopicID
    INNER JOIN
        [dbo].[yaf_User] d ON b.UserID = d.UserID
    WHERE
        c.ForumID = @ForumID and
        (c.Flags & 16)=0 and
        b.IsDeleted=0 and
        c.IsDeleted=0 and
        (b.Flags & 128)=128
    ORDER BY
        b.TopicID DESC, b.Posted DESC
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_listreporters]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_listreporters](@MessageID int, @UserID int = null) AS
BEGIN
    IF ( @UserID > 0 )
    BEGIN
    SELECT b.UserID, UserName = a.Name,UserDisplayName = a.DisplayName, b.ReportedNumber, b.ReportText  
    FROM [dbo].[yaf_User] a,			
    [dbo].[yaf_MessageReportedAudit] b		
    WHERE   a.UserID = b.UserID  AND b.MessageID = @MessageID AND b.UserID = @UserID 
    END
    ELSE
    BEGIN
    SELECT b.UserID, UserName = a.Name,UserDisplayName = a.DisplayName, b.ReportedNumber, b.ReportText  
    FROM [dbo].[yaf_User] a,			
    [dbo].[yaf_MessageReportedAudit] b		
    WHERE   a.UserID = b.UserID  AND b.MessageID = @MessageID
    END
    
    
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_move]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_move] (@MessageID int, @MoveToTopic int) AS
BEGIN
    DECLARE
    @Position int,
    @ReplyToID int,
    @OldTopicID int,
    @OldForumID int

    
    declare @NewForumID		int
    declare @MessageCount	int
    declare @LastMessageID	int

    -- Find TopicID and ForumID
--	select @OldTopicID=b.TopicID,@ForumID=b.ForumID from [dbo].[yaf_Message] a,yaf_Topic b where a.MessageID=@MessageID and b.TopicID=a.TopicID

SET 	@NewForumID = (SELECT     ForumID
                FROM         [dbo].[yaf_Topic]
                WHERE     (TopicID = @MoveToTopic))


SET 	@OldTopicID = 	(SELECT     TopicID
                FROM         [dbo].[yaf_Message]
                WHERE     (MessageID = @MessageID))

SET 	@OldForumID = (SELECT     ForumID
                FROM         [dbo].[yaf_Topic]
                WHERE     (TopicID = @OldTopicID))

SET	@ReplyToID = (SELECT     MessageID
            FROM         [dbo].[yaf_Message]
            WHERE     ([Position] = 0) AND (TopicID = @MoveToTopic))

SET	@Position = 	(SELECT     MAX([Position]) + 1 AS Expr1
            FROM         [dbo].[yaf_Message]
            WHERE     (TopicID = @MoveToTopic) and Posted < (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID ) )

if @Position is null  set @Position = 0

update [dbo].[yaf_Message] set
        Position = Position+1
     WHERE     (TopicID = @MoveToTopic) and Posted > (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID)

update [dbo].[yaf_Message] set
        Position = Position-1
     WHERE     (TopicID = @OldTopicID) and Posted > (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID)

    


    -- Update LastMessageID in Topic and Forum
    update [dbo].[yaf_Topic] set
        LastPosted = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastMessageFlags = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

    update [dbo].[yaf_Forum] set
        LastPosted = null,
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

	if (@Position = 0) 
	begin
	    update [dbo].[yaf_Message] set
		    ReplyTo = @MessageID
        WHERE  
		    TopicID = @MoveToTopic and ReplyTo is NULL

		set @ReplyToID = NULL
    end

    UPDATE [dbo].[yaf_Message] SET
    TopicID = @MoveToTopic,
    ReplyTo = @ReplyToID,
    [Position] = @Position
    WHERE  MessageID = @MessageID

    -- Delete topic if there are no more messages
    select @MessageCount = count(1) from [dbo].[yaf_Message] where TopicID = @OldTopicID and IsDeleted=0
    if @MessageCount=0 exec [dbo].[yaf_topic_delete] @OldTopicID

    -- update lastpost
    exec [dbo].[yaf_topic_updatelastpost] @OldForumID,@OldTopicID
    exec [dbo].[yaf_topic_updatelastpost] @NewForumID,@MoveToTopic

    -- update topic numposts
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @OldTopicID
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @MoveToTopic

    exec [dbo].[yaf_forum_updatelastpost] @NewForumID
    exec [dbo].[yaf_forum_updatestats] @NewForumID
    exec [dbo].[yaf_forum_updatelastpost] @OldForumID
    exec [dbo].[yaf_forum_updatestats] @OldForumID

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_removethanks]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_removethanks] 
    @FromUserID int,
    @MessageID int,
    @UseDisplayName bit=0,
    @paramOutput nvarchar(255) = null out
AS
BEGIN
    DELETE FROM [dbo].[yaf_Thanks] WHERE (ThanksFromUserID=@FromUserID AND MessageID=@MessageID)
    DECLARE @ToUserID int
    SET @ToUserID = (SELECT UserID FROM [dbo].[yaf_Message] WHERE (MessageID = @MessageID))
    IF @UseDisplayName = 1
            SET @paramOutput = (SELECT [DisplayName] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
    ELSE
            SET @paramOutput = (SELECT [Name] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_reply_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_message_reply_list](@MessageID int) as
begin
        set nocount on
    select
        a.MessageID,
        a.UserID,
        UserName = b.Name,
        UserDisplayName = b.DisplayName,
        a.Posted,
        a.[Message],
        c.TopicID,
        c.ForumID,
        c.Topic,
        c.Priority,
        c.Description,
        c.Status,
        c.Styles,
        a.Flags,
        c.UserID AS TopicOwnerID,
        Edited = IsNull(a.Edited,a.Posted),
        a.EditReason,
        a.Position,
        a.Indent,
        a.IsModeratorChanged,
        a.DeleteReason,
        a.BlogPostID,
        c.PollID,
        a.IP,
        a.ReplyTo,
        a.ExternalMessageId,
        a.ReferenceMessageId
    from
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] c on c.TopicID = a.TopicID
    where
        a.IsApproved = 1 and
        a.ReplyTo = @MessageID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_report]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_report](@MessageID int, @ReporterID int, @ReportedDate datetime, @ReportText nvarchar(4000),@UTCTIMESTAMP datetime) AS
BEGIN
    IF @ReportText IS NULL SET @ReportText = '';
    IF NOT exists(SELECT MessageID FROM [dbo].[yaf_MessageReported] WHERE MessageID=@MessageID)
    BEGIN
        INSERT INTO [dbo].[yaf_MessageReported](MessageID, [Message])
        SELECT 
            a.MessageID,
            a.[Message]
        FROM
            [dbo].[yaf_Message] a
        WHERE
            a.MessageID = @MessageID
    END	
    IF NOT exists(SELECT MessageID from [dbo].[yaf_MessageReportedAudit] WHERE MessageID=@MessageID AND UserID=@ReporterID)
        INSERT INTO [dbo].[yaf_MessageReportedAudit](MessageID,UserID,Reported,ReportText) VALUES (@MessageID,@ReporterID,@ReportedDate, CONVERT(varchar,@UTCTIMESTAMP )+ '??' + @ReportText)
    ELSE 
        UPDATE [dbo].[yaf_MessageReportedAudit] SET ReportedNumber = ( CASE WHEN ReportedNumber < 2147483647 THEN  ReportedNumber  + 1 ELSE ReportedNumber END ), Reported = @ReportedDate, ReportText = (CASE WHEN (LEN(ReportText) + LEN(@ReportText) + 255 < 4000)  THEN  ReportText + '|' + CONVERT(varchar(36),@UTCTIMESTAMP )+ '??' +  @ReportText ELSE ReportText END) WHERE MessageID=@MessageID AND UserID=@ReporterID 
    

    -- update Message table to set message with flag Reported
    UPDATE [dbo].[yaf_Message] SET Flags = Flags | 128 WHERE MessageID = @MessageID

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_reportcopyover]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_reportcopyover](@MessageID int) AS
BEGIN
        UPDATE [dbo].[yaf_MessageReported]
    SET [dbo].[yaf_MessageReported].[Message] = m.[Message]
    FROM [dbo].[yaf_MessageReported] mr
    JOIN [dbo].[yaf_Message] m ON m.MessageID = mr.MessageID
    WHERE mr.MessageID = @MessageID;
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_reportresolve]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_reportresolve](@MessageFlag int, @MessageID int, @UserID int,@UTCTIMESTAMP datetime) AS
BEGIN
    
    UPDATE [dbo].[yaf_MessageReported]
    SET Resolved = 1, ResolvedBy = @UserID, ResolvedDate = @UTCTIMESTAMP 
    WHERE MessageID = @MessageID;
    
    /* Remove Flag */
    UPDATE [dbo].[yaf_Message]
    SET Flags = Flags & (~POWER(2, @MessageFlag))
    WHERE MessageID = @MessageID;
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_save](
    @TopicID		int,
    @UserID			int,
    @Message		ntext,	
    @UserName		nvarchar(255)=null,
    @IP				varchar(39),
    @Posted			datetime=null,
    @ReplyTo		int,
    @BlogPostID		nvarchar(50) = null,
    @ExternalMessageId nvarchar(255) = null,
    @ReferenceMessageId nvarchar(255) = null,
    @Flags			int,
    @UTCTIMESTAMP datetime,	
    @MessageID		int output
)
AS
BEGIN
        DECLARE @ForumID INT, @ForumFlags INT, @Position INT, @Indent INT, @OverrideDisplayName BIT, @ReplaceName nvarchar(255) 

    IF @Posted IS NULL
        SET @Posted = @UTCTIMESTAMP 

    SELECT @ForumID = x.ForumID, @ForumFlags = y.Flags
    FROM 
        [dbo].[yaf_Topic] x
    INNER JOIN 
        [dbo].[yaf_Forum] y ON y.ForumID=x.ForumID
    WHERE x.TopicID = @TopicID 

    IF @ReplyTo IS NULL
            SELECT @Position = 0, @Indent = 0 -- New thread

    ELSE IF @ReplyTo<0
        -- Find post to reply to AND indent of this post
        SELECT TOP 1 @ReplyTo = MessageID, @Indent = Indent+1
        FROM [dbo].[yaf_Message]
        WHERE TopicID = @TopicID AND ReplyTo IS NULL
        ORDER BY Posted

    ELSE
        -- Got reply, find indent of this post
            SELECT @Indent=Indent+1
            FROM [dbo].[yaf_Message]
            WHERE MessageID=@ReplyTo

    -- Find position
    IF @ReplyTo IS NOT NULL
    BEGIN
        DECLARE @temp INT
        
        SELECT @temp=ReplyTo,@Position=Position FROM [dbo].[yaf_Message] WHERE MessageID=@ReplyTo

        IF @temp IS NULL
            -- We are replying to first post
            SELECT @Position=MAX(Position)+1 FROM [dbo].[yaf_Message] WHERE TopicID=@TopicID

        ELSE
            -- Last position of replies to parent post
            SELECT @Position=MIN(Position) FROM [dbo].[yaf_Message] WHERE ReplyTo=@temp AND Position>@Position

        -- No replies, THEN USE parent post's position+1
        IF @Position IS NULL
            SELECT @Position=Position+1 FROM [dbo].[yaf_Message] WHERE MessageID=@ReplyTo
        -- Increase position of posts after this

        UPDATE [dbo].[yaf_Message] SET Position=Position+1 WHERE TopicID=@TopicID AND Position>=@Position
    END

	-- Add points to Users total reputation points
 	UPDATE [dbo].[yaf_User] SET Points = Points + 3 WHERE UserID = @UserID
    
	-- this check is for guest user only to not override replace name 
    if (SELECT Name FROM [dbo].[yaf_User] WHERE UserID = @UserID) != @UserName
    begin
    SET @OverrideDisplayName = 1
    end
    SET @ReplaceName = (CASE WHEN @OverrideDisplayName = 1 THEN @UserName ELSE (SELECT DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID) END);
    INSERT [dbo].[yaf_Message] ( UserID, [Message], TopicID, Posted, UserName, UserDisplayName, IP, ReplyTo, Position, Indent, Flags, BlogPostID, ExternalMessageId, ReferenceMessageId)
    VALUES ( @UserID, @Message, @TopicID, @Posted, @UserName,@ReplaceName, @IP, @ReplyTo, @Position, @Indent, @Flags & ~16, @BlogPostID, @ExternalMessageId, @ReferenceMessageId)	
    
    SET @MessageID = SCOPE_IDENTITY()

    IF ((@Flags & 16) = 16)
        EXEC [dbo].[yaf_message_approve] @MessageID	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_secdata]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_secdata]( @PageUserID int, @MessageID int ) AS
BEGIN
-- BoardID=@BoardID and
if (@PageUserID is null)
select top 1 @PageUserID = UserID from [dbo].[yaf_User] where  (Flags & 4)<>0 ORDER BY Joined DESC
SELECT
        m.MessageID,
        m.UserID,
        IsNull(t.UserName, u.Name) as Name,
        IsNull(t.UserDisplayName, u.DisplayName) as DisplayName,
        m.[Message],
        m.Posted,
        t.TopicID,
        t.ForumID,
        t.Topic,
        t.Priority,
        m.Flags,
        t.UserID,
        Edited = IsNull(m.Edited,m.Posted),
        EditedBy = IsNull(m.EditedBy,m.UserID), 
        TopicFlags = t.Flags,		
        m.EditReason,
        m.Position,
        m.IsModeratorChanged,
        m.DeleteReason,
        m.BlogPostID,
        t.PollID,
        m.IP
    FROM		
        [dbo].[yaf_Topic] t 
        join  [dbo].[yaf_Message] m ON m.TopicID = t.TopicID
        join  [dbo].[yaf_User] u ON u.UserID = t.UserID
        left join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=IsNull(t.ForumID,0)
    WHERE
        m.MessageID = @MessageID AND x.UserID=@PageUserID  AND  CONVERT(int,x.ReadAccess) > 0
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_simplelist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 1000)
AS
    BEGIN
        SET ARITHABORT ON       
        SELECT TOP(@Limit)  m.[MessageID],
                 m.[TopicID]
        FROM     [dbo].[yaf_Message] m
        WHERE    m.[MessageID] >= @StartID
        AND m.[MessageID] < (@StartID + @Limit)
        AND m.[TopicID] IS NOT NULL
        ORDER BY m.[MessageID]   
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_thanksnumber]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_message_thanksnumber] 
    @MessageID int
AS
BEGIN
RETURN (SELECT Count(1) from [dbo].[yaf_Thanks] WHERE (MessageID=@MessageID))
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_unapproved]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_message_unapproved](@ForumID int) as begin
        select
        MessageID	= b.MessageID,
        UserID		= b.UserID,
        UserName	= IsNull(b.UserName,c.Name),
        UserDisplayName = IsNull(b.UserDisplayName, c.DisplayName),		
        Posted		= b.Posted,
        TopicID		= a.TopicID,
        Topic		= a.Topic,
        MessageCount = a.NumPosts,
        [Message]	= b.[Message],
        [Flags]		= b.Flags,
        [IsModeratorChanged] = b.IsModeratorChanged
    from
        [dbo].[yaf_Topic] a
        inner join [dbo].[yaf_Message] b on b.TopicID = a.TopicID
        inner join [dbo].[yaf_User] c on c.UserID = b.UserID
    where
        a.ForumID = @ForumID and
        b.IsApproved=0 and
        a.IsDeleted =0 and
        b.IsDeleted=0
    order by
        a.Posted
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_message_update]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_message_update](
@MessageID int,
@Priority int,
@Subject nvarchar(100),
@Description nvarchar(255),
@Status nvarchar(255),
@Styles nvarchar(255),
@Flags int, 
@Message ntext, 
@Reason nvarchar(100), 
@EditedBy int,
@IsModeratorChanged bit, 
@OverrideApproval bit = null,
@OriginalMessage ntext,
@CurrentUtcTimestamp datetime) as
begin
        declare @TopicID	int
    declare	@ForumFlags	int

    set @Flags = @Flags & ~16	
    
    select 
        @TopicID	= a.TopicID,
        @ForumFlags	= c.Flags
    from 
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
        inner join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
    where 
        a.MessageID = @MessageID

    if (@OverrideApproval = 1 OR (@ForumFlags & 8)=0) set @Flags = @Flags | 16

	-- save original message in the history if this is the first edit
	if not exists(select 1 from [dbo].[yaf_MessageHistory] where MessageID=@MessageID)
	  begin
	    insert into [dbo].[yaf_MessageHistory] (MessageID,		
            [Message],
            IP,
            Edited,
            EditedBy,		
            EditReason,
            IsModeratorChanged,
            Flags)
            select MessageID, 
			       OriginalMessage=@OriginalMessage, 
				   IP,
				   Posted,
				   UserID,
				   NULL, 
				   IsModeratorChanged, 
				   Flags
		    from [dbo].[yaf_Message] where MessageID = @MessageID
	  end
	else
	 begin
	     -- insert current message variant - use OriginalMessage in future 	
        insert into [dbo].[yaf_MessageHistory]
        (MessageID,		
            [Message],
            IP,
            Edited,
            EditedBy,		
            EditReason,
            IsModeratorChanged,
            Flags)
        select 
        MessageID, OriginalMessage=@OriginalMessage, IP , @CurrentUtcTimestamp, IsNull(EditedBy,UserID), EditReason, IsModeratorChanged, Flags
        from [dbo].[yaf_Message] where MessageID = @MessageID
	 end
    
    
    
    
    update [dbo].[yaf_Message] set
        [Message] = @Message,
        Edited = @CurrentUtcTimestamp,
        EditedBy = @EditedBy,
        Flags = @Flags,
        IsModeratorChanged  = @IsModeratorChanged,
                EditReason = @Reason
    where
        MessageID = @MessageID

    if @Priority is not null begin
        update [dbo].[yaf_Topic] set
            Priority = @Priority
        where
            TopicID = @TopicID
    end

    if not @Subject = '' and @Subject is not null begin
        update [dbo].[yaf_Topic] set
            Topic = @Subject, 
            [Description] = @Description,
            [Status] = @Status,
            [Styles] = @Styles
        where
            TopicID = @TopicID
    end 
    
    -- If forum is moderated, make sure last post pointers are correct
    if (@ForumFlags & 8)<>0 exec [dbo].[yaf_topic_updatelastpost]
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_messagehistory_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_messagehistory_list] (@MessageID INT, @DaysToClean INT,
      @UTCTIMESTAMP datetime)
as 
    BEGIN             
     -- delete all message variants older then DaysToClean days Flags reserved for possible pms   
     delete from [dbo].[yaf_MessageHistory]
     where DATEDIFF(day,Edited,@UTCTIMESTAMP ) > @DaysToClean	
              
     SELECT mh.*, m.UserID, m.UserName, IsNull(m.UserDisplayName,(SELECT u.DisplayName FROM [dbo].[yaf_User] u where u.UserID = m.UserID)) AS UserDisplayName, t.ForumID, t.TopicID, t.Topic, m.Posted
     FROM [dbo].[yaf_MessageHistory] mh
     LEFT JOIN [dbo].[yaf_Message] m ON m.MessageID = mh.MessageID
     LEFT JOIN [dbo].[yaf_Topic] t ON t.TopicID = m.TopicID
     LEFT JOIN [dbo].[yaf_User] u ON u.UserID = t.UserID
     WHERE mh.MessageID = @MessageID
     order by mh.Edited, mh.MessageID
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntpforum_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntpforum_delete](@NntpForumID int) as
begin
        delete from [dbo].[yaf_NntpTopic] where NntpForumID = @NntpForumID
    delete from [dbo].[yaf_NntpForum] where NntpForumID = @NntpForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntpforum_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntpforum_list](@BoardID int,@Minutes int=null,@NntpForumID int=null,@Active bit=null,@UTCTIMESTAMP datetime) as
begin
        select
        a.Name,
        a.[Address],
        Port = IsNull(a.Port,119),
        a.UserName,
        a.UserPass,		
        a.NntpServerID,
        b.NntpForumID,		
        b.GroupName,
        b.ForumID,
        b.LastMessageNo,
        b.LastUpdate,
        b.Active,
        b.DateCutOff,
        ForumName = c.Name
    from
        [dbo].[yaf_NntpServer] a
        join [dbo].[yaf_NntpForum] b on b.NntpServerID = a.NntpServerID
        join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
    where
        (@Minutes is null or datediff(n,b.LastUpdate,@UTCTIMESTAMP )>@Minutes) and
        (@NntpForumID is null or b.NntpForumID=@NntpForumID) and
        a.BoardID=@BoardID and
        (@Active is null or b.Active=@Active)
    order by
        a.Name,
        b.GroupName
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntpforum_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntpforum_save](@NntpForumID int=null,@NntpServerID int,@GroupName nvarchar(100),@ForumID int,@Active bit,@DateCutOff datetime = null,@UTCTIMESTAMP datetime) as
begin
        if @NntpForumID is null
        insert into [dbo].[yaf_NntpForum](NntpServerID,GroupName,ForumID,LastMessageNo,LastUpdate,Active,DateCutOff)
        values(@NntpServerID,@GroupName,@ForumID,0,DATEADD(d,-1,@UTCTIMESTAMP),@Active,@DateCutOff)
    else
        update [dbo].[yaf_NntpForum] set
            NntpServerID = @NntpServerID,
            GroupName = @GroupName,
            ForumID = @ForumID,
            Active = @Active,
            DateCutOff = @DateCutOff
        where NntpForumID = @NntpForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntpforum_update]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntpforum_update](@NntpForumID int,@LastMessageNo int,@UserID int,@UTCTIMESTAMP datetime) as
begin
        declare	@ForumID	int
    
    select @ForumID=ForumID from [dbo].[yaf_NntpForum] where NntpForumID=@NntpForumID

    update [dbo].[yaf_NntpForum] set
        LastMessageNo = @LastMessageNo,
        LastUpdate = @UTCTIMESTAMP 
    where NntpForumID = @NntpForumID

    update [dbo].[yaf_Topic] set 
        NumPosts = (select count(1) from [dbo].[yaf_message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where ForumID=@ForumID

    --exec [dbo].[yaf_user_upgrade] @UserID
    exec [dbo].[yaf_forum_updatestats] @ForumID
    -- exec [dbo].[yaf_topic_updatelastpost] @ForumID,null
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntpserver_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntpserver_delete](@NntpServerID int) as
begin
        delete from [dbo].[yaf_NntpTopic] where NntpForumID in (select NntpForumID from [dbo].[yaf_NntpForum] where NntpServerID = @NntpServerID)
    delete from [dbo].[yaf_NntpForum] where NntpServerID = @NntpServerID
    delete from [dbo].[yaf_NntpServer] where NntpServerID = @NntpServerID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntpserver_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntpserver_list](@BoardID int=null,@NntpServerID int=null) as
begin
        if @NntpServerID is null
        select * from [dbo].[yaf_NntpServer] where BoardID=@BoardID order by Name
    else
        select * from [dbo].[yaf_NntpServer] where NntpServerID=@NntpServerID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntpserver_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntpserver_save](
    @NntpServerID 	int=null,
    @BoardID	int,
    @Name		nvarchar(50),
    @Address	nvarchar(100),
    @Port		int,
    @UserName	nvarchar(255)=null,
    @UserPass	nvarchar(50)=null
) as begin
        if @NntpServerID is null
        insert into [dbo].[yaf_NntpServer](Name,BoardID,Address,Port,UserName,UserPass)
        values(@Name,@BoardID,@Address,@Port,@UserName,@UserPass)
    else
        update [dbo].[yaf_NntpServer] set
            Name = @Name,
            [Address] = @Address,
            Port = @Port,
            UserName = @UserName,
            UserPass = @UserPass
        where NntpServerID = @NntpServerID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntptopic_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntptopic_list](@Thread nvarchar(64)) as
begin
        select
        a.*
    from
        [dbo].[yaf_NntpTopic] a
    where
        a.Thread = @Thread
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_nntptopic_savemessage]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_nntptopic_savemessage](
    @NntpForumID	int,
    @Topic 			nvarchar(100),
    @Body 			ntext,
    @UserID 		int,
    @UserName		nvarchar(255),
    @IP				varchar(39),
    @Posted			datetime,
    @ExternalMessageId	nvarchar(255),
    @ReferenceMessageId nvarchar(255) = null,
    @UTCTIMESTAMP datetime
) as 
begin
    declare	@ForumID	int
    declare @TopicID	int
    declare	@MessageID	int
    declare @ReplyTo	int
    
    SET @TopicID = NULL
    SET @ReplyTo = NULL

    select @ForumID = ForumID from [dbo].[yaf_NntpForum] where NntpForumID=@NntpForumID

    if exists(select 1 from [dbo].[yaf_Message] where ExternalMessageId = @ReferenceMessageId)
    begin
        -- referenced message exists
        select @TopicID = TopicID, @ReplyTo = MessageID from [dbo].[yaf_Message] where ExternalMessageId = @ReferenceMessageId
    end else
    if not exists(select 1 from [dbo].[yaf_Message] where ExternalMessageId = @ExternalMessageId)
    begin
        if (@ReferenceMessageId IS NULL)
        begin
            -- thread doesn't exists
            insert into [dbo].[yaf_Topic](ForumID,UserID,UserName, UserDisplayName,Posted,Topic,[Views],Priority,NumPosts)
            values (@ForumID,@UserID,@UserName, @UserName,@Posted,@Topic,0,0,0)
            set @TopicID=SCOPE_IDENTITY()

            insert into [dbo].[yaf_NntpTopic](NntpForumID,Thread,TopicID)
            values (@NntpForumID,'',@TopicID)
        end
    end
    
    IF @TopicID IS NOT NULL
    BEGIN
        exec [dbo].[yaf_message_save]  @TopicID, @UserID, @Body, @UserName, @IP, @Posted, @ReplyTo, NULL, @ExternalMessageId, @ReferenceMessageId, 17,@UTCTIMESTAMP, @MessageID OUTPUT
    END	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pageaccess]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_pageaccess](
    @BoardID int,
    @UserID	int,
    @IsGuest bit,
    @UTCTIMESTAMP datetime
) as
begin
    -- ensure that access right are in place		
        if not exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess] WITH(NOLOCK) 
            where UserID = @UserID )		
            begin
            insert into [dbo].[yaf_ActiveAccess](
            UserID,
            BoardID,
            ForumID,
            IsAdmin, 
            IsForumModerator,
            IsModerator,
            IsGuestX,
            LastActive, 
            ReadAccess,
            PostAccess,
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,	
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess)
            select 
            UserID, 
            @BoardID, 
            ForumID, 
            IsAdmin,
            IsForumModerator,
            IsModerator,
            @IsGuest,
            @UTCTIMESTAMP,
            ReadAccess,
            (CONVERT([bit],sign([PostAccess]&(2)),(0))),
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess			
            from [dbo].[yaf_vaccess] 
            where UserID = @UserID 
            end
    -- return information
    select   
        x.*
    from
     [dbo].[yaf_ActiveAccess] x  with(nolock)
    where
        x.UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pageaccess_path]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_pageaccess_path](
    @SessionID	nvarchar(24),
    @BoardID	int,
    @UserKey	nvarchar(64),
    @IP			varchar(39),
    @Location	nvarchar(255),
    @ForumPage  nvarchar(255) = null,
    @Browser	nvarchar(50),
    @Platform	nvarchar(50),
    @CategoryID	int = null,
    @ForumID	int = null,
    @TopicID	int = null,
    @MessageID	int = null,
    @IsCrawler	bit = 0,
    @IsMobileDevice	bit = 0,
    @DontTrack	bit = 0,
    @UTCTIMESTAMP datetime
) as
begin
    declare @UserID			int
    declare @UserBoardID	int
    declare @IsGuest		tinyint	
    declare @rowcount		int
    declare @PreviousVisit	datetime
    declare @ActiveUpdate   tinyint	
    declare @ActiveFlags	int
    declare @GuestID        int
    
    set implicit_transactions off	
    -- set IsActiveNow ActiveFlag - it's a default
    set @ActiveFlags = 1;


    -- f a guest id should do it every time to be sure that guest access rights are in ActiveAccess table
    select top 1 @GuestID = UserID from [dbo].[yaf_User] where BoardID=@BoardID and (Flags & 4)=4 ORDER BY Joined DESC
        set @rowcount=@@rowcount
        if (@rowcount > 1)
        begin
            raiserror('Found %d possible guest users. There should be one and only one user marked as guest.',16,1,@rowcount)
            end	
        if (@rowcount = 0)
        begin
            raiserror('No candidates for a guest were found for the board %d.',16,1,@BoardID)
            end
     -- verify that there's not the sane session for other board and drop it if required. Test code for portals with many boards
     delete from [dbo].[yaf_Active] where (SessionID=@SessionID  and BoardID <> @BoardID)
             
    if @UserKey is null
    begin
    -- this is a guest
        SET @UserID = @GuestID
        set @IsGuest = 1
        -- set IsGuest ActiveFlag  1 | 2
        set @ActiveFlags = 3
        set @UserBoardID = @BoardID
        -- crawlers are always guests 
        if	@IsCrawler = 1
            begin
                -- set IsCrawler ActiveFlag
                set @ActiveFlags =  @ActiveFlags | 8
            end 
    end 
    else	
    begin
        select @UserID = UserID, @UserBoardID = BoardID from [dbo].[yaf_User] with(nolock) where BoardID=@BoardID and ProviderUserKey=@UserKey
        set @IsGuest = 0
        -- make sure that registered users are not crawlers
        set @IsCrawler = 0
        -- set IsRegistered ActiveFlag
        set @ActiveFlags = @ActiveFlags | 4
    end

    
    -- Check valid ForumID
    if @ForumID is not null and not exists(select 1 from [dbo].[yaf_Forum] where ForumID=@ForumID) begin
        set @ForumID = null
    end
    -- Check valid CategoryID
    if @CategoryID is not null and not exists(select 1 from [dbo].[yaf_Category] where CategoryID=@CategoryID) begin
        set @CategoryID = null
    end
    -- Check valid MessageID
    if @MessageID is not null and not exists(select 1 from [dbo].[yaf_Message] where MessageID=@MessageID) begin
        set @MessageID = null
    end
    -- Check valid TopicID
    if @TopicID is not null and not exists(select 1 from [dbo].[yaf_Topic] where TopicID=@TopicID) begin
        set @TopicID = null
    end	
    
    -- get previous visit
    if  @IsGuest = 0	 begin
        select @PreviousVisit = LastVisit from [dbo].[yaf_User] where UserID = @UserID
    end
    
    -- update last visit
    update [dbo].[yaf_User] set 
        LastVisit = @UTCTIMESTAMP,
        IP = @IP
    where UserID = @UserID

    -- find missing ForumID/TopicID
    if @MessageID is not null begin
        select
            @CategoryID = c.CategoryID,
            @ForumID = b.ForumID,
            @TopicID = b.TopicID
        from
            [dbo].[yaf_Message] a
            inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
            inner join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
            inner join [dbo].[yaf_Category] d on d.CategoryID = c.CategoryID
        where
            a.MessageID = @MessageID and
            d.BoardID = @BoardID
    end
    else if @TopicID is not null begin
        select 
            @CategoryID = b.CategoryID,
            @ForumID = a.ForumID 
        from 
            [dbo].[yaf_Topic] a
            inner join [dbo].[yaf_Forum] b on b.ForumID = a.ForumID
            inner join [dbo].[yaf_Category] c on c.CategoryID = b.CategoryID
        where 
            a.TopicID = @TopicID and
            c.BoardID = @BoardID
    end
    else if @ForumID is not null begin
        select
            @CategoryID = a.CategoryID
        from
            [dbo].[yaf_Forum] a
            inner join [dbo].[yaf_Category] b on b.CategoryID = a.CategoryID
        where
            a.ForumID = @ForumID and
            b.BoardID = @BoardID
    end
    
    if @DontTrack != 1 and @UserID is not null and @UserBoardID=@BoardID begin
      if exists(select 1 from [dbo].[yaf_Active] where (SessionID=@SessionID OR ( Browser = @Browser AND (Flags & 8) = 8 )) and BoardID=@BoardID)
        begin
          -- user is not a crawler - use his session id
          if @IsCrawler <> 1
          begin		   
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage		
            where SessionID = @SessionID AND BoardID=@BoardID			
            end
            else
            begin
            -- search crawler by other parameters then session id
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage	
            where Browser = @Browser AND IP = @IP AND BoardID=@BoardID
            -- trace crawler: the cache is reset every time crawler moves to next page ? Disabled as cache reset will overload server 
            -- set @ActiveUpdate = 1			
            end
        end
        else 
        begin				
             -- we set @ActiveFlags ready flags 	
            insert into [dbo].[yaf_Active](
            SessionID,
            BoardID,
            UserID,
            IP,
            Login,
            LastActive,
            Location,
            ForumID,
            TopicID,
            Browser,
            [Platform],
            Flags)
            values(
            @SessionID,
            @BoardID,
            @UserID,
            @IP,
            @UTCTIMESTAMP,
            @UTCTIMESTAMP,
            @Location,
            @ForumID,
            @TopicID,
            @Browser,
            @Platform,
            @ActiveFlags)			

            -- update max user stats
            exec [dbo].[yaf_active_updatemaxstats] @BoardID,@UTCTIMESTAMP 
            -- parameter to update active users cache if this is a new user
            if @IsGuest=0
                  begin
                  set @ActiveUpdate = 1
            end
            
        end
        -- remove duplicate users
        if @IsGuest=0
        begin
            -- ensure that no duplicates 
            delete from [dbo].[yaf_Active] where UserID=@UserID and BoardID=@BoardID and SessionID<>@SessionID	    
        
        end
        
    end
    -- return information
    select 
        ActiveUpdate        = ISNULL(@ActiveUpdate,0),
        PreviousVisit		= @PreviousVisit,	
        IsCrawler           = @IsCrawler,
        IsMobileDevice      = @IsMobileDevice,
        CategoryID			= @CategoryID,
        CategoryName		= (select Name from [dbo].[yaf_Category] where CategoryID = @CategoryID),
        ForumName			= (select Name from [dbo].[yaf_Forum] where ForumID = @ForumID),
        TopicID				= @TopicID,
        TopicName			= (select Topic from [dbo].[yaf_Topic] where TopicID = @TopicID),
        ForumTheme			= (select ThemeURL from [dbo].[yaf_Forum] where ForumID = @ForumID)
    
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pageload]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_pageload](
    @SessionID	nvarchar(24),
    @BoardID	int,
    @UserKey	nvarchar(64),
    @IP			varchar(39),
    @Location	nvarchar(255),
    @ForumPage  nvarchar(255) = null,
    @Browser	nvarchar(50),
    @Platform	nvarchar(50),
    @CategoryID	int = null,
    @ForumID	int = null,
    @TopicID	int = null,
    @MessageID	int = null,
    @IsCrawler	bit = 0,
    @IsMobileDevice	bit = 0,
    @DontTrack	bit = 0,
    @UTCTIMESTAMP datetime
) as
begin
    declare @UserID			int
    declare @UserBoardID	int
    declare @IsGuest		tinyint	
    declare @rowcount		int
    declare @PreviousVisit	datetime
    declare @ActiveUpdate   tinyint	
    declare @ActiveFlags	int
    declare @GuestID        int
    
    set implicit_transactions off	
    -- set IsActiveNow ActiveFlag - it's a default
    set @ActiveFlags = 1;

      -- find a guest id should do it every time to be sure that guest access rights are in ActiveAccess table
    select top 1 @GuestID = UserID from [dbo].[yaf_User] WITH(NOLOCK) where BoardID=@BoardID and (Flags & 4)=4 ORDER BY Joined DESC
        set @rowcount=@@rowcount
        if (@rowcount > 1)
        begin
            raiserror('Found %d possible guest users. There should be one and only one user marked as guest.',16,1,@rowcount)
            end	
        if (@rowcount = 0)
        begin
            raiserror('No candidates for a guest were found for the board %d.',16,1,@BoardID)
            end
  
    
             
    if @UserKey is null
    begin
    -- this is a guest	
        SET @UserID = @GuestID
        set @IsGuest = 1
        -- set IsGuest ActiveFlag  1 | 2
        set @ActiveFlags = 3
        set @UserBoardID = @BoardID
        -- crawlers are always guests 
        if	@IsCrawler = 1
            begin
                -- set IsCrawler ActiveFlag
                set @ActiveFlags =  @ActiveFlags | 8
            end 
    end 
    else	
    begin
        select @UserID = UserID, @UserBoardID = BoardID from [dbo].[yaf_User] with(nolock) where BoardID=@BoardID and ProviderUserKey=@UserKey
        set @IsGuest = 0
        -- make sure that registered users are not crawlers
        set @IsCrawler = 0
        -- set IsRegistered ActiveFlag
        set @ActiveFlags = @ActiveFlags | 4
    end    

    -- Check valid ForumID
    if @ForumID is not null and not exists(select 1 from [dbo].[yaf_Forum] where ForumID=@ForumID) begin
        set @ForumID = null
    end
    -- Check valid CategoryID
    if @CategoryID is not null and not exists(select 1 from [dbo].[yaf_Category] where CategoryID=@CategoryID) begin
        set @CategoryID = null
    end
    -- Check valid MessageID
    if @MessageID is not null and not exists(select 1 from [dbo].[yaf_Message] where MessageID=@MessageID) begin
        set @MessageID = null
    end
    -- Check valid TopicID
    if @TopicID is not null and not exists(select 1 from [dbo].[yaf_Topic] where TopicID=@TopicID) begin
        set @TopicID = null
    end	

    -- find missing ForumID/TopicID
    if @MessageID is not null begin
        select
            @CategoryID = c.CategoryID,
            @ForumID = b.ForumID,
            @TopicID = b.TopicID
        from
            [dbo].[yaf_Message] a
            inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
            inner join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
            inner join [dbo].[yaf_Category] d on d.CategoryID = c.CategoryID
        where
            a.MessageID = @MessageID and
            d.BoardID = @BoardID
    end
    else if @TopicID is not null begin
        select 
            @CategoryID = b.CategoryID,
            @ForumID = a.ForumID 
        from 
            [dbo].[yaf_Topic] a
            inner join [dbo].[yaf_Forum] b on b.ForumID = a.ForumID
            inner join [dbo].[yaf_Category] c on c.CategoryID = b.CategoryID
        where 
            a.TopicID = @TopicID and
            c.BoardID = @BoardID
    end
    else if @ForumID is not null begin
        select
            @CategoryID = a.CategoryID
        from
            [dbo].[yaf_Forum] a
            inner join [dbo].[yaf_Category] b on b.CategoryID = a.CategoryID
        where
            a.ForumID = @ForumID and
            b.BoardID = @BoardID
    end

        
    
    -- update active access
    -- ensure that access right are in place		
        if not exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess] WITH(NOLOCK) 
            where UserID = @UserID )		
            begin
            insert into [dbo].[yaf_ActiveAccess](
            UserID,
            BoardID,
            ForumID,
            IsAdmin, 
            IsForumModerator,
            IsModerator,
            IsGuestX,
            LastActive, 
            ReadAccess,
            PostAccess,
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,	
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess)
            select 
            UserID, 
            @BoardID, 
            ForumID, 
            IsAdmin,
            IsForumModerator,
            IsModerator,
            @IsGuest,
            @UTCTIMESTAMP,
            ReadAccess,
            (CONVERT([bit],sign([PostAccess]&(2)),(0))),
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess			
            from [dbo].[yaf_vaccess] 
            where UserID = @UserID 
            end

                -- ensure that guest access right are in place		
        if @UserID != @GuestID and not exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess] WITH(NOLOCK) 
            where UserID = @GuestID )		
            begin
            insert into [dbo].[yaf_ActiveAccess](
            UserID,
            BoardID,
            ForumID,
            IsAdmin, 
            IsForumModerator,
            IsModerator,
            IsGuestX,
            LastActive, 
            ReadAccess,
            PostAccess,
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,	
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess)
            select 
            UserID, 
            @BoardID, 
            ForumID, 
            IsAdmin,
            IsForumModerator,
            IsModerator,
            @IsGuest,
            @UTCTIMESTAMP,
            ReadAccess,
            (CONVERT([bit],sign([PostAccess]&(2)),(0))),
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess			
            from [dbo].[yaf_vaccess] 
            where UserID = @GuestID 
            end

        if exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess] WITH(NOLOCK) 
            where UserID = @UserID and ForumID= ISNULL(@ForumID,0) and (ISNULL(@ForumID,0) = 0 OR ReadAccess = 1))		
            begin
                 -- verify that there's not the sane session for other board and drop it if required. Test code for portals with many boards
     delete from [dbo].[yaf_Active] where (SessionID=@SessionID  and (BoardID <> @BoardID or UserID <> @UserID))
    -- get previous visit
    if  @IsGuest = 0	 begin
        select @PreviousVisit = LastVisit from [dbo].[yaf_User] where UserID = @UserID
    end
    
    -- update last visit
    update [dbo].[yaf_User] set 
        LastVisit = @UTCTIMESTAMP,
        IP = @IP
    where UserID = @UserID
    
    if @DontTrack != 1 and @UserID is not null and @UserBoardID=@BoardID begin
      if exists(select 1 from [dbo].[yaf_Active] where (SessionID=@SessionID OR ( Browser = @Browser AND (Flags & 8) = 8 )) and BoardID=@BoardID)
        begin
          -- user is not a crawler - use his session id
          if @IsCrawler <> 1
          begin		   
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage,
                Flags = @ActiveFlags		
            where SessionID = @SessionID AND BoardID=@BoardID			
                -- cache will be updated every time set @ActiveUpdate = 1		
            end
            else
            begin
            -- search crawler by other parameters then session id
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage,
                Flags = @ActiveFlags		
            where Browser = @Browser AND IP = @IP AND BoardID=@BoardID
            -- trace crawler: the cache is reset every time crawler moves to next page ? Disabled as cache reset will overload server 
                -- set @ActiveUpdate = 1				 
            end
        end
        else 
        begin				
             -- we set @ActiveFlags ready flags 	
            insert into [dbo].[yaf_Active](
            SessionID,
            BoardID,
            UserID,
            IP,
            Login,
            LastActive,
            Location,
            ForumID,
            TopicID,
            Browser,
            [Platform],
            Flags)
            values(
            @SessionID,
            @BoardID,
            @UserID,
            @IP,
            @UTCTIMESTAMP,
            @UTCTIMESTAMP,
            @Location,
            @ForumID,
            @TopicID,
            @Browser,
            @Platform,
            @ActiveFlags)			
            
            -- update max user stats
            exec [dbo].[yaf_active_updatemaxstats] @BoardID, @UTCTIMESTAMP
            -- parameter to update active users cache if this is a new user
            if @IsGuest=0
                  begin
                  set @ActiveUpdate = 1
            end
            
        end
        -- remove duplicate users
        if @IsGuest=0
        begin
            -- ensure that no duplicates 
            delete from [dbo].[yaf_Active] where UserID=@UserID and BoardID=@BoardID and SessionID<>@SessionID	    
        
        end
        
    end
    end
    -- return information
    select top 1
        ActiveUpdate        = ISNULL(@ActiveUpdate,0),
        PreviousVisit		= @PreviousVisit,	   
        x.*,	
        IsModeratorAny      = ISNULL((select top 1 aa.ModeratorAccess from [dbo].[yaf_ActiveAccess] aa where aa.UserID = @UserID and aa.ModeratorAccess = 1),0),
        IsCrawler           = @IsCrawler,
        IsMobileDevice      = @IsMobileDevice,
        CategoryID			= @CategoryID,
        CategoryName		= (select Name from [dbo].[yaf_Category] where CategoryID = @CategoryID),
        ForumName			= (select Name from [dbo].[yaf_Forum] where ForumID = @ForumID),
        TopicID				= @TopicID,
        TopicName			= (select Topic from [dbo].[yaf_Topic] where TopicID = @TopicID),
        ForumTheme			= (select ThemeURL from [dbo].[yaf_Forum] where ForumID = @ForumID)	 
    from
     [dbo].[yaf_ActiveAccess] x  with(nolock)
    where
        x.UserID = @UserID and x.ForumID=IsNull(@ForumID,0)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pmessage_archive]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pmessage_archive](@UserPMessageID int = NULL) AS
BEGIN
        -- set IsArchived bit
    UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = ([Flags] | 4) WHERE UserPMessageID = @UserPMessageID AND IsArchived = 0
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_pmessage_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pmessage_delete](@UserPMessageID int, @FromOutbox bit = 0) as
BEGIN
        DECLARE @PMessageID int

    SET @PMessageID = (SELECT TOP 1 PMessageID FROM [dbo].[yaf_UserPMessage] where UserPMessageID = @UserPMessageID);
        
    IF ( @FromOutbox = 1 AND EXISTS(SELECT (1) FROM [dbo].[yaf_UserPMessage] WHERE UserPMessageID = @UserPMessageID AND IsInOutbox = 1 ) )
    BEGIN
        -- remove IsInOutbox bit which will remove it from the senders outbox
        UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = ([Flags] ^ 2) WHERE UserPMessageID = @UserPMessageID
    END
    
    IF ( @FromOutbox = 0 )
    BEGIN
            -- The pmessage is in archive but still is in sender outbox  
    IF ( EXISTS(SELECT (1) FROM [dbo].[yaf_UserPMessage] WHERE UserPMessageID = @UserPMessageID AND IsInOutbox = 1 AND IsArchived = 1 AND IsDeleted = 0) )
    BEGIN
    -- Remove archive flag and set IsDeleted flag
    UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = [Flags] ^ 4  WHERE UserPMessageID = @UserPMessageID AND IsArchived = 1	
    END
        -- set is deleted...
        UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = ([Flags] ^ 8) WHERE UserPMessageID = @UserPMessageID
    END	
    
    -- see if there are no longer references to this PM.
    IF ( EXISTS(SELECT (1) FROM [dbo].[yaf_UserPMessage] WHERE UserPMessageID = @UserPMessageID AND IsInOutbox = 0 AND IsDeleted = 1 ) )
    BEGIN
        -- delete
        DELETE FROM [dbo].[yaf_UserPMessage] WHERE [PMessageID] = @PMessageID
        DELETE FROM [dbo].[yaf_PMessage] WHERE [PMessageID] = @PMessageID
    END	

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_pmessage_info]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pmessage_info] as
begin
        select
        NumRead	= (select count(1) from [dbo].[yaf_UserPMessage] WHERE IsRead<>0  AND IsDeleted<>1),
        NumUnread = (select count(1) from [dbo].[yaf_UserPMessage] WHERE IsRead=0  AND IsDeleted<>1),
        NumTotal = (select count(1) from [dbo].[yaf_UserPMessage] WHERE IsDeleted<>1)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pmessage_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pmessage_list](@FromUserID int=null,@ToUserID int=null,@UserPMessageID int=null) AS
BEGIN				
        SELECT
    a.ReplyTo, a.PMessageID, b.UserPMessageID, a.FromUserID, d.[Name] AS FromUser, 
    b.[UserID] AS ToUserId, c.[Name] AS ToUser, a.Created, a.[Subject], 
    a.Body, a.Flags, b.IsRead,b.IsReply, b.IsInOutbox, b.IsArchived, b.IsDeleted
FROM
    [dbo].[yaf_PMessage] a
INNER JOIN
    [dbo].[yaf_UserPMessage] b ON a.PMessageID = b.PMessageID
INNER JOIN
    [dbo].[yaf_User] c ON b.UserID = c.UserID
INNER JOIN
    [dbo].[yaf_User] d ON a.FromUserID = d.UserID	
        WHERE	((@UserPMessageID IS NOT NULL AND b.UserPMessageID=@UserPMessageID) OR 
                 (@ToUserID   IS NOT NULL AND b.[UserID]  = @ToUserID) OR (@FromUserID IS NOT NULL AND a.FromUserID = @FromUserID))		
        ORDER BY Created DESC
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_pmessage_markread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pmessage_markread](@UserPMessageID int=null)
AS
BEGIN
        UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = [Flags] | 1 WHERE UserPMessageID = @UserPMessageID AND IsRead = 0
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_pmessage_prune]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_pmessage_prune](@DaysRead int,@DaysUnread int,@UTCTIMESTAMP datetime) as
begin
        delete from [dbo].[yaf_UserPMessage]
    where IsRead<>0
    and datediff(dd,(select Created from [dbo].[yaf_PMessage] x where x.PMessageID=[dbo].[yaf_UserPMessage].PMessageID),@UTCTIMESTAMP )>@DaysRead

    delete from [dbo].[yaf_UserPMessage]
    where IsRead=0
    and datediff(dd,(select Created from [dbo].[yaf_PMessage] x where x.PMessageID=[dbo].[yaf_UserPMessage].PMessageID),@UTCTIMESTAMP )>@DaysUnread

    delete from [dbo].[yaf_PMessage]
    where not exists(select 1 from [dbo].[yaf_UserPMessage] x where x.PMessageID=[dbo].[yaf_PMessage].PMessageID)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pmessage_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_pmessage_save](
    @FromUserID	int,
    @ToUserID	int,
    @Subject	nvarchar(100),
    @Body		ntext,
    @Flags		int,
    @ReplyTo    int,
    @UTCTIMESTAMP datetime
) as
begin
    declare @PMessageID int
    declare @UserID int     
    
    IF @ReplyTo<0
    begin
        insert into [dbo].[yaf_PMessage](FromUserID,Created,Subject,Body,Flags)
        values(@FromUserID,@UTCTIMESTAMP ,@Subject,@Body,@Flags)
    end
    else
    begin
        insert into [dbo].[yaf_PMessage](FromUserID,Created,Subject,Body,Flags,ReplyTo)
        values(@FromUserID,@UTCTIMESTAMP ,@Subject,@Body,@Flags,@ReplyTo)

        UPDATE [dbo].[yaf_UserPMessage] SET [IsReply] = (1) WHERE PMessageID = @ReplyTo
    end

    set @PMessageID = SCOPE_IDENTITY()
    if (@ToUserID = 0)
    begin
        insert into [dbo].[yaf_UserPMessage](UserID,PMessageID,Flags)
        select
                a.UserID,@PMessageID,2
        from
                [dbo].[yaf_User] a
                join [dbo].[yaf_UserGroup] b on b.UserID=a.UserID
                join [dbo].[yaf_Group] c on c.GroupID=b.GroupID where
                (c.Flags & 2)=0 and
                c.BoardID=(select BoardID from [dbo].[yaf_User] x where x.UserID=@FromUserID) and a.UserID<>@FromUserID
        group by
                a.UserID
    end
    else
    begin
        insert into [dbo].[yaf_UserPMessage](UserID,PMessageID,Flags) values(@ToUserID,@PMessageID,2)
    end	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_poll_remove]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_poll_remove](
    @PollGroupID int, @PollID int = null, @BoardID int = null, @RemoveCompletely bit)
as
begin
declare @groupcount int
    
    if @RemoveCompletely = 1 
    begin
    -- delete vote records first
    delete from [dbo].[yaf_PollVote] where PollID = @PollID
    -- delete choices 
    delete from [dbo].[yaf_Choice] where PollID = @PollID
    -- delete poll
    Update [dbo].[yaf_Poll] set PollGroupID = NULL where PollID = @PollID
    delete from [dbo].[yaf_Poll] where PollID = @PollID 	
    if  NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[yaf_Poll] where PollGroupID = @PollGroupID) 
        begin	
              
                   Update [dbo].[yaf_Topic] set PollID = NULL where PollID = @PollGroupID                 
                  
                   
                   Update [dbo].[yaf_Forum] set PollGroupID = NULL where PollGroupID = @PollGroupID
              
    
                   Update [dbo].[yaf_Category] set PollGroupID = NULL where PollGroupID = @PollGroupID                
        
              
        
       
         
        DELETE FROM  [dbo].[yaf_PollGroupCluster] WHERE PollGroupID = @PollGroupID	
        end  	
    end
    else
    begin    
    Update [dbo].[yaf_Poll] set PollGroupID = NULL where PollID = @PollID	                         
    end

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_poll_stats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_poll_stats](@PollID int = null) AS
BEGIN

    SELECT
            
        a.PollID,
        b.Question,
        b.Closes,
        b.UserID,		
        a.[ObjectPath],
        a.[MimeType],
        QuestionObjectPath = b.[ObjectPath],
        QuestionMimeType = b.[MimeType],
        a.ChoiceID,
        a.Choice,
        a.Votes,
        pg.IsBound, 
        b.IsClosedBound, 	
        b.AllowMultipleChoices,
        b.ShowVoters,
        b.AllowSkipVote,
        (select sum(x.Votes) from [dbo].[yaf_Choice] x where  x.PollID = a.PollID) as [Total],
        [Stats] = (select 100 * a.Votes / case sum(x.Votes) when 0 then 1 else sum(x.Votes) end from [dbo].[yaf_Choice] x where x.PollID=a.PollID)
    FROM
        [dbo].[yaf_Choice] a		
    INNER JOIN 
        [dbo].[yaf_Poll] b ON b.PollID = a.PollID
    INNER JOIN  
        [dbo].[yaf_PollGroupCluster] pg ON pg.PollGroupID = b.PollGroupID	
        WHERE
        b.PollID = @PollID

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_poll_update]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_poll_update](
    @PollID		int,
    @Question	nvarchar(50),
    @Closes 	datetime = null,
    @QuestionObjectPath nvarchar(255), 
    @QuestionMimeType varchar(50),
    @IsBounded  bit,
    @IsClosedBounded  bit,
    @AllowMultipleChoices bit,
    @ShowVoters bit,
    @AllowSkipVote bit

) as
begin
    declare @pgid int
    declare @flags int

        update [dbo].[yaf_Poll]
        set Flags	= 0 where PollID = @PollID AND Flags IS NULL;

        SELECT @flags = Flags FROM [dbo].[yaf_Poll]		
        where PollID = @PollID

        -- is closed bound flag
        SET @flags = (CASE				
        WHEN @IsClosedBounded > 0 AND (@flags & 4) <> 4 THEN @flags | 4		
        WHEN @IsClosedBounded <= 0 AND (@flags & 4) = 4  THEN @flags ^ 4
        ELSE @flags END)

        -- allow multiple choices flag
        SET @flags = (CASE				
        WHEN @AllowMultipleChoices > 0 AND (@flags & 8) <> 8 THEN @flags | 8		
        WHEN @AllowMultipleChoices <= 0 AND (@flags & 8) = 8  THEN @flags ^ 8
        ELSE @flags END)
        
        -- show who's voted for a poll flag
        SET @flags = (CASE				
        WHEN @ShowVoters > 0 AND (@flags & 16) <> 16 THEN @flags | 16		
        WHEN @ShowVoters <= 0 AND (@flags & 16) = 16  THEN @flags ^ 16
        ELSE @flags END)

        -- allow users don't vote and see results
        SET @flags = (CASE				
        WHEN @AllowSkipVote > 0 AND (@flags & 32) <> 32 THEN @flags | 32		
        WHEN @AllowSkipVote <= 0 AND (@flags & 32) = 32  THEN @flags ^ 32
        ELSE @flags END)

      update [dbo].[yaf_Poll]
        set Question	=	@Question,
            Closes		=	@Closes,
            ObjectPath = @QuestionObjectPath,
            MimeType = @QuestionMimeType,
            Flags	= @flags
        where PollID = @PollID

      SELECT  @pgid = PollGroupID FROM [dbo].[yaf_Poll]
      where PollID = @PollID
   
    update [dbo].[yaf_PollGroupCluster]
        set Flags	= (CASE 
        WHEN @IsBounded > 0 AND (Flags & 2) <> 2 THEN Flags | 2 		
        WHEN @IsBounded <= 0 AND (Flags & 2) = 2 THEN Flags ^ 2 		
        ELSE Flags END)		
        where PollGroupID = @pgid
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pollgroup_attach]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_pollgroup_attach](@PollGroupID int, @TopicID int = null, @ForumID int = null, @CategoryID int = null, @BoardID int = null) as
begin
                   -- this deletes possible polls without choices it should not normally happen
                   DECLARE @tablett table (PollID int) 
                   INSERT INTO @tablett(PollID)
                   SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = NULL
                  
                   DELETE FROM [dbo].[yaf_PollVote] WHERE PollID IN (select PollID FROM @tablett)
                   DELETE FROM [dbo].[yaf_Choice] WHERE PollID IN (select PollID FROM @tablett)
                   DELETE FROM [dbo].[yaf_Poll] WHERE PollID IN (select PollID FROM @tablett)
                                   
                   if NOT EXISTS (SELECT top 1 1 FROM @tablett)
                   begin
                   if @TopicID > 0
                   begin
                   if exists (select top 1 1 from [dbo].[yaf_Topic] where TopicID = @TopicID  and PollID is not null)
                   begin
                   SELECT 1
                   end
                   else
                   begin
                   Update [dbo].[yaf_Topic] set PollID = @PollGroupID where TopicID = @TopicID 
                   SELECT 0
                   end
                   end              
                  
                   if @ForumID > 0
                   begin
                   if exists (select top 1 1 from [dbo].[yaf_Forum] where ForumID = @ForumID and PollGroupID is not null)
                   begin
                   SELECT 1
                   end
                   else
                   begin
                   Update [dbo].[yaf_Forum] set PollGroupID = @PollGroupID where ForumID = @ForumID
                   SELECT 0
                   end
                   end

                   if @CategoryID > 0
                   begin
                   if exists (select top 1 1 from [dbo].[yaf_Category] where CategoryID = @CategoryID and PollGroupID is null)
                   begin
                   SELECT 1
                   end
                   else
                   begin
                   Update [dbo].[yaf_Category] set PollGroupID = @PollGroupID where CategoryID = @CategoryID
                   SELECT 0
                   end
                   end
                   end
                   SELECT 1
                       

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pollgroup_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_pollgroup_list](@UserID int, @ForumID int = null, @BoardID int) as
begin
    select distinct(p.Question), p.PollGroupID from [dbo].[yaf_Poll] p
    LEFT JOIN 	[dbo].[yaf_PollGroupCluster] pgc ON pgc.PollGroupID = p.PollGroupID
    WHERE p.PollGroupID is not null
    -- WHERE p.Closes IS NULL OR p.Closes > @UTCTIMESTAMP
    order by Question asc
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pollgroup_migration]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_pollgroup_migration]
 as
  begin
     declare @ptmp int
	 declare @ttmp int
	 declare @utmp int 
	 declare @PollGroupID int

        declare c cursor for
        select  PollID,TopicID, UserID from [dbo].[yaf_Topic] where PollID IS NOT NULL
		        
        open c
        
        fetch next from c into @ptmp, @ttmp, @utmp
        while @@FETCH_STATUS = 0
        begin
		if @ptmp is not null
		begin
		insert into [dbo].[yaf_PollGroupCluster](UserID, Flags) values (@utmp, 0)	
		SET @PollGroupID = SCOPE_IDENTITY()  
		
	            update [dbo].[yaf_Topic] SET PollID = @PollGroupID WHERE TopicID = @ttmp
				update [dbo].[yaf_Poll] SET UserID = @utmp, PollGroupID = @PollGroupID, Flags = 0 WHERE PollID = @ptmp
		end       
        fetch next from c into @ptmp, @ttmp, @utmp
        end

        close c
        deallocate c 

		end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pollgroup_remove]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_pollgroup_remove](@PollGroupID int, @TopicID int =null, @ForumID int= null, @CategoryID int = null, @BoardID int = null, @RemoveCompletely bit, @RemoveEverywhere bit)
 as
  begin   
    declare @polllist table( PollID int)
    declare @tmp int

    
    
             -- we delete poll from the place only it persists in other places 
         if @RemoveEverywhere <> 1
             begin
                   if @TopicID > 0
                   Update [dbo].[yaf_Topic] set PollID = NULL where TopicID = @TopicID                 
                  
                   if @ForumID > 0
                   Update [dbo].[yaf_Forum] set PollGroupID = NULL where ForumID = @ForumID
              
                   if @CategoryID > 0
                   Update [dbo].[yaf_Category] set PollGroupID = NULL where CategoryID = @CategoryID
                
             end        
            
          -- we remove poll group links from all places where they are
         if ( @RemoveEverywhere = 1 OR @RemoveCompletely = 1)
         begin
                   Update [dbo].[yaf_Topic] set PollID = NULL where PollID = @PollGroupID 
                   Update [dbo].[yaf_Forum] set PollGroupID = NULL where PollGroupID = @PollGroupID
                   Update [dbo].[yaf_Category] set PollGroupID = NULL where PollGroupID = @PollGroupID				 
         end

         -- simply remove all polls
    if @RemoveCompletely = 1 
    begin	
    insert into @polllist (PollID)
    select PollID from [dbo].[yaf_Poll] where PollGroupID = @PollGroupID   
            DELETE FROM  [dbo].[yaf_PollVote] WHERE PollID IN (SELECT PollID FROM @polllist)
            DELETE FROM  [dbo].[yaf_Choice] WHERE PollID IN (SELECT PollID FROM @polllist)	
            DELETE FROM  [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID 
            DELETE FROM  [dbo].[yaf_PollGroupCluster] WHERE PollGroupID = @PollGroupID		
    end

    -- don't remove cluster if the polls are not removed from db 
    end
GO
/****** Object:  StoredProcedure [dbo].[yaf_pollgroup_stats]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pollgroup_stats](@PollGroupID int) AS
BEGIN
        SELECT		
        GroupUserID = pg.UserID,	
        a.PollID,
        b.PollGroupID,
        b.Question,
        b.Closes,
        a.ChoiceID,		
        a.Choice,
        a.Votes,
        a.ObjectPath,
        a.MimeType,
        QuestionObjectPath = b.[ObjectPath],
        QuestionMimeType = b.[MimeType],
        pg.IsBound,
        b.IsClosedBound,		
        b.AllowMultipleChoices,
        b.ShowVoters,
        b.AllowSkipVote,
        (select sum(x.Votes) from [dbo].[yaf_Choice] x where  x.PollID = a.PollID) as [Total],
        [Stats] = (select 100 * a.Votes / case sum(x.Votes) when 0 then 1 else sum(x.Votes) end from [dbo].[yaf_Choice] x where x.PollID=a.PollID)
    FROM
        [dbo].[yaf_Choice] a		
    INNER JOIN 
        [dbo].[yaf_Poll] b ON b.PollID = a.PollID
    INNER JOIN  
        [dbo].[yaf_PollGroupCluster] pg ON pg.PollGroupID = b.PollGroupID	  
    WHERE
        pg.PollGroupID = @PollGroupID
        ORDER BY b.PollGroupID
    --	GROUP BY a.PollID, b.Question, b.Closes, a.ChoiceID, a.Choice,a.Votes
        END
GO
/****** Object:  StoredProcedure [dbo].[yaf_pollgroup_votecheck]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pollgroup_votecheck](@PollGroupID int, @UserID int = NULL,@RemoteIP varchar(39) = NULL) AS
    IF @UserID IS NULL
      BEGIN
        IF @RemoteIP IS NOT NULL
        BEGIN
            -- check by remote IP
            SELECT PollID, ChoiceID FROM [dbo].[yaf_PollVote] WHERE PollID IN ( SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID) AND RemoteIP = @RemoteIP
        END
        ELSE
        BEGIN
        -- to get structure
            SELECT pv.PollID, pv.ChoiceID, usr.Name as UserName 
            FROM [dbo].[yaf_PollVote] pv 
            JOIN [dbo].[yaf_User] usr ON usr.UserID = pv.UserID
            WHERE pv.PollID IN ( SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID)
        END
      END
    ELSE
      BEGIN
        -- check by userid or remote IP
        SELECT PollID, ChoiceID FROM [dbo].[yaf_PollVote] WHERE PollID IN ( SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID) AND (UserID = @UserID OR RemoteIP = @RemoteIP)
       END
GO
/****** Object:  StoredProcedure [dbo].[yaf_pollvote_check]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_pollvote_check](@PollID int, @UserID int = NULL,@RemoteIP varchar(39) = NULL) AS
        IF @UserID IS NULL
    BEGIN
        IF @RemoteIP IS NOT NULL
        BEGIN
            -- check by remote IP
            SELECT PollVoteID FROM [dbo].[yaf_PollVote] WHERE PollID = @PollID AND RemoteIP = @RemoteIP
        END
    END
    ELSE
    BEGIN
        -- check by userid or remote IP
        SELECT PollVoteID FROM [dbo].[yaf_PollVote] WHERE PollID = @PollID AND (UserID = @UserID OR RemoteIP = @RemoteIP)
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_post_alluser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_post_alluser](@BoardID int,@UserID int,@PageUserID int,@topCount int = 0) as
begin
        IF (@topCount IS NULL) SET @topCount = 0;		
        SET NOCOUNT ON
        SET ROWCOUNT @topCount

    select
        a.MessageID,
        a.Posted,
        [Subject] = c.Topic,
        a.[Message],		
        a.IP,
        a.UserID,
        a.Flags,
        UserName = IsNull(a.UserName,b.Name),
        UserDisplayName = IsNull(a.UserDisplayName, b.DisplayName),
        b.[Signature],
        c.TopicID
    from
        [dbo].[yaf_Message] a
        join [dbo].[yaf_User] b on b.UserID=a.UserID
        join [dbo].[yaf_Topic] c on c.TopicID=a.TopicID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_Category] e on e.CategoryID=d.CategoryID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
    where
        a.UserID = @UserID and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        e.BoardID = @BoardID and
        (a.Flags & 24)=16 and
        c.IsDeleted=0
    order by
        a.Posted desc
        
    SET ROWCOUNT 0;
     SET NOCOUNT OFF
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_post_alluser_simple]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_post_alluser_simple](@BoardID int,@UserID int) as
begin
    select
        a.MessageID,	
        a.IP
    from
        [dbo].[yaf_Message] a
    where
        a.UserID = @UserID
    order by
        a.Posted desc
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_post_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_post_list](
                 @TopicID int,
                 @PageUserID int,
                 @AuthorUserID int,
                 @UpdateViewCount smallint=1, 
                 @ShowDeleted bit = 1, 
                 @StyledNicks bit = 0,
                 @ShowReputation bit = 0,
                 @SincePostedDate datetime, 
                 @ToPostedDate datetime, 
                 @SinceEditedDate datetime, 
                 @ToEditedDate datetime, 
                 @PageIndex int = 1, 
                 @PageSize int = 0, 
                 @SortPosted int = 2, 
                 @SortEdited int = 0,
                 @SortPosition int = 0,				
                 @ShowThanks bit = 0,
                 @MessagePosition int = 0,
                 @UTCTIMESTAMP datetime) as
begin
   declare @TotalPages int
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
  
   declare @firstselectrownum int 

   declare @floor decimal
   declare @ceiling decimal
  
   declare @offset int   
 
   declare @pageshift int;

    if @UpdateViewCount>0
        update [dbo].[yaf_Topic] set [Views] = [Views] + 1 where TopicID = @TopicID
    -- find total returned count
        select
        @TotalRows = COUNT(m.MessageID)
    from
        [dbo].[yaf_Message] m
    where
        m.TopicID = @TopicID
        AND m.IsApproved = 1
         -- is deleted
       AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))
        AND m.Posted BETWEEN
        @SincePostedDate AND @ToPostedDate
         /*
        AND 
        m.Edited >= SinceEditedDate
        */ 

    select @TotalPages = CEILING(CONVERT(decimal,@TotalRows)/@PageSize);
    
	-- check if page index is bigger then Total pages
    if (@PageIndex > @TotalPages -1)
    begin
      set @PageIndex = @TotalPages -1
    end

 if (@MessagePosition > 0)
 begin

       -- round to ceiling - total number of pages  
       SELECT @ceiling = CEILING(CONVERT(decimal,@TotalRows)/@PageSize) 
       -- round to floor - a number of full pages
       SELECT @floor = FLOOR(CONVERT(decimal,@TotalRows)/@PageSize)

       SET @pageshift = @MessagePosition - (@TotalRows - @floor*@PageSize)
            if  @pageshift < 0
               begin
                  SET @pageshift = 0
                     end   
   -- here pageshift converts to full pages 
   if (@pageshift <= 0)
   begin    
   set @pageshift = 0
   end
   else 
   begin
   set @pageshift = CEILING(CONVERT(decimal,@pageshift)/@PageSize) 
   end   
   
   SET @PageIndex = @ceiling - @pageshift 
   if @ceiling != @floor
   SET @PageIndex = @PageIndex - 1	 
  
   select @FirstSelectRowNumber = @PageIndex * @PageSize + 1;
   select @LastSelectRowNumber = @FirstSelectRowNumber + @PageSize - 1;  
 end  
 else
 begin
   select @PageIndex = @PageIndex+1;
   select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
   select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
 end; 	
    with MessageIds  as
     (
     select ROW_NUMBER() over (order by (case 
        when @SortPosition = 1 then tt.Position end) ASC,	
        (case 
        when @SortPosted = 2 then tt.Posted end) DESC,
        (case 
        when @SortPosted = 1 then tt.Posted end) ASC, 
        (case 
        when @SortEdited = 2 then tt.Edited end) DESC,
        (case 
        when @SortEdited = 1 then tt.Edited end) ASC) as RowNum, tt.MessageID, tt.Position, tt.Posted, tt.Edited
     from  [dbo].[yaf_Message] tt
     where    tt.TopicID = @TopicID
        AND tt.IsApproved = 1
       AND (@ShowDeleted = 1 OR tt.IsDeleted = 0 OR (@AuthorUserID > 0 AND tt.UserID = @AuthorUserID))
        AND (tt.Posted is null OR (tt.Posted is not null AND
        tt.Posted between @SincePostedDate and @ToPostedDate)) 
        /*
        AND (m.Edited is null OR (m.Edited is not null AND
        (m.Edited >= (case 
        when @SortEdited = 1 then @firstselectedited end) 
        OR m.Edited <= (case 
        when @SortEdited = 2 then @firstselectedited end) OR
        m.Edited >= (case 
        when @SortEdited = 0 then 0
        end)))) 
        */	
      )	  
         select
        d.TopicID,
        d.Topic,
        d.Priority,
        d.Description,
        d.Status,
        d.Styles,
        d.PollID,
        d.UserID AS TopicOwnerID,
        TopicFlags	= d.Flags,
        ForumFlags	= g.Flags,
        m.MessageID,
        m.Posted,		
        [Message] = m.Message, 
        m.UserID,
        m.Position,
        m.Indent,
        m.IP,		
        m.Flags,
        m.EditReason,
        m.IsModeratorChanged,
        m.IsDeleted,
        m.DeleteReason,
        m.BlogPostID,
        m.ExternalMessageId,
        m.ReferenceMessageId,
        UserName = IsNull(m.UserName,b.Name),
        DisplayName =IsNull(m.UserDisplayName,b.DisplayName),
        b.Suspended,
        b.Joined,
        b.Avatar,
        b.[Signature],
        Posts		= b.NumPosts,
        b.Points,
        ReputationVoteDate = (CASE WHEN @ShowReputation = 1 THEN CAST(ISNULL((select top 1 VoteDate from [dbo].[yaf_ReputationVote] repVote where repVote.ReputationToUserID=b.UserID and repVote.ReputationFromUserID=@PageUserID), null) as datetime) ELSE @UTCTIMESTAMP END),
        IsGuest	= CONVERT(bit,IsNull(SIGN(b.Flags & 4),0)),
        d.[Views],
        d.ForumID,
        RankName = c.Name,		
        c.RankImage,
        c.Style as RankStyle,
        Style = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end, 
        Edited = IsNull(m.Edited,m.Posted),
        HasAttachments	= CONVERT(bit,ISNULL((select top 1 1 from [dbo].[yaf_Attachment] x where x.MessageID=m.MessageID),0)),
        HasAvatarImage = ISNULL((select top 1 1 from [dbo].[yaf_User] x where x.UserID=b.UserID and AvatarImage is not null),0),
        TotalRows = @TotalRows,
        PageIndex = @PageIndex,
        up.*
    from
        MessageIds ti
        inner join [dbo].[yaf_Message] m
        ON m.MessageID = ti.MessageID
        join [dbo].[yaf_User] b on b.UserID=m.UserID
        left join [dbo].[yaf_UserProfile] up on up.UserID=b.UserID
        join [dbo].[yaf_Topic] d on d.TopicID=m.TopicID
        join [dbo].[yaf_Forum] g on g.ForumID=d.ForumID
        join [dbo].[yaf_Category] h on h.CategoryID=g.CategoryID
        join [dbo].[yaf_Rank] c on c.RankID=b.RankID        

        WHERE ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC  
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_post_list_reverse10]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_post_list_reverse10](@TopicID int) as
begin
        set nocount on

    select top 10
        a.Posted,
        [Subject] = d.Topic,
        a.[Message],
        a.UserID,
        a.Flags,
        UserName = IsNull(a.UserName,b.Name),
        DisplayName = IsNull(a.UserDisplayName,b.DisplayName),
        Style = b.UserStyle,
        b.[Signature]
    from
        [dbo].[yaf_Message] a 
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] d on d.TopicID = a.TopicID
    where
        (a.Flags & 24)=16 and
        a.TopicID = @TopicID
    order by
        a.Posted desc
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_changepassword]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_changepassword]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Password nvarchar(256),
@PasswordSalt nvarchar(256),
@PasswordFormat nvarchar(256),
@PasswordAnswer nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET [Password]=@Password, PasswordSalt=@PasswordSalt,
		PasswordFormat=@PasswordFormat, PasswordAnswer=@PasswordAnswer
	WHERE UsernameLwd=LOWER(@UserName) and ApplicationID=@ApplicationID;

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_changepasswordquestionandanswer]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_changepasswordquestionandanswer]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@PasswordQuestion nvarchar(256),
@PasswordAnswer nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET PasswordQuestion=@PasswordQuestion, PasswordAnswer=@PasswordAnswer
	WHERE UsernameLwd=LOWER(@UserName) and ApplicationID=@ApplicationID;

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_CreateApplication]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_CreateApplication]
(
@ApplicationName nvarchar(256),
@ApplicationID uniqueidentifier OUTPUT
)
AS
BEGIN
    	SET @ApplicationID = (SELECT ApplicationID FROM [dbo].[yaf_prov_Application] WHERE ApplicationNameLwd=LOWER(@ApplicationName))
	
	IF (@ApplicationID IS Null)
	BEGIN
		    SELECT  @ApplicationID = NEWID()
            INSERT  [dbo].[yaf_prov_Application] (ApplicationID, ApplicationName, ApplicationNameLwd)
            VALUES  (@ApplicationID, @ApplicationName, LOWER(@ApplicationName))
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_createuser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_createuser]
(
@ApplicationName nvarchar(256),
@Username nvarchar(256),
@Password nvarchar(256),
@PasswordSalt nvarchar(256) = null,
@PasswordFormat nvarchar(256) = null,
@Email nvarchar(256) = null,
@PasswordQuestion nvarchar(256) = null,
@PasswordAnswer nvarchar(256) = null,
@IsApproved bit = null,
@UTCTIMESTAMP datetime,
@UserKey nvarchar(64) = null out
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	IF @UserKey IS NULL
		SET @UserKey = NEWID()
		
	INSERT INTO [dbo].[yaf_prov_Membership] (UserID,ApplicationID,Joined,Username,UsernameLwd,[Password],PasswordSalt,PasswordFormat,Email,EmailLwd,PasswordQuestion,PasswordAnswer,IsApproved)
		VALUES (@UserKey, @ApplicationID, @UTCTIMESTAMP ,@Username, LOWER(@Username), @Password, @PasswordSalt, @PasswordFormat, @Email, LOWER(@Email), @PasswordQuestion, @PasswordAnswer, @IsApproved);
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_deleteuser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_deleteuser]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@DeleteAllRelated bit
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier, @UserID nvarchar(64)
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	-- get the userID
	SELECT @UserID = UserID FROM [dbo].[yaf_prov_Membership] WHERE ApplicationID = @ApplicationID AND UsernameLwd = LOWER(@UserName);

	IF (@UserID IS NOT NULL)
	BEGIN
		-- Delete records from membership
		DELETE FROM [dbo].[yaf_prov_Membership] WHERE UserID = @UserID
		-- Delete from Role table
		DELETE FROM [dbo].[yaf_prov_RoleMembership] WHERE UserID = @UserID
		-- Delete from Profile table
		DELETE FROM [dbo].[yaf_prov_Profile] WHERE UserID = @UserID
	END	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_findusersbyemail]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_findusersbyemail]
(
@ApplicationName nvarchar(256),
@EmailAddress nvarchar(256),
@PageIndex int,
@PageSize int
)
AS
BEGIN
    
    -- Set the page bounds
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DECLARE @PagingLowerBoundary int
    DECLARE @PagingUpperBoundary int
    DECLARE @TotalRecords   int
    SET @PagingLowerBoundary = @PageSize * @PageIndex
    SET @PagingUpperBoundary = @PageSize - 1 + @PagingLowerBoundary
    
	CREATE TABLE #RowNumber (RowNumber int IDENTITY (1, 1), UserID nvarchar(64) collate database_default)
	
	INSERT INTO #RowNumber (UserID) SELECT m.UserID FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID  WHERE a.ApplicationID = @ApplicationID AND m.EmailLwd = LOWER(@EmailAddress)

	SELECT m.*, r.RowNumber FROM [dbo].[yaf_prov_Membership] m INNER JOIN #RowNumber r ON m.UserID = r.UserID WHERE r.RowNumber >= @PagingLowerBoundary AND r.RowNumber <= @PagingUpperBoundary;
    
	SET @TotalRecords = (SELECT COUNT(RowNumber) FROM #RowNumber)
	DROP TABLE #RowNumber
	RETURN @TotalRecords
   
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_findusersbyname]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_findusersbyname]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@PageIndex int,
@PageSize int
)
AS
BEGIN
    
    -- Set the page bounds
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DECLARE @PagingLowerBoundary int
    DECLARE @PagingUpperBoundary int
    DECLARE @TotalRecords   int
    SET @PagingLowerBoundary = @PageSize * @PageIndex
    SET @PagingUpperBoundary = @PageSize - 1 + @PagingLowerBoundary
    
	CREATE TABLE #RowNumber (RowNumber int IDENTITY (1, 1),  UserID nvarchar(64) collate database_default)
	
	INSERT INTO #RowNumber (UserID) SELECT m.UserID FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID WHERE a.ApplicationID = @ApplicationID AND m.UsernameLwd LIKE '%' + LOWER(@UserName) + '%'

	SELECT m.*, r.RowNumber FROM [dbo].[yaf_prov_Membership] m INNER JOIN #RowNumber r ON m.UserID = r.UserID WHERE r.RowNumber >= @PagingLowerBoundary AND r.RowNumber <= @PagingUpperBoundary;
    
	SET @TotalRecords = (SELECT COUNT(RowNumber) FROM #RowNumber)
	DROP TABLE #RowNumber
	RETURN @TotalRecords
   
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_getallusers]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_getallusers]
(
@ApplicationName nvarchar(256),
@PageIndex int,
@PageSize int
)
AS
BEGIN
    
    -- Set the page bounds
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DECLARE @PagingLowerBoundary int
    DECLARE @PagingUpperBoundary int
    DECLARE @TotalRecords   int
    SET @PagingLowerBoundary = @PageSize * @PageIndex
    SET @PagingUpperBoundary = @PageSize - 1 + @PagingLowerBoundary
    
	CREATE TABLE #RowNumber (RowNumber int IDENTITY (1, 1),  UserID nvarchar(64) collate database_default)
	
	INSERT INTO #RowNumber (UserID) SELECT m.UserID FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID WHERE a.ApplicationID = @ApplicationID

	SELECT m.*, r.RowNumber FROM [dbo].[yaf_prov_Membership] m INNER JOIN #RowNumber r ON m.UserID = r.UserID WHERE r.RowNumber >= @PagingLowerBoundary AND r.RowNumber <= @PagingUpperBoundary;
    
	SET @TotalRecords = (SELECT COUNT(RowNumber) FROM #RowNumber)
	DROP TABLE #RowNumber
	RETURN @TotalRecords
   
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_getnumberofusersonline]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_getnumberofusersonline]
(
@ApplicationName nvarchar(256),
@TimeWindow int,
@CurrentTimeUtc DateTime
)
AS
BEGIN
    	DECLARE @ActivityDate DateTime
	SET @ActivityDate = DATEADD(n, - @TimeWindow, @CurrentTimeUtc)

	DECLARE @ApplicationID uniqueidentifier
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	DECLARE @NumberActive int
	SET @NumberActive = (SELECT COUNT(1) FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID  WHERE a.ApplicationID = @ApplicationID AND m.LastLogin >= @ActivityDate)
    
    RETURN @NumberActive

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_getuser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_getuser]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256) = null,
@UserKey nvarchar(64) = null,
@UserIsOnline bit,
@UTCTIMESTAMP datetime
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	IF (@UserKey IS NULL)
		SELECT m.* FROM [dbo].[yaf_prov_Membership] m WHERE m.UsernameLwd = LOWER(@UserName) and m.ApplicationID = @ApplicationID
	ELSE
		SELECT m.* FROM [dbo].[yaf_prov_Membership] m WHERE m.UserID = @UserKey and m.ApplicationID = @ApplicationID
	
	-- IF USER IS ONLINE DO AN UPDATE USER	
	IF (@UserIsOnline = 1)
	BEGIN
		UPDATE [dbo].[yaf_prov_Membership] SET LastActivity = @UTCTIMESTAMP  WHERE UsernameLwd = LOWER(@UserName) and ApplicationID = @ApplicationID
	END		
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_getusernamebyemail]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_getusernamebyemail]
(
@ApplicationName nvarchar(256),
@Email nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SELECT m.Username FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID  WHERE a.ApplicationID = @ApplicationID AND m.EmailLwd = LOWER(@Email);
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_profile_deleteinactive]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Profiles Create Procedures
-- =============================================

CREATE PROCEDURE [dbo].[yaf_prov_profile_deleteinactive]
(
@ApplicationName nvarchar(256),
@InactiveSinceDate datetime
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DELETE
    FROM    [dbo].[yaf_prov_Profile]
    WHERE   UserID IN
            (   SELECT  UserID
                FROM    [dbo].[yaf_prov_Membership] m
                WHERE   ApplicationID = @ApplicationID
                        AND (LastActivity <= @InactiveSinceDate)
            )

    SELECT  @@ROWCOUNT
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_profile_deleteprofiles]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_profile_deleteprofiles]
(
@ApplicationName nvarchar(256),
@UserNames nvarchar(4000)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0

			DELETE FROM [dbo].[yaf_prov_Profile] WHERE UserID IN (SELECT UserID FROM [dbo].[yaf_prov_Membership] WHERE UsernameLwd = LOWER(@UserName) AND ApplicationID = @ApplicationID)

            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Error
            END
            IF (@@ROWCOUNT <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END

    SELECT @NumDeleted

    RETURN 0

Error:

    RETURN @ErrorCode
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_profile_getnumberinactiveprofiles]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_profile_getnumberinactiveprofiles]
    @ApplicationName        nvarchar(256),
    @InactiveSinceDate      datetime
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    SELECT  COUNT(*)
    FROM    [dbo].[yaf_prov_Membership] m, [dbo].[yaf_prov_Profile] p
    WHERE   ApplicationID = @ApplicationID
        AND m.UserID = p.UserID
        AND (LastActivity <= @InactiveSinceDate)
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_profile_getprofiles]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_profile_getprofiles]
(
	@ApplicationName        nvarchar(256),
	@PageIndex              int,
	@PageSize               int,
	@UserNameToMatch        nvarchar(256) = NULL,
	@InactiveSinceDate      datetime      = NULL
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexID int IDENTITY (0, 1) NOT NULL,
        UserID nvarchar(64) collate database_default
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserID)
        SELECT  m.UserID
        FROM    [dbo].[yaf_prov_Membership] m, [dbo].[yaf_prov_Profile] p
        WHERE   ApplicationID = @ApplicationID
            AND m.UserID = p.UserID
            AND (@InactiveSinceDate IS NULL OR LastActivity <= @InactiveSinceDate)
            AND (@UserNameToMatch IS NULL OR m.UsernameLwd LIKE LOWER(@UserNameToMatch))
        ORDER BY Username


    SELECT  m.Username, m.LastActivity, p.*
    FROM    [dbo].[yaf_prov_Membership] m, [dbo].[yaf_prov_Profile] p, #PageIndexForUsers i
    WHERE   m.UserId = p.UserId AND p.UserId = i.UserID AND i.IndexID >= @PageLowerBound AND i.IndexID <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_resetpassword]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_resetpassword]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Password nvarchar(256),
@PasswordSalt nvarchar(256),
@PasswordFormat nvarchar(256),
@MaxInvalidAttempts int,
@PasswordAttemptWindow int,
@CurrentTimeUtc datetime
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET
	[Password] = @Password,
	PasswordSalt = @PasswordSalt,
	PasswordFormat = @PasswordFormat,
	LastPasswordChange = @CurrentTimeUtc
	WHERE ApplicationID = @ApplicationID AND
	UsernameLwd = LOWER(@UserName);

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_addusertorole]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Roles Create Procedures
-- =============================================

CREATE PROCEDURE [dbo].[yaf_prov_role_addusertorole]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
	DECLARE @UserID nvarchar(64)
	DECLARE @RoleID uniqueidentifier
	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SET @UserID = (SELECT UserID FROM [dbo].[yaf_prov_Membership] m WHERE m.UsernameLwd=LOWER(@UserName) AND m.ApplicationID = @ApplicationID)
	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r WHERE r.RoleNameLwd=LOWER(@Rolename) AND r.ApplicationID = @ApplicationID)

	IF (@UserID IS NULL OR @RoleID IS NULL)
		RETURN;
	
	IF (NOT EXISTS(SELECT 1 FROM [dbo].[yaf_prov_RoleMembership] rm WHERE rm.UserID=@UserID AND rm.RoleID=@RoleID))
		INSERT INTO [dbo].[yaf_prov_RoleMembership] (RoleID, UserID) VALUES (@RoleID, @UserID);
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_createrole]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_role_createrole]
(
@ApplicationName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	IF (NOT EXISTS(SELECT 1 FROM [dbo].[yaf_prov_Role] r WHERE r.ApplicationID = @ApplicationID AND r.RoleNameLwd = LOWER(@Rolename)))
		INSERT INTO [dbo].[yaf_prov_Role] (RoleID, ApplicationID, RoleName, RoleNameLwd) VALUES (NEWID(),@ApplicationID, @Rolename,LOWER(@Rolename));		
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_deleterole]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_role_deleterole]
(
@ApplicationName nvarchar(256),
@Rolename nvarchar(256),
@DeleteOnlyIfRoleIsEmpty bit
)
AS
BEGIN
    	DECLARE @RoleID uniqueidentifier
	DECLARE @ErrorCode int
	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT	
	
	SET @ErrorCode = 0
	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r WHERE r.RoleNameLwd=LOWER(@Rolename) AND r.ApplicationID = @ApplicationID)
	
	IF (@DeleteOnlyIfRoleIsEmpty <> 0)
	BEGIN
		IF (EXISTS (SELECT 1 FROM [dbo].[yaf_prov_RoleMembership] rm WHERE rm.RoleID=@RoleID))
			SELECT @ErrorCode = 2
	ELSE
		DELETE FROM [dbo].[yaf_prov_RoleMembership] WHERE RoleID=@RoleID
	END	

	IF (@ErrorCode = 0)
		DELETE FROM [dbo].[yaf_prov_Role] WHERE RoleID=@RoleID
    
    RETURN @ErrorCode	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_exists]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_role_exists]
(
@ApplicationName nvarchar(256),
@RoleName nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	SELECT COUNT(1) FROM [dbo].[yaf_prov_Role]
		WHERE RoleNameLwd = LOWER(@RoleName) AND ApplicationID = @ApplicationID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_findusersinrole]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_role_findusersinrole]
(
@ApplicationName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @RoleID uniqueidentifier
	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r INNER JOIN [dbo].[yaf_prov_Application] a ON r.ApplicationID = a.ApplicationID WHERE r.RoleNameLwd=LOWER(@Rolename) AND a.ApplicationID = @ApplicationID)

	SELECT m.* FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_RoleMembership] rm ON m.UserID = rm.UserID WHERE rm.RoleID = @RoleID
		
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_getroles]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_role_getroles]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256) = null
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
 	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	IF (@UserName is null)
		SELECT r.* FROM [dbo].[yaf_prov_Role] r WHERE r.ApplicationID = @ApplicationID
	ELSE
		SELECT
			r.*
		FROM
			[dbo].[yaf_prov_Role] r
		INNER JOIN
			[dbo].[yaf_prov_RoleMembership] rm ON r.RoleID = rm.RoleID
		INNER JOIN
			[dbo].[yaf_prov_Membership] m ON m.UserID = rm.UserID
		WHERE
			r.ApplicationID  = @ApplicationID
			AND m.UsernameLwd = LOWER(@UserName)
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_isuserinrole]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_role_isuserinrole]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SELECT m.* FROM [dbo].[yaf_prov_RoleMembership] rm 
		INNER JOIN [dbo].[yaf_prov_Membership] m ON rm.UserID = m.UserID
		INNER JOIN [dbo].[yaf_prov_Role] r ON rm.RoleID = r.RoleID
		WHERE m.UsernameLwd=LOWER(@UserName) AND r.RoleNameLwd =LOWER(@Rolename) AND r.ApplicationID = @ApplicationID;
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_role_removeuserfromrole]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_role_removeuserfromrole]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @UserID nvarchar(64)
	DECLARE @RoleID uniqueidentifier
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT	
	
	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r WHERE r.RoleNameLwd = LOWER(@Rolename) AND r.ApplicationID = @ApplicationID)
	SET @UserID = (SELECT UserID FROM [dbo].[yaf_prov_Membership] m WHERE m.UsernameLwd=LOWER(@UserName) AND m.ApplicationID = @ApplicationID)
	
	DELETE FROM [dbo].[yaf_prov_RoleMembership] WHERE RoleID = @RoleID AND UserID=@UserID
	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_unlockuser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_unlockuser]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET
	IsLockedOut = 0,
	FailedPasswordAttempts = 0
	WHERE ApplicationID = @ApplicationID AND
	UsernameLwd = LOWER(@UserName);

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_updateuser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_prov_updateuser]
(
@ApplicationName nvarchar(256),
@UserKey nvarchar(64),
@UserName nvarchar(256),
@Email nvarchar(256),
@Comment text,
@IsApproved bit,
@LastLogin datetime,
@LastActivity datetime,
@UniqueEmail bit
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
		-- Check UserKey
	IF (@UserKey IS NULL)
        RETURN(1) -- 

	-- Check for UniqueEmail
	IF (@UniqueEmail = 1)
	BEGIN
		IF (EXISTS (SELECT 1 FROM [dbo].[yaf_prov_Membership] m WHERE m.UserID != @UserKey AND m.EmailLwd=LOWER(@Email) AND m.ApplicationID=@ApplicationID) )
			RETURN (2)
	END
	
	UPDATE [dbo].[yaf_prov_Membership] SET
	Username = @UserName,
	UsernameLwd = LOWER(@UserName),
	Email = @Email,
	EmailLwd = LOWER(@Email),
	IsApproved = @IsApproved,
	LastLogin = @LastLogin,
	LastActivity = @LastActivity,
	Comment = @Comment
	WHERE ApplicationID = @ApplicationID AND
	UserID = @UserKey;

	-- Return successful
	RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_prov_upgrade]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Membership Create Procedures
-- =============================================

CREATE PROCEDURE [dbo].[yaf_prov_upgrade]
(
@PreviousVersion int,
@NewVersion int,
@UTCTIMESTAMP datetime
)
AS
BEGIN
    		IF (@PreviousVersion = 31) OR (@PreviousVersion = 32)
		BEGIN
			-- RESOLVE SALT ISSUE IN 193 BETA and RC2
			UPDATE [dbo].[yaf_prov_Membership] SET PasswordSalt='UwB5AHMAdABlAG0ALgBCAHkAdABlAFsAXQA=' WHERE PasswordSalt IS NOT NULL;
			UPDATE [dbo].[yaf_prov_Membership] SET Joined=@UTCTIMESTAMP  WHERE Joined IS NULL;
		END	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_rank_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_rank_delete](@RankID int) as begin
        delete from [dbo].[yaf_Rank] where RankID = @RankID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_rank_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_rank_list](@BoardID int,@RankID int=null) as begin
        if @RankID is null
        select
            a.*
        from
            [dbo].[yaf_Rank] a
        where
            a.BoardID=@BoardID
        order by
            a.SortOrder,
            a.Name
    else
        select
            a.*
        from
            [dbo].[yaf_Rank] a
        where
            a.RankID = @RankID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_rank_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_rank_save](
    @RankID		int,
    @BoardID	int,
    @Name		nvarchar(50),
    @IsStart	bit,
    @IsLadder	bit,
    @MinPosts	int,
    @RankImage	nvarchar(50)=null,
    @PMLimit    int,
    @Style      nvarchar(255)=null,
    @SortOrder  smallint,
    @Description nvarchar(128)=null,
    @UsrSigChars int=null,
    @UsrSigBBCodes	nvarchar(255)=null,
    @UsrSigHTMLTags nvarchar(255)=null,
    @UsrAlbums int=null,
    @UsrAlbumImages int=null  
) as
begin
        declare @Flags int

    if @IsLadder=0 set @MinPosts = null
    if @IsLadder=1 and @MinPosts is null set @MinPosts = 0
    
    set @Flags = 0
    if @IsStart<>0 set @Flags = @Flags | 1
    if @IsLadder<>0 set @Flags = @Flags | 2

    if @Style IS NOT NULL AND LEN(@Style) <=2 set @Style = NULL

    if @RankID>0 begin
        update [dbo].[yaf_Rank] set
            Name = @Name,
            Flags = @Flags,
            MinPosts = @MinPosts,
            RankImage = @RankImage,
            PMLimit = @PMLimit,
            Style = @Style,
            SortOrder = @SortOrder,
            [Description] = @Description,
            UsrSigChars = @UsrSigChars,
            UsrSigBBCodes = @UsrSigBBCodes,
            UsrSigHTMLTags = @UsrSigHTMLTags,
            UsrAlbums = @UsrAlbums,
            UsrAlbumImages = @UsrAlbumImages
        where RankID = @RankID
    end
    else begin
        insert into [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,RankImage, PMLimit,Style,SortOrder,Description,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages)
        values(@BoardID,@Name,@Flags,@MinPosts,@RankImage,@PMLimit,@Style,@SortOrder,@Description,@UsrSigChars,@UsrSigBBCodes,@UsrSigHTMLTags,@UsrAlbums,@UsrAlbumImages);
        set @RankID = SCOPE_IDENTITY()
        -- select @RankID = RankID from [dbo].[yaf_Rank] where RankID = @@Identity;
    end	
        -- group styles override rank styles
 IF @Style IS NOT NULL AND len(@Style) > 2
      BEGIN
      EXEC [dbo].[yaf_user_savestyle] null,@RankID
      END	
        
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_readforum_addorupdate]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_readforum_addorupdate] (
    @UserID INT
    ,@ForumID INT,
      @UTCTIMESTAMP datetime
    )
AS
BEGIN
    DECLARE @LastAccessDate DATETIME

    IF EXISTS (
            SELECT 1
            FROM [dbo].[yaf_ForumReadTracking]
            WHERE UserID = @UserID
                AND ForumID = @ForumID
            )
    BEGIN
        SET @LastAccessDate = (
                SELECT LastAccessDate
                FROM [dbo].[yaf_ForumReadTracking]
                WHERE (
                        UserID = @UserID
                        AND ForumID = @ForumID
                        )
                )

        UPDATE [dbo].[yaf_ForumReadTracking]
        SET LastAccessDate = @UTCTIMESTAMP
        WHERE LastAccessDate = @LastAccessDate
            AND UserID = @UserID
            AND ForumID = @ForumID
    END
    ELSE
    BEGIN
        INSERT INTO [dbo].[yaf_ForumReadTracking] (
            UserID
            ,ForumID
            ,LastAccessDate
            )
        VALUES (
            @UserID
            ,@ForumID
            ,@UTCTIMESTAMP
            )
    END

    -- Delete TopicReadTracking for forum...
    DELETE
    FROM [dbo].[yaf_TopicReadTracking]
    WHERE UserID = @UserID
        AND TopicID IN (
            SELECT TopicID
            FROM [dbo].[yaf_Topic]
            WHERE ForumID = @ForumID
            )
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_readforum_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_readforum_delete](@UserID int) as
begin
        delete from [dbo].[yaf_ForumReadTracking] where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_readforum_lastread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_readforum_lastread](@UserID int,@ForumID int) as
begin
        SELECT LastAccessDate FROM  [dbo].[yaf_ForumReadTracking] WHERE UserID = @UserID AND ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_readtopic_addorupdate]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_readtopic_addorupdate](@UserID int,@TopicID int,
      @UTCTIMESTAMP datetime) as
begin

    declare	@LastAccessDate	datetime
    set @LastAccessDate = (select top 1 LastAccessDate from [dbo].[yaf_TopicReadTracking] where UserID=@UserID AND TopicID=@TopicID)
    IF @LastAccessDate is not null
    begin	     
          update [dbo].[yaf_TopicReadTracking] set LastAccessDate=@UTCTIMESTAMP where LastAccessDate = @LastAccessDate AND UserID=@UserID AND TopicID=@TopicID
    end
    ELSE
      begin
          insert into [dbo].[yaf_TopicReadTracking](UserID,TopicID,LastAccessDate)
          values (@UserID, @TopicID, @UTCTIMESTAMP)
      end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_readtopic_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_readtopic_delete](@UserID int) as
begin
        delete from [dbo].[yaf_TopicReadTracking] where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_readtopic_lastread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_readtopic_lastread](@UserID int,@TopicID int) as
begin
        SELECT LastAccessDate FROM  [dbo].[yaf_TopicReadTracking] WHERE UserID = @UserID AND TopicID = @TopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_recent_users]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_recent_users](@BoardID int,@TimeSinceLastLogin int,@StyledNicks bit=0) as
begin  
    SELECT U.UserID,
    UserName = U.Name,
    UserDisplayName = U.DisplayName,
    IsCrawler = 0,
    UserCount = 1,
    IsHidden = (IsActiveExcluded),
    Style = CASE(@StyledNicks)
                WHEN 1 THEN U.UserStyle
                ELSE ''
            END,
    U.LastVisit
    FROM [dbo].[yaf_User] AS U
                JOIN [dbo].[yaf_Rank] R on R.RankID=U.RankID
    WHERE (U.IsApproved = '1') AND
     U.BoardID = @BoardID AND
     (DATEADD(mi, 0 - @TimeSinceLastLogin, GETDATE()) < U.LastVisit) AND
                --Excluding guests
                NOT EXISTS(             
                    SELECT 1 
                        FROM [dbo].[yaf_UserGroup] x
                            inner join [dbo].[yaf_Group] y ON y.GroupID=x.GroupID 
                        WHERE x.UserID=U.UserID and (y.Flags & 2)<>0
                    )
    ORDER BY U.LastVisit
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_registry_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_registry_list](@Name nvarchar(50) = null,@BoardID int = null) as
BEGIN
        if @BoardID is null
    begin
        IF @Name IS NULL OR @Name = ''
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] where BoardID is null
        END ELSE
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] WHERE LOWER(Name) = LOWER(@Name) and BoardID is null
        END
    end else 
    begin
        IF @Name IS NULL OR @Name = ''
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] where BoardID=@BoardID
        END ELSE
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] WHERE LOWER(Name) = LOWER(@Name) and BoardID=@BoardID
        END
    end
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_registry_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_registry_save](
    @Name nvarchar(50),
    @Value ntext = NULL,
    @BoardID int = null
) AS
BEGIN
        if @BoardID is null
    begin
        if exists(select 1 from [dbo].[yaf_Registry] where lower(Name)=lower(@Name))
            update [dbo].[yaf_Registry] set Value = @Value where lower(Name)=lower(@Name) and BoardID is null
        else
        begin
            insert into [dbo].[yaf_Registry](Name,Value) values(lower(@Name),@Value)
        end
    end else
    begin
        if exists(select 1 from [dbo].[yaf_Registry] where lower(Name)=lower(@Name) and BoardID=@BoardID)
            update [dbo].[yaf_Registry] set Value = @Value where lower(Name)=lower(@Name) and BoardID=@BoardID
        else
        begin
            insert into [dbo].[yaf_Registry](Name,Value,BoardID) values(lower(@Name),@Value,@BoardID)
        end
    end
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_replace_words_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_replace_words_delete](@ID int) AS
BEGIN
        DELETE FROM [dbo].[yaf_Replace_Words] WHERE ID = @ID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_replace_words_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_replace_words_list]
(
    @BoardID int,
    @ID int = null
)
AS BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
        SELECT * FROM [dbo].[yaf_Replace_Words] WHERE BoardId = @BoardID AND ID = @ID
    ELSE
        SELECT * FROM [dbo].[yaf_Replace_Words] WHERE BoardId = @BoardID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_replace_words_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_replace_words_save]
(
    @BoardID int,
    @ID int = null,
    @BadWord nvarchar(255),
    @GoodWord nvarchar(255)
)
AS
BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
    BEGIN
        UPDATE [dbo].[yaf_Replace_Words] SET BadWord = @BadWord, GoodWord = @GoodWord WHERE ID = @ID		
    END
    ELSE BEGIN
        INSERT INTO [dbo].[yaf_Replace_Words]
            (BoardId,BadWord,GoodWord)
        VALUES
            (@BoardID,@BadWord,@GoodWord)
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_rss_topic_latest]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_rss_topic_latest]
(
    @BoardID int,
    @NumPosts int,
    @PageUserID int,
    @StyledNicks bit = 0,
    @ShowNoCountPosts  bit = 0
)
AS
BEGIN 
    SELECT TOP(@NumPosts)
        LastMessage = m.[Message],
        t.LastPosted,
        t.ForumID,
        f.Name as Forum,
        t.Topic,
        t.TopicID,
        t.TopicMovedID,
        t.UserID,
        t.UserName,
        t.UserDisplayName,
        StarterIsGuest = (select x.IsGuest from [dbo].[yaf_User] x where x.UserID=t.UserID),		
        t.LastMessageID,
        t.LastMessageFlags,
        t.LastUserID,			
        LastUserName = IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserDisplayName = IsNull(t.LastUserName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserIsGuest = (select x.IsGuest from [dbo].[yaf_User] x where x.UserID=t.LastUserID),	
        t.Posted					
    FROM
        [dbo].[yaf_Message] m 
    INNER JOIN	
        [dbo].[yaf_Topic] t  ON t.LastMessageID = m.MessageID
    INNER JOIN
        [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID	
    INNER JOIN
        [dbo].[yaf_Category] c ON c.CategoryID = f.CategoryID
    JOIN
        [dbo].[yaf_ActiveAccess] v  with(nolock) ON v.ForumID=f.ForumID
    WHERE	
        c.BoardID = @BoardID
        AND t.TopicMovedID is NULL
        AND v.UserID=@PageUserID
        AND (CONVERT(int,v.ReadAccess) <> 0)
        AND t.IsDeleted != 1
        AND t.LastPosted IS NOT NULL
        AND
        f.Flags & 4 <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 4 END)
    ORDER BY
        t.LastPosted DESC;
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_rsstopic_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_rsstopic_list]
(
    @ForumID int,
    @TopicLimit int
)
as
begin
  
    select top(@TopicLimit)
	Topic = a.Topic,
	TopicID = a.TopicID, 
	Name = b.Name, 
	LastPosted = IsNull(a.LastPosted,a.Posted), 
	LastUserID = IsNull(a.LastUserID, a.UserID), 
	LastMessageID= IsNull(a.LastMessageID,
	(select top 1 m.MessageID 
	from [dbo].[yaf_Message] m where m.TopicID = a.TopicID order by m.Posted desc)), 
	LastMessageFlags = IsNull(a.LastMessageFlags,22) , 
	LastMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(a.TopicMovedID,a.TopicID) AND mes2.IsApproved = 1 AND mes2.IsDeleted = 0 ORDER BY mes2.Posted DESC) 

from [dbo].[yaf_Topic] a, 
     [dbo].[yaf_Forum] b 

where a.ForumID = @ForumID and 
      b.ForumID = a.ForumID and 
	  a.TopicMovedID is null and 
	  a.IsDeleted = 0 and
	  a.NumPosts > 0

order by LastPosted desc
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_shoutbox_clearmessages]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_shoutbox_clearmessages]
(
    @BoardId int,
    @UTCTIMESTAMP datetime
)
AS
BEGIN
        DELETE FROM
            [dbo].[yaf_ShoutboxMessage]
        WHERE
            BoardId = @BoardId AND
            DATEDIFF(minute, Date, @UTCTIMESTAMP ) > 1
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_shoutbox_getmessages]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*****************************************************************************************************
//  Original code by: DLESKTECH at http://www.dlesktech.com/support.aspx
//  Modifications by: KASL Technologies at www.kasltechnologies.com
//  Modifications for integration into YAF/Conventions by Jaben Cargman
*****************************************************************************************************/

CREATE PROCEDURE [dbo].[yaf_shoutbox_getmessages]
(
  @BoardId int,
  @NumberOfMessages int, @StyledNicks bit = 0
)  
AS
BEGIN

    SELECT TOP(@NumberOfMessages)
        sh.[ShoutBoxMessageID],
        sh.UserName,
        sh.UserID,
        sh.[Message],
        sh.[Date], 
        Style= case(@StyledNicks)
            when 1 then  usr.UserStyle
            else ''	 end
                
    FROM
        [dbo].[yaf_ShoutboxMessage] sh
        JOIN [dbo].[yaf_User] usr on usr.UserID = sh.UserID
    WHERE 
        sh.BoardId = @BoardId
    ORDER BY sh.Date DESC
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_shoutbox_savemessage]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_shoutbox_savemessage](
    @UserName		nvarchar(255)=null,
    @BoardId		int,
    @UserID			int,
    @Message		ntext,
    @Date			datetime=null,
    @IP				varchar(39),
    @UTCTIMESTAMP datetime
)
AS
BEGIN
DECLARE @OverrideDisplayName BIT, @ReplaceName nvarchar(255)
        IF @Date IS NULL
        SET @Date = @UTCTIMESTAMP 
        -- this check is for guest user only to not override replace name 
if (SELECT Name FROM [dbo].[yaf_User] WHERE UserID = @UserID) != @UserName
    begin
    SET @OverrideDisplayName = 1
    end	
    SET @ReplaceName = (CASE WHEN @OverrideDisplayName = 1 THEN @UserName ELSE (SELECT DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID) END);
    INSERT [dbo].[yaf_ShoutboxMessage] (UserName,UserDisplayName,BoardId, UserID, Message, Date, IP)
    VALUES (@UserName,@ReplaceName, @BoardId, @UserID, @Message, @Date, @IP)
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_smiley_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_smiley_delete](@SmileyID int=null) as begin
        if @SmileyID is not null
        delete from [dbo].[yaf_Smiley] where SmileyID=@SmileyID
    else
        delete from [dbo].[yaf_Smiley]
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_smiley_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_smiley_list](@BoardID int,@SmileyID int=null) as
begin
        if @SmileyID is null
        select
        SmileyID,
        BoardID,
        Code,
        Icon,
        Emoticon,
        SortOrder = CONVERT(int,SortOrder)	 
        from [dbo].[yaf_Smiley] where BoardID=@BoardID order by SortOrder, LEN(Code) desc
    else
        select 	
        SmileyID,
        BoardID,
        Code,
        Icon,
        Emoticon,
        SortOrder = CONVERT(int,SortOrder)	 
        from [dbo].[yaf_Smiley] where SmileyID=@SmileyID order by SortOrder
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_smiley_listunique]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_smiley_listunique](@BoardID int) as
begin
        select 
        Icon, 
        Emoticon,
        Code = (select top 1 Code from [dbo].[yaf_Smiley] x where x.Icon=[dbo].[yaf_Smiley].Icon),
        SortOrder = (select top 1 SortOrder from [dbo].[yaf_Smiley] x where x.Icon=[dbo].[yaf_Smiley].Icon order by x.SortOrder asc)
    from 
        [dbo].[yaf_Smiley]
    where
        BoardID=@BoardID
    group by
        Icon,
        Emoticon
    order by
        SortOrder,
        Code
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_smiley_resort]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_smiley_resort](@BoardID int,@SmileyID int,@Move int) as
begin
        declare @Position int

    SELECT @Position=SortOrder FROM [dbo].[yaf_Smiley] WHERE BoardID=@BoardID and SmileyID=@SmileyID

    if (@Position is null) return

    if (@Move > 0) begin
        update [dbo].[yaf_Smiley]
            set SortOrder=SortOrder-1
            where BoardID=@BoardID and 
                SortOrder between @Position and (@Position + @Move) and
                SortOrder between 1 and 255
    end
    else if (@Move < 0) begin
        update [dbo].[yaf_Smiley]
            set SortOrder=SortOrder+1
            where BoardID=@BoardID and 
                SortOrder between (@Position+@Move) and @Position and
                SortOrder between 0 and 254
    end

    SET @Position = @Position + @Move

    if (@Position>255) SET @Position = 255
    else if (@Position<0) SET @Position = 0

    update [dbo].[yaf_Smiley]
        set SortOrder=@Position
        where BoardID=@BoardID and 
            SmileyID=@SmileyID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_smiley_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_smiley_save](@SmileyID int=null,@BoardID int,@Code nvarchar(10),@Icon nvarchar(50),@Emoticon nvarchar(50),@SortOrder tinyint,@Replace smallint=0) as begin
        if @SmileyID is not null begin
        update [dbo].[yaf_Smiley] set Code = @Code, Icon = @Icon, Emoticon = @Emoticon, SortOrder = @SortOrder where SmileyID = @SmileyID
    end
    else begin
        if @Replace>0
            delete from [dbo].[yaf_Smiley] where Code=@Code

        if not exists(select 1 from [dbo].[yaf_Smiley] where BoardID=@BoardID and Code=@Code)
            insert into [dbo].[yaf_Smiley](BoardID,Code,Icon,Emoticon,SortOrder) values(@BoardID,@Code,@Icon,@Emoticon,@SortOrder)
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_spam_words_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_spam_words_delete](@ID int) AS
BEGIN
        DELETE FROM [dbo].[yaf_Spam_Words] WHERE ID = @ID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_spam_words_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_spam_words_list]
(
    @BoardID int,
    @ID int = null
)
AS BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
        SELECT * FROM [dbo].[yaf_Spam_Words] WHERE BoardId = @BoardID AND ID = @ID
    ELSE
        SELECT * FROM [dbo].[yaf_Spam_Words] WHERE BoardId = @BoardID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_spam_words_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_spam_words_save]
(
    @BoardID int,
    @ID int = null,
    @SpamWord nvarchar(255)
)
AS
BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
    BEGIN
        UPDATE [dbo].[yaf_Spam_Words] SET SpamWord = @SpamWord WHERE ID = @ID		
    END
    ELSE BEGIN
        INSERT INTO [dbo].[yaf_Spam_Words]
            (BoardId,SpamWord)
        VALUES
            (@BoardID,@SpamWord)
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_system_initialize]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_system_initialize](
    @Name		nvarchar(50),
    @TimeZone	int,
    @Culture	varchar(10),
    @LanguageFile nvarchar(50),
    @ForumEmail	nvarchar(50),
	@ForumBaseUrlMask	nvarchar(255),
    @SmtpServer	nvarchar(50),
    @User		nvarchar(255),
    @UserEmail	nvarchar(255),
    @UserKey	nvarchar(64),
    @RolePrefix nvarchar(255),
    @UTCTIMESTAMP datetime
    
) as 
begin
        DECLARE @tmpValue AS nvarchar(100)

    -- initalize required 'registry' settings
    EXEC [dbo].[yaf_registry_save] 'version','1'
    EXEC [dbo].[yaf_registry_save] 'versionname','1.0.0'
    SET @tmpValue = CAST(@TimeZone AS nvarchar(100))
    EXEC [dbo].[yaf_registry_save] 'timezone', @tmpValue
    EXEC [dbo].[yaf_registry_save] 'culture', @Culture
    EXEC [dbo].[yaf_registry_save] 'language', @LanguageFile
    EXEC [dbo].[yaf_registry_save] 'smtpserver', @SmtpServer
    EXEC [dbo].[yaf_registry_save] 'forumemail', @ForumEmail
	EXEC [dbo].[yaf_registry_save] 'baseurlmask', @ForumBaseUrlMask
    
    -- initalize new board
    EXEC [dbo].[yaf_board_create] @Name, @Culture, @LanguageFile, '','',@User,@UserEmail,@UserKey,1,@RolePrefix,@UTCTIMESTAMP
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_system_updateversion]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_system_updateversion]
(
    @Version		int,
    @VersionName	nvarchar(50)
) 
AS
BEGIN
        DECLARE @tmpValue AS nvarchar(100)
    SET @tmpValue = CAST(@Version AS nvarchar(100))
    EXEC [dbo].[yaf_registry_save] 'version', @tmpValue
    EXEC [dbo].[yaf_registry_save] 'versionname',@VersionName

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_active]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_active]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   
   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
     where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	
      )	  
      select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID       
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC   	
    
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_announcements]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_announcements]
(
    @BoardID int,
    @NumPosts int,
    @PageUserID int
)
AS
BEGIN
    SELECT DISTINCT TOP (@NumPosts) 
	t.Topic, 
	t.LastPosted, 
	t.Posted,
	t.UserID,
	t.LastUserID, 
	t.TopicID,
	t.TopicMovedID, 
	Message = (select  CONVERT(VARCHAR(MAX), m.Message) from [dbo].[yaf_Message] m where t.LastMessageID = m.MessageID),
	t.LastMessageID, 
	t.LastMessageFlags 
	FROM
    [dbo].[yaf_Topic] t 
    INNER JOIN [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID
    INNER JOIN [dbo].[yaf_Category] c 
    ON c.CategoryID = f.CategoryID 
    join [dbo].[yaf_ActiveAccess] v  with(nolock) on v.ForumID=f.ForumID
    WHERE c.BoardID = @BoardID AND v.UserID=@PageUserID AND (CONVERT(int,v.ReadAccess) <> 0 or (f.Flags & 2) = 0) AND t.IsDeleted=0 AND t.TopicMovedID IS NULL AND (t.Priority = 2) ORDER BY t.LastPosted DESC;
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_create_by_message]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_topic_create_by_message] (
    @MessageID int,
    @ForumID	int,
    @Subject	nvarchar(100),
    @UTCTIMESTAMP datetime
) as
begin
        
declare		@UserID		int
declare		@Posted		datetime

set @UserID = (select UserID from [dbo].[yaf_message] where MessageID =  @MessageID)
set  @Posted  = (select  posted from [dbo].[yaf_message] where MessageID =  @MessageID)


    declare @TopicID int
    --declare @MessageID int

    if @Posted is null set @Posted = @UTCTIMESTAMP 

    insert into [dbo].[yaf_Topic](ForumID,Topic,UserID,Posted,[Views],Priority,PollID,UserName,NumPosts)
    values(@ForumID,@Subject,@UserID,@Posted,0,0,null,null,0)

    set @TopicID = @@IDENTITY
--	exec [dbo].[yaf_message_save] @TopicID,@UserID,@Message,@UserName,@IP,@Posted,null,@Flags,@MessageID output
    select TopicID = @TopicID, MessageID = @MessageID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_delete] (@TopicID int,@UpdateLastPost bit=1,@EraseTopic bit=0) 
AS
BEGIN
        SET NOCOUNT ON
    DECLARE @ForumID int
    DECLARE @pollID int
    
    SELECT @ForumID=ForumID FROM  [dbo].[yaf_Topic] WHERE TopicID=@TopicID
    
    UPDATE [dbo].[yaf_Topic] SET LastMessageID = null WHERE TopicID = @TopicID
    
    UPDATE [dbo].[yaf_Forum] SET 
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null,
        LastPosted = null
    WHERE LastMessageID IN (SELECT MessageID FROM  [dbo].[yaf_Message] WHERE TopicID = @TopicID)
    
    UPDATE  [dbo].[yaf_Active] SET TopicID = null WHERE TopicID = @TopicID
    
    --delete messages and topics
    DELETE FROM  [dbo].[yaf_nntptopic] WHERE TopicID = @TopicID
    
    IF @EraseTopic = 0
    BEGIN
        UPDATE  [dbo].[yaf_topic] set Flags = Flags | 8 where TopicMovedID = @TopicID
        UPDATE  [dbo].[yaf_topic] set Flags = Flags | 8 where TopicID = @TopicID
        UPDATE  [dbo].[yaf_Message] set Flags = Flags | 8 where TopicID = @TopicID
    END
    ELSE
    BEGIN
        --remove polls	
        SELECT @pollID = pollID FROM  [dbo].[yaf_topic] WHERE TopicID = @TopicID
        IF (@pollID is not null)
        BEGIN
             exec [dbo].[yaf_pollgroup_remove] @pollID, @TopicID, null, null, null, 1, 1
        END	
    
        DELETE FROM  [dbo].[yaf_topic] WHERE TopicMovedID = @TopicID
        
        DELETE  [dbo].[yaf_Attachment] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID) 
        DELETE  [dbo].[yaf_MessageHistory] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID) 
		
		update [dbo].[yaf_Message] SET ReplyTo = null WHERE TopicID = @TopicID

		-- update user post count
		if not exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
          -- delete messages
		  DELETE  [dbo].[yaf_Message] WHERE TopicID = @TopicID
        else 
		   begin
		   declare @tmpUserID int;
		   declare message_cursor cursor for
		   select UserID from [dbo].[yaf_Message]
		   where TopicID=@TopicID
    
           -- delete messages
		   open message_cursor
    
		   fetch next from message_cursor
		   into @tmpUserID
    
		   -- Check @@FETCH_STATUS to see if there are any more rows to fetch.
		   while @@FETCH_STATUS = 0
    		   begin
		   UPDATE [dbo].[yaf_User] SET NumPosts = (SELECT count(MessageID) FROM [dbo].[yaf_Message] WHERE UserID = @tmpUserID AND IsDeleted = 0 AND IsApproved = 1) WHERE UserID = @tmpUserID

		   

		   DELETE  [dbo].[yaf_Message] WHERE TopicID = @TopicID and UserID = @tmpUserID
    
		   -- This is executed as long as the previous fetch succeeds.
		   fetch next from message_cursor
		   into @tmpUserID
		   end
    
		   close message_cursor
		   deallocate message_cursor

		end

		EXEC [dbo].[yaf_pollgroup_remove] @pollID, @TopicID, null, null, null, 0, 0 	
        
        DELETE  [dbo].[yaf_WatchTopic] WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_TopicReadTracking] WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_FavoriteTopic]  WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_Topic] WHERE TopicMovedID = @TopicID
        DELETE  [dbo].[yaf_Topic] WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_MessageReportedAudit] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID) 
        DELETE  [dbo].[yaf_MessageReported] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID)

		END
        
    --commit
    IF @UpdateLastPost<>0
        EXEC  [dbo].[yaf_forum_updatelastpost] @ForumID
    
    IF @ForumID is not null
        EXEC  [dbo].[yaf_forum_updatestats] @ForumID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_add]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* End of stored procedures for Buddy feature */

CREATE PROCEDURE [dbo].[yaf_topic_favorite_add] 
    @UserID int,
    @TopicID int
AS
BEGIN
    IF NOT EXISTS (SELECT ID FROM [dbo].[yaf_FavoriteTopic] WHERE (UserID = @UserID AND TopicID=@TopicID))
    BEGIN
        INSERT INTO [dbo].[yaf_FavoriteTopic] (UserID, TopicID) Values 
                                (@UserID, @TopicID)
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_count]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_favorite_count](@TopicID int) as
BEGIN
    SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = @TopicID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_details]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_favorite_details]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int

   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
        JOIN [dbo].[yaf_FavoriteTopic] z ON z.TopicID=c.TopicID AND z.UserID=@PageUserID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
        JOIN [dbo].[yaf_FavoriteTopic] z ON z.TopicID=c.TopicID AND z.UserID=@PageUserID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
      )	  
      select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicId = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,          
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID     
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC   
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_favorite_list](@UserID int) as
BEGIN
SELECT TopicID FROM [dbo].[yaf_FavoriteTopic] WHERE UserID=@UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_remove]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_favorite_remove] 
    @UserID int,
    @TopicID int
AS
BEGIN
    DELETE FROM [dbo].[yaf_FavoriteTopic] WHERE UserID=@UserID AND TopicID=@TopicID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_findduplicate]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_findduplicate]
(
    @TopicName nvarchar(255)
)
AS
BEGIN
    IF @TopicName IS NOT NULL
    BEGIN	
        IF EXISTS (SELECT TOP 1 1 FROM [dbo].[yaf_Topic] WHERE [Topic] LIKE  @TopicName AND TopicMovedID IS NULL)
        SELECT 1
        ELSE
        SELECT 0
    END
    ELSE
    BEGIN
        SELECT 0
    END	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_findnext]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_topic_findnext](@TopicID int) as
begin
        declare @LastPosted datetime
    declare @ForumID int
    select @LastPosted = LastPosted, @ForumID = ForumID from [dbo].[yaf_Topic] where TopicID = @TopicID AND TopicMovedID IS NULL
    select top 1 TopicID from [dbo].[yaf_Topic] where LastPosted>@LastPosted and ForumID = @ForumID AND IsDeleted=0 AND TopicMovedID IS NULL order by LastPosted asc
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_findprev]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_topic_findprev](@TopicID int) AS 
BEGIN
        DECLARE @LastPosted datetime
    DECLARE @ForumID int
    SELECT @LastPosted = LastPosted, @ForumID = ForumID FROM [dbo].[yaf_Topic] WHERE TopicID = @TopicID AND TopicMovedID IS NULL
    SELECT TOP 1 TopicID from [dbo].[yaf_Topic] where LastPosted<@LastPosted AND ForumID = @ForumID AND IsDeleted=0 AND TopicMovedID IS NULL ORDER BY LastPosted DESC
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_info]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_info]
(
    @TopicID int = null,
    @ShowDeleted bit = 0
)
AS
BEGIN
        IF @TopicID = 0 SET @TopicID = NULL

    IF @TopicID IS NULL
    BEGIN
        IF @ShowDeleted = 1 
            SELECT * FROM [dbo].[yaf_Topic]
        ELSE
            SELECT * FROM [dbo].[yaf_Topic] WHERE IsDeleted=0
    END
    ELSE
    BEGIN
        IF @ShowDeleted = 1 
            SELECT * FROM [dbo].[yaf_Topic] WHERE TopicID = @TopicID
        ELSE
            SELECT * FROM [dbo].[yaf_Topic] WHERE TopicID = @TopicID AND IsDeleted=0		
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_latest]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_latest]
(
    @BoardID int,
    @NumPosts int,
    @PageUserID int,
    @StyledNicks bit = 0,
    @ShowNoCountPosts  bit = 0,
    @FindLastRead bit = 0
)
AS
BEGIN  
  
    SELECT TOP(@NumPosts)
        t.LastPosted,
        t.ForumID,
        f.Name as Forum,
        t.Topic,
        t.Status,
        t.Styles,
        t.TopicID,
        t.TopicMovedID,
        t.UserID,
        UserName = IsNull(t.UserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.UserID)),
        UserDisplayName = IsNull(t.UserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.UserID)),		
        t.LastMessageID,
        t.LastMessageFlags,
        t.LastUserID,
        t.NumPosts,
		t.Views,
        t.Posted,	
		LastMessage = (select m.Message from [dbo].[yaf_Message] m where m.MessageID = t.LastMessageID),
        LastUserName = IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserDisplayName = IsNull(t.LastUserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserStyle = case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = t.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=f.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=t.TopicID AND y.UserID = @PageUserID)
             else ''	 end
            
    FROM	
        [dbo].[yaf_Topic] t 
    INNER JOIN
        [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID	
    INNER JOIN
        [dbo].[yaf_Category] c ON c.CategoryID = f.CategoryID
    JOIN
        [dbo].[yaf_ActiveAccess] v  with(nolock) ON v.ForumID=f.ForumID
    WHERE	
        c.BoardID = @BoardID
        AND t.TopicMovedID is NULL
        AND v.UserID=@PageUserID
        AND (CONVERT(int,v.ReadAccess) <> 0)
        AND t.IsDeleted != 1
        AND t.LastPosted IS NOT NULL
        AND
        f.Flags & 4 <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 4 END)
    ORDER BY
        t.LastPosted DESC;
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_latest_in_category]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_latest_in_category]
(
    @BoardID int,
    @CategoryID int,
	@NumPosts int,
    @PageUserID int,
    @StyledNicks bit = 0,
    @ShowNoCountPosts  bit = 0,
    @FindLastRead bit = 0
)
AS
BEGIN  
  
    SELECT TOP(@NumPosts)
        t.LastPosted,
        t.ForumID,
        f.Name as Forum,
        t.Topic,
        t.Status,
        t.Styles,
        t.TopicID,
        t.TopicMovedID,
        t.UserID,
        UserName = IsNull(t.UserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.UserID)),
        UserDisplayName = IsNull(t.UserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.UserID)),		
        t.LastMessageID,
        t.LastMessageFlags,
        t.LastUserID,
        t.NumPosts,
		t.Views,
        t.Posted,	
		LastMessage = (select m.Message from [dbo].[yaf_Message] m where m.MessageID = t.LastMessageID),
        LastUserName = IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserDisplayName = IsNull(t.LastUserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserStyle = case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = t.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=f.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=t.TopicID AND y.UserID = @PageUserID)
             else ''	 end
            
    FROM	
        [dbo].[yaf_Topic] t 
    INNER JOIN
        [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID	
    INNER JOIN
        [dbo].[yaf_Category] c ON c.CategoryID = f.CategoryID
    JOIN
        [dbo].[yaf_ActiveAccess] v  with(nolock) ON v.ForumID=f.ForumID
    WHERE	
	    c.BoardID = @BoardID
        AND c.CategoryID = @CategoryID
        AND t.TopicMovedID is NULL
        AND v.UserID=@PageUserID
        AND (CONVERT(int,v.ReadAccess) <> 0)
        AND t.IsDeleted != 1
        AND t.LastPosted IS NOT NULL
        AND
        f.Flags & 4 <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 4 END)
    ORDER BY
        t.LastPosted DESC;
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_list]
(
    @ForumID int,
    @UserID int = null,
    @Date datetime=null,
    @ToDate datetime=null,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,
    @ShowMoved  bit = 0,
    @FindLastRead bit = 0
)
AS
begin   
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   
   -- find total returned count
   select  @TotalRows = COUNT(c.TopicID)
   FROM [dbo].[yaf_Topic] c 
   WHERE c.ForumID = @ForumID
   AND	((c.Priority = 1) OR (c.Priority <=0 AND c.LastPosted>=@Date )) 
   AND	c.IsDeleted = 0
    AND	(c.TopicMovedID IS NOT NULL OR c.NumPosts > 0) 
    AND
    (@ShowMoved = 1 or (@ShowMoved <> 1 AND  c.TopicMovedID IS NULL))
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by tt.[Priority] desc,tt.LastPosted desc) as RowNum, tt.TopicID
     from  [dbo].[yaf_Topic] tt
     where tt.ForumID = @ForumID and (tt.[Priority] = 1 OR (tt.[Priority] <=0 AND tt.LastPosted >=@Date))
      AND	tt.IsDeleted = 0
      AND	((tt.TopicMovedID IS NOT NULL) OR (tt.NumPosts > 0))
      AND
      (@ShowMoved = 1 or (@ShowMoved <> 1 AND  TopicMovedID IS NULL))
      )	  
      select
            c.ForumID,
            c.TopicID,
            c.Posted,
            LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
            c.TopicMovedID,
            FavoriteCount = (SELECT COUNT(1) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
            [Subject] = c.Topic,
            c.[Description],
            c.[Status],
            c.[Styles],
            c.UserID,
            Starter = IsNull(c.UserName,b.Name),
            StarterDisplay = IsNull(c.UserDisplayName,b.DisplayName),
            Replies = c.NumPosts - 1,
            NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@UserID IS NOT NULL AND mes.UserID = @UserID) OR (@UserID IS NULL)) ),			
            [Views] = c.[Views],
            LastPosted = c.LastPosted,
            LastUserID = c.LastUserID,
            LastUserName = IsNull(c.LastUserName,(SELECT x.Name FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastUserDisplayName = IsNull(c.LastUserDisplayName,(SELECT x.DisplayName FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastMessageID = c.LastMessageID,
            LastTopicID = c.TopicID,
            LinkDate = c.LinkDate,
            TopicFlags = c.Flags,
            c.Priority,
            c.PollID,
            ForumFlags = d.Flags,
            FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
            StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
            LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = c.LastUserID)
            else ''	 end,
            LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=c.ForumID AND x.UserID = @UserID)
             else ''	 end,
            LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @UserID)
             else ''	 end,
             c.TopicImage,         
            0 as HasAttachments,          
            PageIndex = @PageIndex,   	
            @TotalRows as TotalRows			       
            from
            TopicIds ti
            inner join [dbo].[yaf_Topic] c	
            ON c.TopicID = ti.TopicID
            JOIN [dbo].[yaf_User] b 
            ON b.UserID=c.UserID
            join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
            WHERE ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC    
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_listmessages]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_topic_listmessages](@TopicID int) as
begin
   select 
        a.MessageID,
        a.UserID,
        UserName = b.Name,
        UserDisplayName = b.DisplayName,
        a.[Message],
        c.TopicID,
        c.ForumID,
        c.Topic,
        c.Priority,
        c.Description,
        c.Status,
        c.Styles,
        a.Flags,
        c.UserID AS TopicOwnerID,
        Edited = IsNull(a.Edited,a.Posted),
        TopicFlags = c.Flags,
        ForumFlags = d.Flags,
        a.EditReason,
        a.Position,
        a.IsModeratorChanged,
        a.DeleteReason,
        a.BlogPostID,
        c.PollID,
        a.IP,
        a.ReplyTo,
        a.ExternalMessageId,
        a.ReferenceMessageId  
    from 
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] c on a.TopicID = c.TopicID
        inner join [dbo].[yaf_Forum] d on c.ForumID = d.ForumID
    where a.TopicID = @TopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_lock]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_topic_lock](@TopicID int,@Locked bit) as
begin
        if @Locked<>0
        update [dbo].[yaf_Topic] set Flags = Flags | 1 where TopicID = @TopicID
    else
        update [dbo].[yaf_Topic] set Flags = Flags & ~1 where TopicID = @TopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_move]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_move](@TopicID int,@ForumID int,@ShowMoved bit, @LinkDays int, @UTCTIMESTAMP datetime) AS
begin
        declare @OldForumID int		
        declare @newTimestamp datetime
        if @LinkDays > -1
        begin
        SET @newTimestamp = DATEADD(d,@LinkDays,@UTCTIMESTAMP);
        end
    select @OldForumID = ForumID from [dbo].[yaf_Topic] where TopicID = @TopicID

    if @ShowMoved <> 0 begin
        -- delete an old link if exists
        delete from [dbo].[yaf_Topic] where TopicMovedID = @TopicID
        -- create a moved message
        insert into [dbo].[yaf_Topic](ForumID,UserID,UserName,UserDisplayName,Posted,Topic,[Views],Flags,Priority,PollID,TopicMovedID,LastPosted,NumPosts,LinkDate)
        select ForumID,UserID,UserName,UserDisplayName,Posted,Topic,0,Flags,Priority,PollID,@TopicID,LastPosted,0,@newTimestamp
        from [dbo].[yaf_Topic] where TopicID = @TopicID
    end

    -- move the topic
    update [dbo].[yaf_Topic] set ForumID = @ForumID where TopicID = @TopicID

    -- update last posts
    exec [dbo].[yaf_forum_updatelastpost] @OldForumID
    exec [dbo].[yaf_forum_updatelastpost] @ForumID
    
    -- update stats
    exec [dbo].[yaf_forum_updatestats] @OldForumID
    exec [dbo].[yaf_forum_updatestats] @ForumID
    
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_prune]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_prune](@BoardID int, @ForumID int=null,@Days int, @PermDelete bit, @UTCTIMESTAMP datetime) as
BEGIN
        DECLARE @c cursor
    DECLARE @TopicID int
    DECLARE @Count int
    SET @Count = 0
    IF @ForumID = 0 SET @ForumID = NULL
    IF @ForumID IS NOT NULL
    BEGIN
        SET @c = cursor for
        SELECT 
            TopicID
        FROM [dbo].[yaf_topic] yt
        INNER JOIN
        [dbo].[yaf_Forum] yf
        ON
        yt.ForumID = yf.ForumID
        INNER JOIN
        [dbo].[yaf_Category] yc
        ON
        yf.CategoryID = yc.CategoryID
        WHERE
            yc.BoardID = @BoardID AND
            yt.ForumID = @ForumID AND
            Priority = 0 AND
            (yt.Flags & 512) = 0 AND /* not flagged as persistent */
            datediff(dd,yt.LastPosted,@UTCTIMESTAMP )>@Days
    END
    ELSE BEGIN
        SET @c = CURSOR FOR
        SELECT 
            TopicID
        FROM 
            [dbo].[yaf_Topic]
        WHERE 
            Priority = 0 and
            (Flags & 512) = 0 and					/* not flagged as persistent */
            datediff(dd,LastPosted,@UTCTIMESTAMP )>@Days
    END
    OPEN @c
    FETCH @c into @TopicID
    WHILE @@FETCH_STATUS=0 BEGIN
        IF (@Count % 100 = 1) WAITFOR DELAY '000:00:05'
        EXEC [dbo].[yaf_topic_delete] @TopicID, @PermDelete
        SET @Count = @Count + 1
        FETCH @c INTO @TopicID
    END
    CLOSE @c
    DEALLOCATE @c

    -- This takes forever with many posts...
    --exec [dbo].[yaf_topic_updatelastpost]

    SELECT Count = @Count
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_topic_save](
    @ForumID	int,
    @Subject	nvarchar(100),
    @UserID		int,
    @Message	ntext,
    @Description	nvarchar(255)=null,
    @Status 	nvarchar(255)=null,
    @Styles 	nvarchar(255)=null,
    @Priority	smallint,
    @UserName	nvarchar(255)=null,
    @IP			varchar(39),
    @Posted		datetime=null,
    @BlogPostID	nvarchar(50),
    @Flags		int, 
    @UTCTIMESTAMP datetime
) as
begin
        declare @TopicID int
    declare @MessageID int, @OverrideDisplayName BIT, @ReplaceName nvarchar(255)

    if @Posted is null set @Posted = @UTCTIMESTAMP 
        -- this check is for guest user only to not override replace name 
    if (SELECT Name FROM [dbo].[yaf_User] WHERE UserID = @UserID) != @UserName
    begin
    SET @OverrideDisplayName = 1
    end	
    SET @ReplaceName = (CASE WHEN @OverrideDisplayName = 1 THEN @UserName ELSE (SELECT DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID) END);
    -- create the topic
    insert into [dbo].[yaf_Topic](ForumID,Topic,UserID,Posted,[Views],[Priority],UserName,UserDisplayName,NumPosts, [Description], [Status], [Styles])
    values(@ForumID,@Subject,@UserID,@Posted,0,@Priority,@UserName,@ReplaceName, 0,@Description, @Status, @Styles)

    -- get its id
    set @TopicID = SCOPE_IDENTITY()
    
    -- add message to the topic
    exec [dbo].[yaf_message_save] @TopicID,@UserID,@Message,@UserName,@IP,@Posted,null,@BlogPostID,null,null,@Flags,@UTCTIMESTAMP,@MessageID output

    select TopicID = @TopicID, MessageID = @MessageID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_similarlist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_topic_similarlist](
                @PageUserID int,
                @Topic   nvarchar(100),
				@TopicID int,
                @Count   int,
                @StyledNicks bit = 0)
as
    begin
        select top(@Count) 
		t.Topic,
        t.TopicID,
        t.ForumID,
        ForumName = f.Name,
        t.UserID,
        StarterName = u.Name,
        StarterDisplayName = u.DisplayName,
        StarterStyle = case(@StyledNicks)
            when 1 then  u.UserStyle
            else ''	 end,
        t.Posted
        from     [dbo].[yaf_Topic] t
		inner join [dbo].[yaf_Forum] f on t.ForumID= f.ForumID
        inner join [dbo].[yaf_User] u on t.UserID = u.UserID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=f.ForumID
        where    t.[Topic] like '%' + @Topic + '%'
        and t.[TopicID] != @TopicID
        and x.UserID = @PageUserID
        and CONVERT(int,x.ReadAccess) <> 0
        order by t.[Posted] DESC
    end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_simplelist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_topic_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN
        SET ARITHABORT ON      
        SELECT TOP(@Limit)  t.[TopicID],
                 t.[Topic]
        FROM     [dbo].[yaf_Topic] t
        WHERE    t.[TopicID] >= @StartID
        AND t.[TopicID] < (@StartID + @Limit)
        ORDER BY t.[TopicID]        
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_unanswered]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_unanswered]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
  declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int

   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        c.LastPosted IS NOT NULL and (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0 and	
        c.TopicMovedID is null and
        c.NumPosts = 1
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        c.LastPosted IS NOT NULL and (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0 and	
        c.TopicMovedID is null and
        c.NumPosts = 1
      )	  
      select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,  
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID      
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC 

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_unread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_unread]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
   declare @post_totalrowsnumber int 
   declare @firstselectrownum int   
   declare @firstselectposted datetime
  -- declare @ceiling decimal  
  -- declare @offset int 

    set nocount on	

    -- find total returned count
        select
        @post_totalrowsnumber = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	

      select @PageIndex = @PageIndex+1;
      select @firstselectrownum = (@PageIndex - 1) * @PageSize + 1 
        -- find first selectedrowid 
   if (@firstselectrownum > 0)   
   set rowcount @firstselectrownum
   else
   -- should not be 0
   set rowcount 1
    
   select		
        @firstselectposted = c.LastPosted		
    from
            [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	
    order by
        c.LastPosted desc,
        cat.SortOrder asc,
        d.SortOrder asc,
        d.Name asc,
        c.Priority desc		
    
    set rowcount @PageSize	
            select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),		
        StarterDisplay = IsNull(c.UserDisplayName,b.DisplayName),		
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,
        TotalRows = @post_totalrowsnumber,
        PageIndex = @PageIndex
    from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        c.LastPosted <= @firstselectposted and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null
    order by
        c.LastPosted desc,
        cat.SortOrder asc,
        d.SortOrder asc,
        d.Name asc,
        c.Priority desc	

        SET ROWCOUNT 0		
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_updatelastpost]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_updatelastpost]
(@ForumID int=null,@TopicID int=null) as
begin
        if @TopicID is not null
        update [dbo].[yaf_Topic] set
            LastPosted = (select top 1 x.Posted from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageID = (select top 1 x.MessageID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserID = (select top 1 x.UserID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserName = (select top 1 x.UserName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserDisplayName = (select top 1 x.UserDisplayName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageFlags = (select top 1 x.Flags from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc)
        where TopicID = @TopicID
    else
        update [dbo].[yaf_Topic] set
            LastPosted = (select top 1 x.Posted from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageID = (select top 1 x.MessageID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserID = (select top 1 x.UserID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserName = (select top 1 x.UserName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserDisplayName = (select top 1 x.UserDisplayName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageFlags = (select top 1 x.Flags from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc)
        where TopicMovedID is null
        and (@ForumID is null or ForumID=@ForumID)

    exec [dbo].[yaf_forum_updatelastpost] @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topic_updatetopic]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topic_updatetopic]
(@TopicID int,@Topic nvarchar (100)) as
begin
        if @TopicID is not null
        update [dbo].[yaf_Topic] set
            Topic = @Topic
        where TopicID = @TopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_topics_byuser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_topics_byuser]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
  declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null
        and c.TopicID = (SELECT TOP 1 mess.TopicID FROM [dbo].[yaf_Message] mess WHERE mess.UserID=@PageUserID AND mess.TopicID=c.TopicID)	
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x  with(nolock) on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
  where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null
        and c.TopicID = (SELECT TOP 1 mess.TopicID FROM [dbo].[yaf_Message] mess WHERE mess.UserID=@PageUserID AND mess.TopicID=c.TopicID)	
      )	  
      select
        c.ForumID,
		ForumName = d.Name,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,  
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID 
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC       
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_TopicStatus_Delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_TopicStatus_Delete] (@TopicStatusID int) as
begin
   delete from [dbo].[yaf_TopicStatus] 
    where TopicStatusID = @TopicStatusID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_TopicStatus_Edit]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_TopicStatus_Edit] (@TopicStatusID int) as
BEGIN
    SELECT * 
    FROM [dbo].[yaf_TopicStatus] 
    WHERE 
        TopicStatusID = @TopicStatusID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_TopicStatus_List]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_TopicStatus_List] (@BoardID int) as
    BEGIN
            SELECT
                *
            FROM
                [dbo].[yaf_TopicStatus]
            WHERE
                BoardID = @BoardID	
            ORDER BY
                TopicStatusID
        END
GO
/****** Object:  StoredProcedure [dbo].[yaf_TopicStatus_Save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_TopicStatus_Save] (@TopicStatusID int=null, @BoardID int, @TopicStatusName nvarchar(100),@DefaultDescription nvarchar(100)) as
begin
        if @TopicStatusID is null or @TopicStatusID = 0 begin
        insert into [dbo].[yaf_TopicStatus] (BoardID,TopicStatusName,defaultDescription) 
        values(@BoardID,@TopicStatusName,@DefaultDescription)
    end
    else begin
        update [dbo].[yaf_TopicStatus] 
        set TopicStatusName = @TopicStatusName, 
            defaultDescription = @DefaultDescription
        where TopicStatusID = @TopicStatusID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_accessmasks]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_accessmasks](@BoardID int,@UserID int) as
begin
        
    select * from(
        select
            AccessMaskID	= e.AccessMaskID,
            AccessMaskName	= e.Name,
            ForumID			= f.ForumID,
            ForumName		= f.Name,
            CategoryID		= f.CategoryID,
            ParentID		= f.ParentID
        from
            [dbo].[yaf_User] a 
            join [dbo].[yaf_UserGroup] b on b.UserID=a.UserID
            join [dbo].[yaf_Group] c on c.GroupID=b.GroupID
            join [dbo].[yaf_ForumAccess] d on d.GroupID=c.GroupID
            join [dbo].[yaf_AccessMask] e on e.AccessMaskID=d.AccessMaskID
            join [dbo].[yaf_Forum] f on f.ForumID=d.ForumID
        where
            a.UserID=@UserID and
            c.BoardID=@BoardID
        group by
            e.AccessMaskID,
            e.Name,
            f.ForumID,
            f.ParentID,
            f.CategoryID,
            f.Name
        
        union
            
        select
            AccessMaskID	= c.AccessMaskID,
            AccessMaskName	= c.Name,
            ForumID			= d.ForumID,
            ForumName		= d.Name,
            CategoryID		= d.CategoryID,
            ParentID		= d.ParentID
        from
            [dbo].[yaf_User] a 
            join [dbo].[yaf_UserForum] b on b.UserID=a.UserID
            join [dbo].[yaf_AccessMask] c on c.AccessMaskID=b.AccessMaskID
            join [dbo].[yaf_Forum] d on d.ForumID=b.ForumID
        where
            a.UserID=@UserID and
            c.BoardID=@BoardID
        group by
            c.AccessMaskID,
            c.Name,
            d.ForumID,
            d.ParentID,
            d.CategoryID,
            d.Name
    ) as x
    order by
        ForumName, AccessMaskName
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_activity_rank]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_activity_rank]
(
    @BoardID AS int,
    @DisplayNumber AS int,
    @StartDate AS datetime
)
AS
BEGIN
        
    DECLARE @GuestUserID int  

    SET @GuestUserID =
    (SELECT top 1
        a.UserID
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Group] c on b.GroupID = c.GroupID
    where
        a.BoardID = @BoardID and
        (c.Flags & 2)<>0
    )

    SELECT TOP(@DisplayNumber)
        counter.[ID],
        u.[Name],
        counter.[NumOfPosts]
    FROM
        [dbo].[yaf_User] u inner join
        (
            SELECT m.UserID as ID, Count(m.UserID) as NumOfPosts FROM [dbo].[yaf_Message] m
            WHERE m.Posted >= @StartDate
            GROUP BY m.UserID
        ) AS counter ON u.UserID = counter.ID
    WHERE
        u.BoardID = @BoardID and u.UserID != @GuestUserID
    ORDER BY
        NumOfPosts DESC  
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_addignoreduser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* User Ignore Procedures */

CREATE PROCEDURE [dbo].[yaf_user_addignoreduser]
    @UserID int,
    @IgnoredUserId int
AS BEGIN
        IF NOT EXISTS (SELECT * FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID AND IgnoredUserID = @IgnoredUserId)
    BEGIN
        INSERT INTO [dbo].[yaf_IgnoreUser] (UserID, IgnoredUserID) VALUES (@UserID, @IgnoredUserId)
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_addpoints]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[yaf_user_addpoints] (@UserID int,@FromUserID int = null, @UTCTIMESTAMP datetime, @Points int) AS
BEGIN
    UPDATE [dbo].[yaf_User] SET Points = Points + @Points WHERE UserID = @UserID

    IF @FromUserID IS NOT NULL 
    BEGIN
        declare	@VoteDate datetime
    set @VoteDate = (select top 1 VoteDate from [dbo].[yaf_ReputationVote] where ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID)
    IF @VoteDate is not null
    begin	     
          update [dbo].[yaf_ReputationVote] set VoteDate=@UTCTIMESTAMP where VoteDate = @VoteDate AND ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID
    end
    ELSE
      begin
          insert into [dbo].[yaf_ReputationVote](ReputationFromUserID,ReputationToUserID,VoteDate)
          values (@FromUserID, @UserID, @UTCTIMESTAMP)
      end
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_adminsave]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_adminsave]
(@BoardID int,@UserID int,@Name nvarchar(255),@DisplayName nvarchar(255), @Email nvarchar(255),@Flags int,@RankID int) as
begin
        
    update [dbo].[yaf_User] set
        Name = @Name,
        DisplayName = @DisplayName,
        Email = @Email,
        RankID = @RankID,
        Flags = @Flags
    where UserID = @UserID
    select UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_approve]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_approve](@UserID int) as
begin
        
    declare @CheckEmailID int
    declare @Email nvarchar(255)

    select 
        @CheckEmailID = CheckEmailID,
        @Email = Email
    from
        [dbo].[yaf_CheckEmail]
    where
        UserID = @UserID

    -- Update new user email
    update [dbo].[yaf_User] set Email = @Email, Flags = Flags | 2 where UserID = @UserID
    delete [dbo].[yaf_CheckEmail] where CheckEmailID = @CheckEmailID
    select convert(bit,1)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_approveall]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_approveall](@BoardID int) as
begin
        
    DECLARE userslist CURSOR FOR 
        SELECT UserID FROM [dbo].[yaf_User] WHERE BoardID=@BoardID AND (Flags & 2)=0
        FOR READ ONLY


    OPEN userslist

    DECLARE @UserID int

    FETCH userslist INTO @UserID

    WHILE @@FETCH_STATUS = 0
    BEGIN
        EXEC [dbo].[yaf_user_approve] @UserID
        FETCH userslist INTO @UserID		
    END

    CLOSE userslist

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_aspnet]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_aspnet](@BoardID int,@UserName nvarchar(255),@DisplayName nvarchar(255) = null,@Email nvarchar(255),@ProviderUserKey nvarchar(64),@IsApproved bit,@UTCTIMESTAMP datetime) as
BEGIN
        SET NOCOUNT ON

    DECLARE @UserID int, @RankID int, @approvedFlag int, @TimeZone int

    SET @approvedFlag = 0;
    IF (@IsApproved = 1) SET @approvedFlag = 2;	
    
    IF EXISTS(SELECT 1 FROM [dbo].[yaf_User] where BoardID=@BoardID and ([ProviderUserKey]=@ProviderUserKey OR [Name] = @UserName))
    BEGIN
        SELECT TOP 1 @UserID = UserID FROM [dbo].[yaf_User] WHERE [BoardID]=@BoardID and ([ProviderUserKey]=@ProviderUserKey OR [Name] = @UserName)
        
        IF (@DisplayName IS NULL) 
        BEGIN
            SELECT TOP 1 @DisplayName = DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID
        END

        UPDATE [dbo].[yaf_User] SET 
            DisplayName = @DisplayName,
            Email = @Email,
            [ProviderUserKey] = @ProviderUserKey,
            Flags = Flags | @approvedFlag
        WHERE
            UserID = @UserID
    END ELSE
    BEGIN
        SELECT @RankID = RankID from [dbo].[yaf_Rank] where (Flags & 1)<>0 and BoardID=@BoardID
        
        IF (@DisplayName IS NULL) 
        BEGIN
            SET @DisplayName = @UserName
        END		

        SET @TimeZone = (SELECT ISNULL(CAST([dbo].[yaf_registry_value]('TimeZone', @BoardID) as int), 0))

        INSERT INTO [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName,Password,Email,Joined,LastVisit,NumPosts,TimeZone,Flags,ProviderUserKey) 
        VALUES(@BoardID,@RankID,@UserName,@DisplayName,'-',@Email,@UTCTIMESTAMP ,@UTCTIMESTAMP ,0, @TimeZone,@approvedFlag,@ProviderUserKey)
    
        SET @UserID = SCOPE_IDENTITY()	
    END
    
    SELECT UserID=@UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_avatarimage]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_avatarimage]
(
    @UserID int
)
AS
BEGIN
    
    SELECT
        UserID,
        AvatarImage,
        AvatarImageType
    FROM
        [dbo].[yaf_User]
    WHERE
        UserID = @UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_changepassword]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_changepassword](@UserID int,@OldPassword nvarchar(32),@NewPassword nvarchar(32)) as
begin
    
    declare @CurrentOld nvarchar(32)
    select @CurrentOld = Password from [dbo].[yaf_User] where UserID = @UserID
    if @CurrentOld<>@OldPassword begin
        select Success = convert(bit,0)
        return
    end
    update [dbo].[yaf_User] set Password = @NewPassword where UserID = @UserID
    select Success = convert(bit,1)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_delete](@UserID int) as
begin
    
    declare @GuestUserID	int
    declare @UserName		nvarchar(255)
    declare @UserDisplayName		nvarchar(255)
    declare @GuestCount		int

    select @UserName = Name, @UserDisplayName = DisplayName from [dbo].[yaf_User] where UserID=@UserID

    select top 1
        @GuestUserID = a.UserID
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Group] c on b.GroupID = c.GroupID
    where
        (c.Flags & 2)<>0

    select 
        @GuestCount = count(1) 
    from 
        [dbo].[yaf_UserGroup] a
        join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
    where
        (b.Flags & 2)<>0

    if @GuestUserID=@UserID and @GuestCount=1 begin
        return
    end

    update [dbo].[yaf_Message] set UserName=@UserName,UserDisplayName=@UserDisplayName,UserID=@GuestUserID where UserID=@UserID
    update [dbo].[yaf_Topic] set UserName=@UserName,UserDisplayName=@UserDisplayName,UserID=@GuestUserID where UserID=@UserID
    update [dbo].[yaf_Topic] set LastUserName=@UserName,LastUserDisplayName=@UserDisplayName,LastUserID=@GuestUserID where LastUserID=@UserID
    update [dbo].[yaf_Forum] set LastUserName=@UserName,LastUserDisplayName=@UserDisplayName,LastUserID=@GuestUserID where LastUserID=@UserID

    delete from [dbo].[yaf_Active] where UserID=@UserID
    delete from [dbo].[yaf_EventLog] where UserID=@UserID	
    delete from [dbo].[yaf_UserPMessage] where UserID=@UserID
    delete from [dbo].[yaf_PMessage] where FromUserID=@UserID AND PMessageID NOT IN (select PMessageID FROM [dbo].[yaf_PMessage])
    -- Delete all the thanks entries associated with this UserID.
    delete from [dbo].[yaf_Thanks] where ThanksFromUserID=@UserID OR ThanksToUserID=@UserID
    -- Delete all the FavoriteTopic entries associated with this UserID.
    delete from [dbo].[yaf_FavoriteTopic] where UserID=@UserID
    -- Delete all the Buddy relations between this user and other users.
    delete from [dbo].[yaf_Buddy] where FromUserID=@UserID   
    delete from [dbo].[yaf_Buddy] where ToUserID=@UserID	 
    -- set messages as from guest so the User can be deleted
    update [dbo].[yaf_PMessage] SET FromUserID = @GuestUserID WHERE FromUserID = @UserID
    delete from [dbo].[yaf_CheckEmail] where UserID = @UserID
    delete from [dbo].[yaf_WatchTopic] where UserID = @UserID
    delete from [dbo].[yaf_WatchForum] where UserID = @UserID
    delete from [dbo].[yaf_TopicReadTracking] where UserID = @UserID
    delete from [dbo].[yaf_ForumReadTracking] where UserID = @UserID
	delete from [dbo].[yaf_UserAlbum] where UserID = @UserID
    delete from [dbo].[yaf_ReputationVote] where ReputationFromUserID = @UserID
	delete from [dbo].[yaf_ReputationVote] where ReputationToUserID = @UserID
    delete from [dbo].[yaf_UserGroup] where UserID = @UserID
    -- ABOT CHANGED
    -- Delete UserForums entries Too 
    delete from [dbo].[yaf_UserForum] where UserID = @UserID
    delete from [dbo].[yaf_IgnoreUser] where UserID = @UserID OR IgnoredUserID = @UserID
    --END ABOT CHANGED 09.04.2004
    delete from [dbo].[yaf_AdminPageUserAccess] where UserID = @UserID
    delete from [dbo].[yaf_User] where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_deleteavatar]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_deleteavatar](@UserID int) as begin
    
    UPDATE
        [dbo].[yaf_User]
    SET
        AvatarImage = null,
        Avatar = null,
        AvatarImageType = null
    WHERE
        UserID = @UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_deleteold]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_deleteold](@BoardID int, @Days int,@UTCTIMESTAMP datetime) as
begin
    
    declare @Since datetime

    set @Since = @UTCTIMESTAMP 

    delete from [dbo].[yaf_EventLog]  where UserID in(select UserID from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days)
    delete from [dbo].[yaf_CheckEmail] where UserID in(select UserID from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days)
    delete from [dbo].[yaf_UserGroup] where UserID in(select UserID from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days)
    delete from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_emails]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_emails](@BoardID int,@GroupID int=null) as
begin
    
    if @GroupID = 0 set @GroupID = null
    if @GroupID is null
        select 
            a.Email 
        from 
            [dbo].[yaf_User] a
        where 
            a.Email is not null and 
            a.BoardID = @BoardID and
            a.Email is not null and 
            a.Email<>''
    else
        select 
            a.Email 
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_UserGroup] b on b.UserID=a.UserID
            join [dbo].[yaf_Group] c on c.GroupID=b.GroupID
        where 
            b.GroupID = @GroupID and 
            (c.Flags & 2)=0 and
            a.Email is not null and 
            a.Email<>''
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_find]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_find](
    @BoardID int,
    @Filter bit,
    @UserName nvarchar(255)=null,
    @Email nvarchar(255)=null,
    @DisplayName nvarchar(255)=null,
    @NotificationType int = null,
    @DailyDigest bit = null,
	@ForumID int = 0
)
AS
begin
    if @ForumID>0
        begin
	        select 
                a.*,			
                IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0)
	        from 
                [dbo].[yaf_User] a
				join [dbo].[yaf_vaccess] x with(nolock) on x.ForumID = @ForumID
	        where 
                a.BoardID=@BoardID and
				x.UserID = a.UserID and    
                x.ReadAccess <> 0 and
                ((@UserName is not null and a.Name like @UserName) or
                (@Email is not null and Email like @Email) or
                (@DisplayName is not null and a.DisplayName like @DisplayName) or
                (@NotificationType is not null and a.NotificationType = @NotificationType) or
                (@DailyDigest is not null and a.DailyDigest = @DailyDigest))
        end
	else if @Filter<>0
    begin
        if @UserName is not null
            set @UserName = '%' + @UserName + '%'
            
        if @DisplayName is not null
            set @DisplayName = '%' + @DisplayName + '%'			

        select 
            a.*,			
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0)
        from 
            [dbo].[yaf_User] a
        where 
            a.BoardID=@BoardID and
            ((@UserName is not null and a.Name like @UserName) or
            (@Email is not null and Email like @Email) or
            (@DisplayName is not null and a.DisplayName like @DisplayName) or
            (@NotificationType is not null and a.NotificationType = @NotificationType) or
            (@DailyDigest is not null and a.DailyDigest = @DailyDigest))
        order by
            a.Name
    end else
    begin
        select 
            a.*,			
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0)
        from 
            [dbo].[yaf_User] a
        where 
            a.BoardID=@BoardID and
            ((@UserName is not null and a.Name like @UserName) or
            (@Email is not null and Email like @Email) or
            (@DisplayName is not null and a.DisplayName like @DisplayName) or
            (@NotificationType is not null and a.NotificationType = @NotificationType) or
            (@DailyDigest is not null and a.DailyDigest = @DailyDigest))
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_getalbumsdata]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_getalbumsdata] (@BoardID INT, @UserID INT )
as 
    BEGIN
    DECLARE 
    @OR_UsrAlbums int,     
    @OG_UsrAlbums int,
    @OR_UsrAlbumImages int,     
    @OG_UsrAlbumImages int
     -- Ugly but bullet proof - it used very rarely   
    DECLARE  @GroupData TABLE
(
    G_UsrAlbums int,
    G_UsrAlbumImages int
)
    DECLARE
   @RankData TABLE
(
    R_UsrAlbums int,
    R_UsrAlbumImages int
)

      -- REMOVED ORDER BY c.SortOrder ASC, SELECTING ALL
     
    INSERT INTO @GroupData(G_UsrAlbums,
    G_UsrAlbumImages)
    SELECT  ISNULL(c.UsrAlbums,0), ISNULL(c.UsrAlbumImages,0)   
    FROM [dbo].[yaf_User] a
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID
                              WHERE a.UserID = @UserID AND a.BoardID = @BoardID
     
                             
     INSERT INTO @RankData(R_UsrAlbums, R_UsrAlbumImages)
     SELECT  ISNULL(c.UsrAlbums,0), ISNULL(c.UsrAlbumImages,0)   
     FROM [dbo].[yaf_Rank] c
                                JOIN [dbo].[yaf_User] d
                                  ON c.RankID = d.RankID WHERE d.UserID = @UserID 
                                  AND d.BoardID = @BoardID
       
       -- SELECTING MAX()
       
       SET @OR_UsrAlbums = (SELECT Max(R_UsrAlbums) FROM @RankData)
       SET @OG_UsrAlbums = (SELECT Max(G_UsrAlbums) FROM @GroupData)
       SET @OR_UsrAlbumImages = (SELECT Max(R_UsrAlbumImages) FROM @RankData)
       SET @OG_UsrAlbumImages = (SELECT Max(G_UsrAlbumImages) FROM @GroupData)
       
       SELECT
        NumAlbums  = (SELECT COUNT(ua.AlbumID) FROM [dbo].[yaf_UserAlbum] ua
                      WHERE ua.UserID = @UserID),
        NumImages = (SELECT COUNT(uai.ImageID) FROM  [dbo].[yaf_UserAlbumImage] uai
                     INNER JOIN [dbo].[yaf_UserAlbum] ua
                     ON ua.AlbumID = uai.AlbumID
                     WHERE ua.UserID = @UserID),
        UsrAlbums = CASE WHEN @OG_UsrAlbums > @OR_UsrAlbums THEN @OG_UsrAlbums ELSE @OR_UsrAlbums END,
        UsrAlbumImages = CASE WHEN @OG_UsrAlbumImages > @OR_UsrAlbumImages THEN @OG_UsrAlbumImages ELSE @OR_UsrAlbumImages END
             
     
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_getpoints]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_getpoints] (@UserID int) AS
BEGIN
    
    SELECT Points FROM [dbo].[yaf_User] WHERE UserID = @UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_getsignature]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_getsignature](@UserID int) as
begin
    
    select [Signature] from [dbo].[yaf_User] where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_getsignaturedata]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_getsignaturedata] (@BoardID INT, @UserID INT)
as 
    BEGIN

    

DECLARE   @GroupData TABLE
(
    G_UsrSigChars int,
    G_UsrSigBBCodes nvarchar(4000),
    G_UsrSigHTMLTags nvarchar(4000)
)
   
   declare @ust int, @usbbc nvarchar(4000), 
    @ushtmlt nvarchar(4000), @rust int, @rusbbc nvarchar(4000),  
    @rushtmlt nvarchar(4000) 
          
      declare c cursor for
      SELECT ISNULL(c.UsrSigChars,0), ISNULL(c.UsrSigBBCodes,''), ISNULL(c.UsrSigHTMLTags,'')
      FROM [dbo].[yaf_User] a 
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID 
                              WHERE a.UserID = @UserID AND c.BoardID = @BoardID ORDER BY c.SortOrder ASC
        
        -- first check ranks
        SELECT TOP 1 @rust = ISNULL(c.UsrSigChars,0), @rusbbc = c.UsrSigBBCodes, 
        @rushtmlt = c.UsrSigHTMLTags
        FROM [dbo].[yaf_Rank] c 
                                JOIN [dbo].[yaf_User] d
                                  ON c.RankID = d.RankID
                                   WHERE d.UserID = @UserID AND c.BoardID = @BoardID 
                                   ORDER BY c.RankID DESC        
        open c
       
        fetch next from c into  @ust, @usbbc , @ushtmlt
        while @@FETCH_STATUS = 0
        begin
        if not exists (select top 1 1 from @GroupData)
        begin	

        -- insert first row and compare with ranks data
    INSERT INTO @GroupData(G_UsrSigChars,G_UsrSigBBCodes,G_UsrSigHTMLTags) 
        select (CASE WHEN @rust > ISNULL(@ust,0) THEN @rust ELSE ISNULL(@ust,0) END), 
        (COALESCE(@rusbbc + ',','') + COALESCE(@usbbc,'')) ,(COALESCE(@rushtmlt + ',','') + COALESCE(@ushtmlt, '') ) 	  
        end
        else
        begin
        update @GroupData set 
        G_UsrSigChars = (CASE WHEN G_UsrSigChars > COALESCE(@ust, 0) THEN G_UsrSigChars ELSE COALESCE(@ust, 0) END), 
        G_UsrSigBBCodes = COALESCE(@usbbc + ',','') + G_UsrSigBBCodes, 
        G_UsrSigHTMLTags = COALESCE(@ushtmlt + ',', '') + G_UsrSigHTMLTags
        end 

        fetch next from c into   @ust, @usbbc , @ushtmlt
        
        end

       close c
       deallocate c 	
                 
       
        SELECT 
        UsrSigChars = G_UsrSigChars, 
        UsrSigBBCodes = G_UsrSigBBCodes, 
        UsrSigHTMLTags = G_UsrSigHTMLTags
        FROM @GroupData 

   END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_getthanks_from]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_getthanks_from] 
    @UserID int, @PageUserID  int
AS
BEGIN
SELECT Count(1) FROM [dbo].[yaf_Thanks] 
WHERE ThanksFromUserID=@UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_getthanks_to]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_getthanks_to] 
    @UserID			int,
    @PageUserID     int,
    @ThanksToNumber int output,
    @ThanksToPostsNumber int output
AS
BEGIN
SELECT @ThanksToNumber=(SELECT Count(1) FROM [dbo].[yaf_Thanks] WHERE ThanksToUserID=@UserID)	
SELECT @ThanksToPostsNumber=(SELECT Count(DISTINCT MessageID) FROM [dbo].[yaf_Thanks] WHERE ThanksToUserID=@UserID)	
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_guest]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_guest]
(
    @BoardID int,@UTCTIMESTAMP datetime
)
as
begin
    
    select top 1
        a.UserID
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Group] c on b.GroupID = c.GroupID
    where
        a.BoardID = @BoardID and
        (c.Flags & 2)<>0
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_ignoredlist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_ignoredlist]
    @UserID int
AS
BEGIN
        SELECT * FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_isuserignored]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_isuserignored]
    @UserID int,
    @IgnoredUserId int
AS BEGIN
        IF EXISTS(SELECT * FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID AND IgnoredUserID = @IgnoredUserId)
    BEGIN
        RETURN 1
    END
    ELSE
    BEGIN
        RETURN 0
    END
    
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_lastread]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_lastread](@UserID int) as
begin
        DECLARE @LastForumRead datetime
        DECLARE @LastTopicRead datetime
        
         SET @LastForumRead = (SELECT TOP 1 LastAccessDate FROM  [dbo].[yaf_ForumReadTracking] WHERE UserID = @UserID ORDER BY LastAccessDate DESC)
        SET @LastTopicRead = (SELECT TOP 1 LastAccessDate FROM  [dbo].[yaf_TopicReadTracking] WHERE UserID = @UserID ORDER BY LastAccessDate DESC)

        IF @LastForumRead is not null AND @LastTopicRead is not null
        
        IF @LastForumRead > @LastTopicRead
           SELECT LastAccessDate = @LastForumRead
        ELSE
           SELECT LastAccessDate = @LastTopicRead
           
        ELSE IF @LastForumRead is not null
           SELECT LastAccessDate = @LastForumRead
            
        ELSE IF @LastTopicRead is not null
            SELECT LastAccessDate = @LastTopicRead
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_lazydata]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_lazydata](
    @UserID	int,
    @BoardID int,
    @ShowPendingMails bit = 0,
    @ShowPendingBuddies bit = 0,
    @ShowUnreadPMs bit = 0,
    @ShowUserAlbums bit = 0,
    @ShowUserStyle bit = 0
    
) as
begin 
    declare 
    @G_UsrAlbums int,
    @R_UsrAlbums int,
    @R_Style varchar(255),
    @G_Style varchar(255) 	
    
        
    IF (@ShowUserAlbums > 0)
    BEGIN	
    SELECT @G_UsrAlbums = ISNULL(MAX(c.UsrAlbums),0)
    FROM [dbo].[yaf_User] a 
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID 
                               WHERE a.UserID = @UserID 
                                 AND a.BoardID = @BoardID
                                 
    SELECT  @R_UsrAlbums = ISNULL(MAX(c.UsrAlbums),0)
    FROM [dbo].[yaf_Rank] c 
                                JOIN [dbo].[yaf_User] d
                                  ON c.RankID = d.RankID WHERE d.UserID = @UserID 
                                    AND d.BoardID = @BoardID 
    END 	
    ELSE	
    BEGIN
    SET @G_UsrAlbums = 0
    SET @R_UsrAlbums = 0
    END
    
                                                                 

    -- return information
    select TOP 1		
        a.ProviderUserKey,
        UserFlags			= a.Flags,
        UserName			= a.Name,
        DisplayName			= a.DisplayName,
        Suspended			= a.Suspended,
		SuspendedReason     = a.SuspendedReason,
        ThemeFile			= a.ThemeFile,
        LanguageFile		= a.LanguageFile,
        TextEditor		    = a.TextEditor,
        TimeZoneUser		= a.TimeZone,
        CultureUser		    = a.Culture,		
        IsGuest				= SIGN(a.IsGuest),
        IsDirty				= SIGN(a.IsDirty),
        IsFacebookUser      = a.IsFacebookUser,
        IsTwitterUser       = a.IsTwitterUser,
        MailsPending		= CASE WHEN @ShowPendingMails > 0 THEN (select count(1) from [dbo].[yaf_Mail] WHERE [ToUserName] = a.Name) ELSE 0 END,
        UnreadPrivate		= CASE WHEN @ShowUnreadPMs > 0 THEN (select count(1) from [dbo].[yaf_UserPMessage] where UserID=@UserID and IsRead=0 and IsDeleted = 0 and IsArchived = 0) ELSE 0 END,
        LastUnreadPm		= CASE WHEN @ShowUnreadPMs > 0 THEN (SELECT TOP 1 Created FROM [dbo].[yaf_PMessage] pm INNER JOIN [dbo].[yaf_UserPMessage] upm ON pm.PMessageID = upm.PMessageID WHERE upm.UserID=@UserID and upm.IsRead=0  and upm.IsDeleted = 0 and upm.IsArchived = 0 ORDER BY pm.Created DESC) ELSE NULL END,		
        PendingBuddies      = CASE WHEN @ShowPendingBuddies > 0 THEN (SELECT COUNT(ID) FROM [dbo].[yaf_Buddy] WHERE ToUserID = @UserID AND Approved = 0) ELSE 0 END,
        LastPendingBuddies	= CASE WHEN @ShowPendingBuddies > 0 THEN (SELECT TOP 1 Requested FROM [dbo].[yaf_Buddy] WHERE ToUserID=@UserID and Approved = 0 ORDER BY Requested DESC) ELSE NULL END,
        UserStyle 		    = CASE WHEN @ShowUserStyle > 0 THEN (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr with(nolock) where usr.UserID = @UserID) ELSE '' END,			
        NumAlbums  = (SELECT COUNT(1) FROM [dbo].[yaf_UserAlbum] ua
        WHERE ua.UserID = @UserID),
        UsrAlbums  = (CASE WHEN @G_UsrAlbums > @R_UsrAlbums THEN @G_UsrAlbums ELSE @R_UsrAlbums END),
        UserHasBuddies  = SIGN(ISNULL((SELECT TOP 1 1 FROM [dbo].[yaf_Buddy] WHERE [FromUserID] = @UserID OR [ToUserID] = @UserID),0)),
        -- Guest can't vote in polls attached to boards, we need some temporary access check by a criteria 
        BoardVoteAccess	= (CASE WHEN a.Flags & 4 > 0 THEN 0 ELSE 1 END),
        Reputation         = a.Points
        from
           [dbo].[yaf_User] a		
        where
        a.UserID = @UserID
     end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_list](@BoardID int,@UserID int=null,@Approved bit=null,@GroupID int=null,@RankID int=null,@StyledNicks bit = null, @UTCTIMESTAMP datetime) as
begin	
    if @UserID is not null
        select 
        a.UserID,
        a.BoardID,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
		a.SuspendedReason,
		a.SuspendedBy,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],		
            CultureUser = a.Culture,						
            RankName = b.Name,
            Style = case(@StyledNicks)
            when 1 then a.UserStyle
            else ''	 end, 
            NumDays = datediff(d,a.Joined,@UTCTIMESTAMP )+1,
            NumPostsForum = (select count(1) from [dbo].[yaf_Message] x where x.IsApproved = 1 and x.IsDeleted = 0),
            HasAvatarImage = (select count(1) from [dbo].[yaf_User] x where x.UserID=a.UserID and AvatarImage is not null),
            IsAdmin	= IsNull(c.IsAdmin,0),
            IsGuest	= IsNull(a.Flags & 4,0),
            IsHostAdmin	= IsNull(a.Flags & 1,0),
            IsForumModerator	= IsNull(c.IsForumModerator,0),
            IsModerator		= IsNull(c.IsModerator,0)
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_Rank] b on b.RankID=a.RankID			
            left join [dbo].[yaf_vaccess] c on c.UserID=a.UserID
        where 
            a.UserID = @UserID and
            a.BoardID = @BoardID and
            IsNull(c.ForumID,0) = 0 and
            (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2))
        order by 
            a.Name 

    else if @GroupID is null and @RankID is null
        select 
        a.UserID,
        a.BoardID,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],			
            CultureUser = a.Culture,	
            Style = case(@StyledNicks)
            when 1 then a.UserStyle
            else ''	 end, 	
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0),
            IsGuest	= IsNull(a.Flags & 4,0),
            IsHostAdmin	= IsNull(a.Flags & 1,0),		
            RankName = b.Name
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_Rank] b on b.RankID=a.RankID			
        where 
            a.BoardID = @BoardID and
            (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2))
        order by 
            a.Name
    else
        select 
        a.UserID,
        a.BoardID,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],		
            CultureUser = a.Culture,
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0),
            IsGuest	= IsNull(a.Flags & 4,0),
            IsHostAdmin	= IsNull(a.Flags & 1,0),			
            RankName = b.Name,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end 
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_Rank] b on b.RankID=a.RankID			
        where 
            a.BoardID = @BoardID and
            (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2)) and
            (@GroupID is null or exists(select 1 from [dbo].[yaf_UserGroup] x where x.UserID=a.UserID and x.GroupID=@GroupID)) and
            (@RankID is null or a.RankID=@RankID)
        order by 
            a.Name
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_listmedals]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_user_listmedals]
    @UserID	int
as begin
        (select
        a.[MedalID],
        a.[Name],
        isnull(b.[Message], a.[Message]) as [Message],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        isnull(a.[SmallRibbonURL], a.[SmallMedalURL]) as [SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        isnull(a.[SmallRibbonWidth], a.[SmallMedalWidth]) as [SmallRibbonWidth],
        isnull(a.[SmallRibbonHeight], a.[SmallMedalHeight]) as [SmallRibbonHeight],
        [dbo].[yaf_medal_getsortorder](b.[SortOrder],a.[SortOrder],a.[Flags]) as [SortOrder],
        [dbo].[yaf_medal_gethide](b.[Hide],a.[Flags]) as [Hide],
        [dbo].[yaf_medal_getribbonsetting](a.[SmallRibbonURL],a.[Flags],b.[OnlyRibbon]) as [OnlyRibbon],
        a.[Flags],
        b.[DateAwarded]
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_UserMedal] b on a.[MedalID] = b.[MedalID]
    where
        b.[UserID] = @UserID)

    union

    (select
        a.[MedalID],
        a.[Name],
        isnull(b.[Message], a.[Message]) as [Message],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        isnull(a.[SmallRibbonURL], a.[SmallMedalURL]) as [SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        isnull(a.[SmallRibbonWidth], a.[SmallMedalWidth]) as [SmallRibbonWidth],
        isnull(a.[SmallRibbonHeight], a.[SmallMedalHeight]) as [SmallRibbonHeight],
        [dbo].[yaf_medal_getsortorder](b.[SortOrder],a.[SortOrder],a.[Flags]) as [SortOrder],
        [dbo].[yaf_medal_gethide](b.[Hide],a.[Flags]) as [Hide],
        [dbo].[yaf_medal_getribbonsetting](a.[SmallRibbonURL],a.[Flags],b.[OnlyRibbon]) as [OnlyRibbon],
        a.[Flags],
        NULL as [DateAwarded]
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_GroupMedal] b on a.[MedalID] = b.[MedalID]
        inner join [dbo].[yaf_UserGroup] c on b.[GroupID] = c.[GroupID]
    where
        c.[UserID] = @UserID)
    order by
        [OnlyRibbon] desc,
        [SortOrder] asc

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_listmembers]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_listmembers](
                @BoardID int,
                @UserID int=null,
                @Approved bit=null,
                @GroupID int=null,
                @RankID int=null,
                @StyledNicks bit = null,
                @Literals nvarchar(255), 
                @Exclude bit = null, 
                @BeginsWith bit = null, 				
                @PageIndex int, 
                @PageSize int,
                @SortName int = 0,
                @SortRank int = 0,
                @SortJoined int = 0,
                @SortPosts int = 0,
                @SortLastVisit int = 0,
                @NumPosts int = 0,
                @NumPostsCompare int = 0) as
begin  
    declare @TotalRows int
    declare @FirstSelectRowNumber int
    declare @LastSelectRowNumber int
    -- find total returned count

    select @TotalRows = count(a.UserID) 
    from [dbo].[yaf_User] a  with(nolock) 
      join [dbo].[yaf_Rank] b with(nolock)
      on b.RankID=a.RankID 
      where
       a.BoardID = @BoardID	   
       and
        (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2)) and
        (@GroupID is null or exists(select 1 from [dbo].[yaf_UserGroup] x where x.UserID=a.UserID and x.GroupID=@GroupID)) and
        (@RankID is null or a.RankID=@RankID) AND
        -- user is not guest
        ISNULL(a.Flags & 4,0) <> 4
            AND
        (LOWER(a.DisplayName) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END  
            or
         LOWER(a.Name) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END) 
        and
        (a.NumPosts >= (case 
        when @NumPostsCompare = 3 then  @NumPosts end) 
        OR a.NumPosts <= (case 
        when @NumPostsCompare = 2 then @NumPosts end) OR
        a.NumPosts = (case 
        when @NumPostsCompare = 1 then @NumPosts end)); 

    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;	
    
    with UserIds  as
     (
     select ROW_NUMBER() over (order by    (case 
        when @SortName = 2 then a.[Name] end) DESC,
        (case 
        when @SortName = 1 then a.[Name] end) ASC, 
        (case 
        when @SortRank = 2 then a.RankID end) DESC,
        (case 
        when @SortRank = 1 then a.RankID end) ASC,		
        (case 
        when @SortJoined = 2 then a.Joined end) DESC,
        (case 
        when @SortJoined = 1 then a.Joined end) ASC,
        (case 
        when @SortLastVisit = 2 then a.LastVisit end) DESC,
        (case 
        when @SortLastVisit = 1 then a.LastVisit end) ASC,
        (case
         when @SortPosts = 2 then a.NumPosts end) DESC, 
        (case
         when @SortPosts = 1 then a.NumPosts end) ASC ) as RowNum, a.UserID
     from [dbo].[yaf_User] a with(nolock)
            join [dbo].[yaf_Rank] b with(nolock) on b.RankID=a.RankID	
     where
       a.BoardID = @BoardID	   
       and
        (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2)) and
        (@GroupID is null or exists(select 1 from [dbo].[yaf_UserGroup] x where x.UserID=a.UserID and x.GroupID=@GroupID)) and
        (@RankID is null or a.RankID=@RankID) AND
        -- user is not guest
        ISNULL(a.Flags & 4,0) <> 4
            AND
        (LOWER(a.DisplayName) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END  
            or
         LOWER(a.Name) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END) 
        and
        (a.NumPosts >= (case 
        when @NumPostsCompare = 3 then  @NumPosts end) 
        OR a.NumPosts <= (case 
        when @NumPostsCompare = 2 then @NumPosts end) OR
        a.NumPosts = (case 
        when @NumPostsCompare = 1 then @NumPosts end))
      )	  
      select 
            a.*,			
            CultureUser = a.Culture,
            IsAdmin = (select COUNT(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0),
            IsHostAdmin	= ISNULL(a.Flags & 1,0),
            b.RankID,
            RankName = b.Name,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end,
            TotalCount =  @TotalRows 
            from 
            UserIds ti inner join
            [dbo].[yaf_User] a with(nolock)
            on a.UserID = ti.UserID
            join [dbo].[yaf_Rank] b with(nolock) on b.RankID=a.RankID	
    
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC;  
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_login]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_login](@BoardID int,@Name nvarchar(255),@Password nvarchar(32)) as
begin
    
    declare @UserID int

    -- Try correct board first
    if exists(select UserID from [dbo].[yaf_User] where Name=@Name and Password=@Password and BoardID=@BoardID and (Flags & 2)=2)
    begin
        select UserID from [dbo].[yaf_User] where Name=@Name and Password=@Password and BoardID=@BoardID and (Flags & 2)=2
        return
    end

    if not exists(select UserID from [dbo].[yaf_User] where Name=@Name and Password=@Password and (BoardID=@BoardID or (Flags & 3)=3))
        set @UserID=null
    else
        select 
            @UserID=UserID 
        from 
            [dbo].[yaf_User]
        where 
            Name=@Name and 
            [Password]=@Password and 
            (BoardID=@BoardID or (Flags & 1)=1) and
            (Flags & 2)=2

    select @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_medal_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_user_medal_delete]
    @UserID int,
    @MedalID int
as begin
        delete from [dbo].[yaf_UserMedal] where [UserID]=@UserID and [MedalID]=@MedalID

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_medal_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_user_medal_list]
    @UserID int = null,
    @MedalID int = null
as begin
        select 
        a.[MedalID],
        a.[Name],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        a.[SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        a.[SmallRibbonWidth],
        a.[SmallRibbonHeight],
        b.[SortOrder],
        a.[Flags],
        c.[Name] as [UserName],
        c.[DisplayName] as [DisplayName],
        b.[UserID],
        isnull(b.[Message],a.[Message]) as [Message],
        b.[Message] as [MessageEx],
        b.[Hide],
        b.[OnlyRibbon],
        b.[SortOrder] as [CurrentSortOrder],
        b.[DateAwarded]
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_UserMedal] b on b.[MedalID] = a.[MedalID]
        inner join [dbo].[yaf_User] c on c.[UserID] = b.[UserID]
    where
        (@UserID is null or b.[UserID] = @UserID) and
        (@MedalID is null or b.[MedalID] = @MedalID)		
    order by
        c.[Name] ASC,
        b.[SortOrder] ASC

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_medal_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[yaf_user_medal_save]
    @UserID int,
    @MedalID int,
    @Message nvarchar(100) = NULL,
    @Hide bit,
    @OnlyRibbon bit,
    @SortOrder tinyint,
    @DateAwarded datetime = NULL,
    @UTCTIMESTAMP datetime
as begin
        if exists(select 1 from [dbo].[yaf_UserMedal] where [UserID]=@UserID and [MedalID]=@MedalID) begin
        update [dbo].[yaf_UserMedal]
        set
            [Message] = @Message,
            [Hide] = @Hide,
            [OnlyRibbon] = @OnlyRibbon,
            [SortOrder] = @SortOrder
        where 
            [UserID]=@UserID and 
            [MedalID]=@MedalID
    end
    else begin

        if (@DateAwarded is null) set @DateAwarded = @UTCTIMESTAMP  

        insert into [dbo].[yaf_UserMedal]
            ([UserID],[MedalID],[Message],[Hide],[OnlyRibbon],[SortOrder],[DateAwarded])
        values
            (@UserID,@MedalID,@Message,@Hide,@OnlyRibbon,@SortOrder,@DateAwarded)
    end

end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_migrate]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_migrate]
(
    @UserID int,
    @ProviderUserKey nvarchar(64),
    @UpdateProvider bit = 0
)
AS
BEGIN
    
    DECLARE @Password nvarchar(255), @IsApproved bit, @LastActivity datetime, @Joined datetime
    
    UPDATE [dbo].[yaf_User] SET ProviderUserKey = @ProviderUserKey where UserID = @UserID

    IF (@UpdateProvider = 1)
    BEGIN
        SELECT
            @Password = [Password],
            @IsApproved = (CASE (Flags & 2) WHEN 2 THEN 1 ELSE 0 END),
            @LastActivity = LastVisit,
            @Joined = Joined
        FROM
            [dbo].[yaf_User]
        WHERE
            UserID = @UserID
        
        UPDATE
            [dbo].[yaf_prov_Membership]
        SET
            [Password] = @Password,
            PasswordFormat = '1',
            LastActivity = @LastActivity,
            IsApproved = @IsApproved,
            Joined = @Joined
        WHERE
            UserID = @ProviderUserKey
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_nntp]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_nntp](@BoardID int,@UserName nvarchar(255),@Email nvarchar(255),@TimeZone int, @UTCTIMESTAMP datetime) as
begin	
    
    declare @UserID int

    set @UserName = @UserName + ' (NNTP)'

    select
        @UserID=UserID
    from
        [dbo].[yaf_User]
    where
        BoardID=@BoardID and
        Name=@UserName

    if @@ROWCOUNT<1
    begin
        exec [dbo].[yaf_user_save] null,@BoardID,@UserName,@UserName,@Email,@TimeZone,null,null,null,null,null, 1, null, null, null, 0, 0,@UTCTIMESTAMP 
        
        -- The next one is not safe, but this procedure is only used for testing
        select @UserID = @@IDENTITY
    end

    select UserID=@UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_pmcount]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[yaf_user_pmcount]
    (@UserID int) 
AS
BEGIN
        DECLARE @CountIn int	
        DECLARE @CountOut int
        DECLARE @CountArchivedIn int		
        DECLARE @plimit1 int        
        DECLARE @pcount int
        
      set @plimit1 = (SELECT TOP 1 (c.PMLimit) FROM [dbo].[yaf_User] a 
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID WHERE a.UserID = @UserID ORDER BY c.PMLimit DESC)
      set @pcount = (SELECT TOP 1 c.PMLimit FROM [dbo].[yaf_Rank] c 
                        JOIN [dbo].[yaf_User] d
                           ON c.RankID = d.RankID WHERE d.UserID = @UserID ORDER BY c.PMLimit DESC)
      if (@plimit1 > @pcount) 
      begin
      set @pcount = @plimit1      
      end 
      
    -- get count of pm's in user's sent items
    
    SELECT 
        @CountOut=COUNT(1) 
    FROM 
        [dbo].[yaf_UserPMessage] a
    INNER JOIN [dbo].[yaf_PMessage] b ON a.PMessageID=b.PMessageID
    WHERE 
        (a.Flags & 2)<>0 AND 
        b.FromUserID = @UserID
    -- get count of pm's in user's  received items
    SELECT 
        @CountIn=COUNT(1) 
    FROM 
    [dbo].[yaf_PMessage] a
    INNER JOIN
    [dbo].[yaf_UserPMessage] b ON a.PMessageID = b.PMessageID
    WHERE b.IsDeleted = 0  
         AND b.IsArchived=0  
         -- ToUserID
         AND b.[UserID] = @UserID
    
    SELECT 
        @CountArchivedIn=COUNT(1) 
    FROM 
    [dbo].[yaf_PMessage] a
    INNER JOIN
    [dbo].[yaf_UserPMessage] b ON a.PMessageID = b.PMessageID
        WHERE
        b.IsArchived <>0 AND
        -- ToUserID
        b.[UserID] = @UserID

    -- return all pm data
    SELECT 
        NumberIn = @CountIn,
        NumberOut =  @CountOut,
        NumberTotal = @CountIn + @CountOut + @CountArchivedIn,
        NumberArchived =@CountArchivedIn,
        NumberAllowed = @pcount
            

END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_recoverpassword]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_recoverpassword](@BoardID int,@UserName nvarchar(255),@Email nvarchar(250)) as
begin
    
    declare @UserID int
    select @UserID = UserID from [dbo].[yaf_User] where BoardID = @BoardID and Name = @UserName and Email = @Email
    if @UserID is null begin
        select UserID = convert(int,null)
        return
    end else
    begin
        select UserID = @UserID
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_removeignoreduser]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_removeignoreduser]
    @UserID int,
    @IgnoredUserId int
AS BEGIN
        DELETE FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID AND IgnoredUserID = @IgnoredUserId
    
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_removepoints]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_removepoints] (@UserID int, @FromUserID int = null, @UTCTIMESTAMP datetime, @Points int) AS
BEGIN
    
    UPDATE [dbo].[yaf_User] SET Points = Points - @Points WHERE UserID = @UserID

    IF @FromUserID IS NOT NULL 
    BEGIN
        declare	@VoteDate datetime
    set @VoteDate = (select top 1 VoteDate from [dbo].[yaf_ReputationVote] where ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID)
    IF @VoteDate is not null
    begin	     
          update [dbo].[yaf_ReputationVote] set VoteDate=@UTCTIMESTAMP where VoteDate = @VoteDate AND ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID
    end
    ELSE
      begin
          insert into [dbo].[yaf_ReputationVote](ReputationFromUserID,ReputationToUserID,VoteDate)
          values (@FromUserID, @UserID, @UTCTIMESTAMP)
      end
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_repliedtopic]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_repliedtopic]
(@MessageID int, @UserID int) as
begin
        DECLARE @TopicID int
        SET @TopicID = (SELECT TopicID FROM [dbo].[yaf_Message] WHERE (MessageID = @MessageID))

        SELECT COUNT(t.MessageID)
        FROM [dbo].[yaf_Message] AS t WHERE (t.TopicID=@TopicID) AND (t.UserID = @UserID)
        
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_resetpoints]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_resetpoints] AS
BEGIN
    
    UPDATE [dbo].[yaf_User] SET Points = NumPosts * 3
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_save](
    @UserID				int,
    @BoardID			int,
    @UserName			nvarchar(255) = null,
    @DisplayName		nvarchar(255) = null,
    @Email				nvarchar(255) = null,
    @TimeZone			int,
    @LanguageFile		nvarchar(50) = null,
    @Culture		    varchar(10) = null,
    @ThemeFile			nvarchar(50) = null,
    @TextEditor			nvarchar(50) = null,
    @OverrideDefaultTheme	bit = null,
    @Approved			bit = null,
    @PMNotification		bit = null,
    @AutoWatchTopics    bit = null,	
    @ProviderUserKey	nvarchar(64) = null,
    @DSTUser            bit = null,
    @HideUser           bit = null,
    @NotificationType	int = null,
    @UTCTIMESTAMP datetime)
AS
begin
    
    declare @RankID int
    declare @Flags int	
    declare @OldDisplayName nvarchar(255)		
        
    if @DSTUser is null SET @DSTUser = 0
    if @HideUser is null SET @HideUser = 0
    if @PMNotification is null SET @PMNotification = 1
    if @AutoWatchTopics is null SET @AutoWatchTopics = 0
    if @OverrideDefaultTheme is null SET @OverrideDefaultTheme=0

    if @UserID is null or @UserID<1 begin
        
        if @Approved<>0 set @Flags = @Flags | 2	
        if @Email = '' set @Email = null
        
        select @RankID = RankID from [dbo].[yaf_Rank] where (Flags & 1)<>0 and BoardID=@BoardID

        insert into [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName,Password,Email,Joined,LastVisit,NumPosts,TimeZone,Flags,PMNotification,AutoWatchTopics,NotificationType,ProviderUserKey) 
        values(@BoardID,@RankID,@UserName,@DisplayName,'-',@Email,@UTCTIMESTAMP ,@UTCTIMESTAMP ,0,@TimeZone, @Flags,@PMNotification,@AutoWatchTopics,@NotificationType,@ProviderUserKey)		
    
        set @UserID = SCOPE_IDENTITY()

        insert into [dbo].[yaf_UserGroup](UserID,GroupID) select @UserID,GroupID from [dbo].[yaf_Group] where BoardID=@BoardID and (Flags & 4)<>0
    end
    else begin
        SELECT @Flags = Flags, @OldDisplayName = DisplayName FROM [dbo].[yaf_User] where UserID = @UserID
        
        -- set user dirty 
        set @Flags = @Flags	| 64
        
        IF ((@DSTUser<>0) AND (@Flags & 32) <> 32)		
        SET @Flags = @Flags | 32
        ELSE IF ((@DSTUser=0) AND (@Flags & 32) = 32)
        SET @Flags = @Flags ^ 32
            
        IF ((@HideUser<>0) AND ((@Flags & 16) <> 16)) 
        SET @Flags = @Flags | 16 
        ELSE IF ((@HideUser=0) AND ((@Flags & 16) = 16)) 
        SET @Flags = @Flags ^ 16
        
        update [dbo].[yaf_User] set
            TimeZone = @TimeZone,
            LanguageFile = @LanguageFile,
            ThemeFile = @ThemeFile,
            Culture = @Culture,
            TextEditor = @TextEditor,
            OverridedefaultThemes = @OverrideDefaultTheme,
            PMNotification = (CASE WHEN (@PMNotification is not null) THEN  @PMNotification ELSE PMNotification END),
            AutoWatchTopics = (CASE WHEN (@AutoWatchTopics is not null) THEN  @AutoWatchTopics ELSE AutoWatchTopics END),
            NotificationType =  (CASE WHEN (@NotificationType is not null) THEN  @NotificationType ELSE NotificationType END),
            Flags = (CASE WHEN @Flags<>Flags THEN  @Flags ELSE Flags END),
            DisplayName = (CASE WHEN (@DisplayName is not null) THEN  @DisplayName ELSE DisplayName END),
            Email = (CASE WHEN (@Email is not null) THEN  @Email ELSE Email END) 
        where UserID = @UserID	
        -- here we sync a new display name everywhere
        if (@DisplayName IS NOT NULL AND COALESCE(@OldDisplayName,'') != COALESCE(@DisplayName,''))
        begin
        -- sync display names everywhere - can run a long time on large forums
        update [dbo].[yaf_Forum] set LastUserDisplayName = @DisplayName where LastUserID = @UserID  AND (LastUserDisplayName IS NULL OR LastUserDisplayName = @OldDisplayName)
        update [dbo].[yaf_Topic] set LastUserDisplayName = @DisplayName where LastUserID = @UserID AND (LastUserDisplayName IS NULL OR LastUserDisplayName = @OldDisplayName)
        update [dbo].[yaf_Topic] set UserDisplayName = @DisplayName where UserID = @UserID AND (UserDisplayName IS NULL OR UserDisplayName = @OldDisplayName)
        update [dbo].[yaf_Message] set UserDisplayName = @DisplayName where UserID = @UserID AND (UserDisplayName IS NULL OR UserDisplayName = @OldDisplayName)
        update [dbo].[yaf_ShoutboxMessage] set UserDisplayName = @DisplayName where UserID = @UserID AND (UserDisplayName IS NULL OR UserDisplayName = @OldDisplayName)
        end
        
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_saveavatar]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_saveavatar]
(
    @UserID int,
    @Avatar nvarchar(255) = NULL,
    @AvatarImage image = NULL,
    @AvatarImageType nvarchar(50) = NULL
)
AS
BEGIN
    
    IF @Avatar IS NOT NULL 
    BEGIN
        UPDATE
            [dbo].[yaf_User]
        SET
            Avatar = @Avatar,
            AvatarImage = null,
            AvatarImageType = null
        WHERE
            UserID = @UserID
    END
    ELSE IF @AvatarImage IS NOT NULL 
    BEGIN
        UPDATE
            [dbo].[yaf_User]
        SET
            AvatarImage = @AvatarImage,
            AvatarImageType = @AvatarImageType,
            Avatar = null
        WHERE
            UserID = @UserID
    END
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_savenotification]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_savenotification](
    @UserID				int,
    @PMNotification		bit = null,
    @AutoWatchTopics    bit = null,
    @NotificationType	int = null,
    @DailyDigest		bit = null
)
AS
BEGIN

        UPDATE
            [dbo].[yaf_User]
        SET
            PMNotification = (CASE WHEN (@PMNotification is not null) THEN  @PMNotification ELSE PMNotification END),
            AutoWatchTopics = (CASE WHEN (@AutoWatchTopics is not null) THEN  @AutoWatchTopics ELSE AutoWatchTopics END),
            NotificationType =  (CASE WHEN (@NotificationType is not null) THEN  @NotificationType ELSE NotificationType END),
            DailyDigest = (CASE WHEN (@DailyDigest is not null) THEN  @DailyDigest ELSE DailyDigest END)
        WHERE
            UserID = @UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_savepassword]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_savepassword](@UserID int,@Password nvarchar(32)) as
begin
    
    update [dbo].[yaf_User] set Password = @Password where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_savesignature]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_savesignature](@UserID int,@Signature ntext) as
begin
    
    update [dbo].[yaf_User] set Signature = @Signature where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_savestyle]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_savestyle](@GroupID int, @RankID int)  as

begin
-- loop thru users to sync styles

 /*   declare @usridtmp int 
    declare @styletmp varchar(255)      
        declare c cursor for
            select us.UserID, us.NewUserStyle from (
                select uu.UserID, uu.UserStyle, NewUserStyle = ISNULL(
                    (SELECT TOP 1 f.Style FROM [dbo].[yaf_UserGroup] e WITH (NOLOCK) join [dbo].[yaf_Group] f WITH (NOLOCK) on f.GroupID=e.GroupID WHERE e.UserID=uu.UserID AND f.Style != '' ORDER BY f.SortOrder),
                    (SELECT TOP 1 r.Style FROM [dbo].[yaf_Rank] r WITH (NOLOCK) where RankID = uu.RankID))
                from [dbo].[yaf_User] uu WITH (NOLOCK)
                JOIN [dbo].[yaf_UserGroup] ug WITH (NOLOCK) ON ug.UserID = uu.UserID
                where
                (@RankID IS NULL OR uu.RankID = @RankID) AND
                (@GroupID IS NULL OR ug.GroupID = @GroupID)) us
            where us.UserStyle != us.NewUserStyle 
        FOR UPDATE -- OF UserStyle
        open c
        
        fetch next from c into @usridtmp, @styletmp
        while @@FETCH_STATUS = 0
        begin      
            UPDATE [dbo].[yaf_User] SET UserStyle = @styletmp  WHERE UserID = @usridtmp  -- CURRENT OF c 	 			            
            fetch next from c into @usridtmp, @styletmp     
        end
        close c
        deallocate c  
        */
        update d
        set    d.UserStyle = ISNULL((select top 1 f.Style FROM [dbo].[yaf_UserGroup] e 
                                     join [dbo].[yaf_Group] f on f.GroupID=e.GroupID 
                                     WHERE f.Style IS NOT NULL and e.UserID = d.UserID order by f.SortOrder),
                                    (SELECT TOP 1 r.Style FROM [dbo].[yaf_Rank] r 
                                    join [dbo].[yaf_User] u on u.RankID = r.RankID 
                                    where u.UserID = d.UserID ))	    
        from  [dbo].[yaf_User] d; 
    
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_setnotdirty]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_setnotdirty](@UserID int) as
begin	
    update [dbo].[yaf_User] set Flags = Flags ^ 64 where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_setpoints]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_setpoints] (@UserID int,@Points int) AS
BEGIN
    
    UPDATE [dbo].[yaf_User] SET Points = @Points WHERE UserID = @UserID
END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_setrole]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_setrole](@BoardID int,@ProviderUserKey nvarchar(64),@Role nvarchar(255)) as
begin
    
    declare @UserID int, @GroupID int
    
    select @UserID=UserID from [dbo].[yaf_User] where BoardID=@BoardID and ProviderUserKey=@ProviderUserKey

    if @Role is null
    begin
        delete from [dbo].[yaf_UserGroup] where UserID=@UserID
    end else
    begin
        if not exists(select 1 from [dbo].[yaf_Group] where BoardID=@BoardID and Name=@Role)
        begin
            insert into [dbo].[yaf_Group](Name,BoardID,Flags)
            values(@Role,@BoardID,0);
            set @GroupID = SCOPE_IDENTITY()

            insert into [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID)
            select
                @GroupID,
                a.ForumID,
                min(a.AccessMaskID)
            from
                [dbo].[yaf_ForumAccess] a
                join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
            where
                b.BoardID=@BoardID and
                (b.Flags & 4)=4
            group by
                a.ForumID
        end else
        begin
            select @GroupID = GroupID from [dbo].[yaf_Group] where BoardID=@BoardID and Name=@Role
        end
        -- user already can be in the group even if Role isn't null, an extra check is required 
        if not exists(select 1 from [dbo].[yaf_UserGroup] where UserID=@UserID and GroupID=@GroupID)
        begin
        insert into [dbo].[yaf_UserGroup](UserID,GroupID) values(@UserID,@GroupID)
        end
    end
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_simplelist]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN               
       
        SELECT TOP(@Limit)  a.[UserID],
                 a.[Name],
				 a.[DisplayName]
        FROM     [dbo].[yaf_User] a
        WHERE    a.[UserID] >= @StartID
        AND a.[UserID] < (@StartID + @Limit)
        ORDER BY a.[UserID]     
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_suspend]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_suspend](@UserID int,@Suspend datetime=null, @SuspendReason ntext = null, @SuspendBy int = 0) as
    begin
        update 
	        [dbo].[yaf_User] 
	    set 
		    Suspended = @Suspend, 
			SuspendedReason = @SuspendReason,
			SuspendedBy = @SuspendBy
		where 
		    UserID=@UserID
    end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_thankedmessage]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_thankedmessage]
(@MessageID int, @UserID int) as
begin
        SELECT COUNT(TH.ThanksID)
        FROM [dbo].[yaf_Thanks] AS TH WHERE (TH.MessageID=@MessageID) AND (TH.ThanksFromUserID = @UserID)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_thankfromcount]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[yaf_user_thankfromcount]
(@UserID int) as
begin
        SELECT COUNT(TH.ThanksID) 
        FROM [dbo].[yaf_Thanks] AS TH WHERE (TH.ThanksToUserID=@UserID)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_update_single_sign_on_status]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_update_single_sign_on_status](@UserID int,@IsFacebookUser bit,@IsTwitterUser bit,@IsGoogleUser bit) as
begin
    
    update [dbo].[yaf_User] set IsFacebookUser = @IsFacebookUser , IsTwitterUser = @IsTwitterUser, IsGoogleUser = @IsGoogleUser where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_upgrade]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_user_upgrade](@UserID int) as
begin
    
    declare @RankID			int
    declare @Flags			int
    declare @MinPosts		int
    declare @NumPosts		int
    declare @BoardId		int
    declare @RankBoardID	int

    -- Get user and rank information
    select
        @RankID = b.RankID,
        @Flags = b.Flags,
        @MinPosts = b.MinPosts,
        @NumPosts = a.NumPosts,
        @BoardId = a.BoardID		
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_Rank] b on b.RankID = a.RankID
    where
        a.UserID = @UserID
    
    -- If user isn't member of a ladder rank, exit
    if (@Flags & 2) = 0 return

    -- retrieve board current user's rank beling to	
    select @RankBoardID = BoardID
    from   [dbo].[yaf_Rank]
    where  RankID = @RankID

    -- does user have rank from his board?
    IF @RankBoardID <> @BoardId begin
        -- get highest rank user can get
        select top 1
               @RankID = RankID
        from   [dbo].[yaf_Rank]
        where  BoardID = @BoardId
               and (Flags & 2) = 2
               and MinPosts <= @NumPosts
        order by
               MinPosts desc
    end
    else begin
        -- See if user got enough posts for next ladder group
        select top 1
            @RankID = RankID
        from
            [dbo].[yaf_Rank]
        where
            BoardID = @BoardId and
            (Flags & 2) = 2 and
            MinPosts <= @NumPosts and
            MinPosts > @MinPosts
        order by
            MinPosts
    end

    if @@ROWCOUNT=1
        update [dbo].[yaf_User] set RankID = @RankID where UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_user_viewallthanks]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[yaf_user_viewallthanks] @UserID int, @PageUserID int
AS 
    BEGIN
        SELECT  t.ThanksFromUserID,
                t.ThanksToUserID,
                c.MessageID,
                a.ForumID,
                a.TopicID,
                a.Topic,
                b.UserID,
                c.MessageID,
                c.Posted,
                c.[Message],
                c.Flags
        FROM   
                [dbo].[yaf_Thanks] t
                join [dbo].[yaf_Message] c  on c.MessageID = t.MessageID		 
                join [dbo].[yaf_Topic] a on a.TopicID = c.TopicID
                join [dbo].[yaf_User] b on c.UserID = b.UserID
                join [dbo].[yaf_ActiveAccess] x with(nolock) on x.ForumID = a.ForumID
        WHERE	
                c.IsDeleted = 0
                AND c.IsApproved = 1     				
                AND (t.ThanksFromUserID = @UserID OR t.ThanksToUserID = @UserID)
                AND a.TopicMovedID IS NULL
                AND a.IsDeleted = 0     
                AND x.UserID = @PageUserID	      
                AND x.ReadAccess <> 0
        ORDER BY c.Posted DESC
    END
GO
/****** Object:  StoredProcedure [dbo].[yaf_userforum_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_userforum_delete](@UserID int,@ForumID int) as
begin
    
    delete from [dbo].[yaf_UserForum] where UserID=@UserID and ForumID=@ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_userforum_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_userforum_list](@UserID int=null,@ForumID int=null) as 
begin
    
    select 
        a.*,
        b.AccessMaskID,
        b.Accepted,
        Access = c.Name
    from
        [dbo].[yaf_User] a
        join [dbo].[yaf_UserForum] b on b.UserID=a.UserID
        join [dbo].[yaf_AccessMask] c on c.AccessMaskID=b.AccessMaskID
    where
        (@UserID is null or a.UserID=@UserID) and
        (@ForumID is null or b.ForumID=@ForumID)
    order by
        a.Name	
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_userforum_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_userforum_save](@UserID int,@ForumID int,@AccessMaskID int,@UTCTIMESTAMP datetime) as
begin
    
    if exists(select 1 from [dbo].[yaf_UserForum] where UserID=@UserID and ForumID=@ForumID)
        update [dbo].[yaf_UserForum] set AccessMaskID=@AccessMaskID where UserID=@UserID and ForumID=@ForumID
    else
        insert into [dbo].[yaf_UserForum](UserID,ForumID,AccessMaskID,Invited,Accepted) values(@UserID,@ForumID,@AccessMaskID,@UTCTIMESTAMP ,1)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_usergroup_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_usergroup_list](@UserID int) as begin
    
    select 
        b.GroupID,
        b.Name,
        b.Style
    from
        [dbo].[yaf_UserGroup] a
        join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
    where
        a.UserID = @UserID
    order by
        b.Name
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_usergroup_save]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_usergroup_save](@UserID int,@GroupID int,@Member bit) as
begin
    
    if @Member=0
    begin
        delete from [dbo].[yaf_UserGroup] where UserID=@UserID and GroupID=@GroupID
    end 
    else
    begin
        insert into [dbo].[yaf_UserGroup](UserID,GroupID)
        select @UserID,@GroupID
        where not exists(select 1 from [dbo].[yaf_UserGroup] where UserID=@UserID and GroupID=@GroupID)
        UPDATE [dbo].[yaf_User] SET UserStyle= ISNULL(( SELECT TOP 1 f.Style FROM [dbo].[yaf_UserGroup] e 
        join [dbo].[yaf_Group] f on f.GroupID=e.GroupID WHERE e.UserID=@UserID AND f.Style IS NOT NULL ORDER BY f.SortOrder), (SELECT TOP 1 r.Style FROM [dbo].[yaf_Rank] r where r.RankID = [dbo].[yaf_User].RankID)) 
        WHERE UserID = @UserID    	
    end  
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_userpmessage_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_userpmessage_delete](@UserPMessageID int) as
begin
    
    delete from [dbo].[yaf_UserPMessage] where UserPMessageID=@UserPMessageID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_userpmessage_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_userpmessage_list](@UserPMessageID int) as
begin
    
    SELECT
        a.*,
        FromUser = b.Name,
        ToUserID = c.UserID,
        ToUser = c.Name,
        d.IsRead,
        d.IsReply,
        d.UserPMessageID
    FROM
        [dbo].[yaf_PMessage] a
        INNER JOIN [dbo].[yaf_UserPMessage] d ON d.PMessageID = a.PMessageID
        INNER JOIN [dbo].[yaf_User] b ON b.UserID = a.FromUserID
        inner join [dbo].[yaf_User] c ON c.UserID = d.UserID
    WHERE
        d.UserPMessageID = @UserPMessageID
    AND
        d.IsDeleted=0
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchforum_add]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchforum_add](@UserID int,@ForumID int,@UTCTIMESTAMP datetime) as
begin
    
    insert into [dbo].[yaf_WatchForum](ForumID,UserID,Created)
    select @ForumID, @UserID, @UTCTIMESTAMP 
    where not exists(select 1 from [dbo].[yaf_WatchForum] where ForumID=@ForumID and UserID=@UserID)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchforum_check]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchforum_check](@UserID int,@ForumID int) as
begin
    
    SELECT WatchForumID FROM [dbo].[yaf_WatchForum] WHERE UserID = @UserID AND ForumID = @ForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchforum_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchforum_delete](@WatchForumID int) as
begin
    
    delete from [dbo].[yaf_WatchForum] where WatchForumID = @WatchForumID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchforum_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchforum_list](@UserID int) as
begin
    
    select
        a.*,
        ForumName = b.Name,
        [Messages] = (select count(1) from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID=a.ForumID),
        Topics = (select count(1) from [dbo].[yaf_Topic] x where x.ForumID=a.ForumID and x.TopicMovedID is null),
        b.LastPosted,
        b.LastMessageID,
        LastTopicID = (select TopicID from [dbo].[yaf_Message] x where x.MessageID=b.LastMessageID),
        b.LastUserID,
        LastUserName = IsNull(b.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=b.LastUserID)),
        LastUserDisplayName = IsNull(b.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=b.LastUserID))
    from
        [dbo].[yaf_WatchForum] a
        inner join [dbo].[yaf_Forum] b on b.ForumID = a.ForumID
    where
        a.UserID = @UserID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchtopic_add]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchtopic_add](@UserID int,@TopicID int,@UTCTIMESTAMP datetime) as
begin
    
    insert into [dbo].[yaf_WatchTopic](TopicID,UserID,Created)
    select @TopicID, @UserID, @UTCTIMESTAMP 
    where not exists(select 1 from [dbo].[yaf_WatchTopic] where TopicID=@TopicID and UserID=@UserID)
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchtopic_check]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchtopic_check](@UserID int,@TopicID int) as
begin
    
    SELECT WatchTopicID FROM [dbo].[yaf_WatchTopic] WHERE UserID = @UserID AND TopicID = @TopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchtopic_delete]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchtopic_delete](@WatchTopicID int) as
begin
        delete from [dbo].[yaf_WatchTopic] where WatchTopicID = @WatchTopicID
end
GO
/****** Object:  StoredProcedure [dbo].[yaf_watchtopic_list]    Script Date: 06.02.2016 16:47:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[yaf_watchtopic_list](@UserID int) as
begin
        select
        a.*,
        TopicName = b.Topic,
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=b.TopicID) -1,
		b.ForumID,
        b.[Views],
        b.LastPosted,
        b.LastMessageID,
        b.LastUserID,
        LastUserName = IsNull(b.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=b.LastUserID)),
        LastUserDisplayName = IsNull(b.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=b.LastUserID))
    from
        [dbo].[yaf_WatchTopic] a
        inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
    where
        a.UserID = @UserID
end
GO

	CREATE TABLE [dbo].[ForumContests](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ForumId] [int] NULL,
	[ContestId] [int] NULL
	);

GO

IF not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_Membership]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_prov_Membership](
		[UserID] [nvarchar](64) NOT NULL,
		[ApplicationID] [uniqueidentifier] NOT NULL,
		[Username] [nvarchar](256) NOT NULL,
		[UsernameLwd] [nvarchar](256) NOT NULL,
		[Password] [nvarchar](256) NULL,
		[PasswordSalt] [nvarchar](256) NULL,
		[PasswordFormat] [nvarchar](256) NULL,
		[Email] [nvarchar](256) NULL,
		[EmailLwd] [nvarchar](256) NULL,
		[PasswordQuestion] [nvarchar](256) NULL,
		[PasswordAnswer] [nvarchar](256) NULL,
		[IsApproved] [bit] NULL,
		[IsLockedOut] [bit] NULL,
		[LastLogin] [datetime] NULL,
		[LastActivity] [datetime] NULL,
		[LastPasswordChange] [datetime] NULL,
		[LastLockOut] [datetime] NULL,
		[FailedPasswordAttempts] [int] NULL,
		[FailedAnswerAttempts] [int] NULL,
		[FailedPasswordWindow] [datetime] NULL,
		[FailedAnswerWindow] [datetime] NULL,
		[Joined] [datetime] NULL,
		[Comment] [ntext] NULL, 
		CONSTRAINT [PK_yaf_prov_Membership] PRIMARY KEY CLUSTERED ([UserID] ASC)
		)
GO

IF not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_Application]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_prov_Application](
		[ApplicationID] [uniqueidentifier] NOT NULL,
		[ApplicationName] [nvarchar](256) NULL,
		[ApplicationNameLwd] [nvarchar](256) NULL,
		[Description] [ntext] NULL,
		CONSTRAINT [PK_yaf_prov_Application] PRIMARY KEY CLUSTERED ([ApplicationID] ASC)
		)
GO

IF not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_Profile]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_prov_Profile]
	(
		[UserID] [nvarchar](64) NOT NULL,
		[LastUpdatedDate] [datetime] NOT NULL,
		CONSTRAINT [PK_yaf_prov_Profile] PRIMARY KEY CLUSTERED ([UserID] ASC)
	)
GO

IF not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_Role]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_prov_Role]
	(
	[RoleID] [uniqueidentifier] NOT NULL,
	[ApplicationID] [uniqueidentifier] NOT NULL,
	[RoleName] [nvarchar](256) NOT NULL,
	[RoleNameLwd] [nvarchar](256) NOT NULL,
	CONSTRAINT [PK_yaf_prov_Role] PRIMARY KEY CLUSTERED ([RoleID] ASC)
	)
GO

IF not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_RoleMembership]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_prov_RoleMembership]
	(
	[RoleID] [uniqueidentifier] NOT NULL,
	[UserID] [nvarchar](64) NOT NULL
	)
GO

if exists(select 1 from sys.columns where object_id=object_id('[dbo].[yaf_prov_Membership]') and name='UserID' and system_type_id='36')
begin
	if exists(select 1 from sys.indexes where object_id=object_id('[dbo].[yaf_prov_Membership]') and is_primary_key = 1)
	begin
		-- drop the primary key constrant
		DECLARE @PrimaryIXName nvarchar(255)		
		SET @PrimaryIXName = (select [name] from sys.indexes where object_id=object_id('[dbo].[yaf_prov_Membership]') and is_primary_key = 1)
		exec('ALTER TABLE [dbo].[yaf_prov_Membership] DROP CONSTRAINT ' + @PrimaryIXName);
	end
	-- alter the column
	ALTER TABLE [dbo].[yaf_prov_Membership] ALTER COLUMN UserID nvarchar(64) NOT NULL
	-- add primary key constraint back...
	ALTER TABLE [dbo].[yaf_prov_Membership] ADD CONSTRAINT [PK_yaf_prov_Membership] PRIMARY KEY CLUSTERED ([UserID] ASC)
end
GO

if exists(select 1 from sys.columns where object_id=object_id('[dbo].[yaf_prov_Profile]') and name='UserID' and system_type_id='36')
begin
	if exists(select 1 from sys.indexes where object_id=object_id('[dbo].[yaf_prov_Profile]') and is_primary_key = 1)
	begin
		-- drop the primary key constrant
		DECLARE @PrimaryIXName nvarchar(255)		
		SET @PrimaryIXName = (select [name] from sys.indexes where object_id=object_id('[dbo].[yaf_prov_Profile]') and is_primary_key = 1)
		exec('ALTER TABLE [dbo].[yaf_prov_Profile] DROP CONSTRAINT ' + @PrimaryIXName);
	end
	-- alter the column
	ALTER TABLE [dbo].[yaf_prov_Profile] ALTER COLUMN UserID nvarchar(64) NOT NULL
	-- add primary key constraint back...
	ALTER TABLE [dbo].[yaf_prov_Profile] ADD CONSTRAINT [PK_yaf_prov_Profile] PRIMARY KEY CLUSTERED ([UserID] ASC)
end
GO

if exists(select 1 from sys.columns where object_id=object_id('[dbo].[yaf_prov_RoleMembership]') and name='UserID' and system_type_id='36')
begin
	-- drop the provider user key index if it exists...
	if exists(select 1 from sys.indexes where name=N'IX_yaf_prov_RoleMembership_UserID' and object_id=object_id(N'[dbo].[yaf_prov_RoleMembership]'))
	begin
		DROP INDEX [IX_yaf_prov_RoleMembership_UserID] ON [dbo].[yaf_prov_RoleMembership]
	end
	-- alter the column
	ALTER TABLE [dbo].[yaf_prov_RoleMembership] ALTER COLUMN UserID nvarchar(64) NOT NULL
end
GO

--===================================== TABLES =======================================

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_drop_defaultconstraint_oncolumn]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_drop_defaultconstraint_oncolumn]
GO

CREATE PROCEDURE [dbo].[yaf_drop_defaultconstraint_oncolumn](@tablename varchar(255), @columnname varchar(255)) as
BEGIN
DECLARE @DefName sysname

SELECT 
  @DefName = o1.name
FROM
  sys.objects o1
  INNER JOIN sys.columns c ON
  o1.object_id = c.default_object_id
  INNER JOIN sys.objects o2 ON
  c.object_id = o2.object_id
WHERE
  o2.name = @tablename AND
  c.name = @columnname
  
IF @DefName IS NOT NULL
  EXECUTE ('ALTER TABLE [dbo].[' + @tablename + '] DROP constraint [' + @DefName + ']')
END
GO

/*
** Create missing tables
*/

/* Create Thanks Table */
if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Thanks]') and type in (N'U'))
CREATE TABLE [dbo].[yaf_Thanks](
	[ThanksID] [int] IDENTITY(1,1) NOT NULL,
	[ThanksFromUserID] [int] NOT NULL,
	[ThanksToUserID] [int] NOT NULL,
	[MessageID] [int] NOT NULL,
	[ThanksDate] [smalldatetime] NOT NULL,
	constraint [PK_yaf_Thanks] primary key(ThanksID)
	)
go

/* YAF Buddy Table */
if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Buddy]') and type in (N'U'))
CREATE TABLE [dbo].[yaf_Buddy](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FromUserID] [int] NOT NULL,
	[ToUserID] [int] NOT NULL,
	[Approved] [bit] NOT NULL,
	[Requested] [datetime] NOT NULL,
	constraint [PK_yaf_Buddy] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_Buddy] UNIQUE NONCLUSTERED 
(
	[FromUserID] ASC,
	[ToUserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
go

/* YAF FavoriteTopic Table */
if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_FavoriteTopic]') and type in (N'U'))
CREATE TABLE [dbo].[yaf_FavoriteTopic](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[TopicID] [int] NOT NULL,
	constraint [PK_yaf_FavoriteTopic] primary key(ID)
	)
GO

/* YAF Album Tables*/
if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_UserAlbum]') and type in (N'U'))
CREATE TABLE [dbo].[yaf_UserAlbum](
	[AlbumID] [INT] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[Title] [NVARCHAR](255),
	[CoverImageID] [INT],
	[Updated] [DATETIME] NOT NULL,
	constraint [PK_yaf_User_Album] primary key(AlbumID)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_UserAlbumImage]') and type in (N'U'))
CREATE TABLE [dbo].[yaf_UserAlbumImage](
	[ImageID] [INT] IDENTITY(1,1) NOT NULL,
	[AlbumID] [int] NOT NULL,
	[Caption] [NVARCHAR](255),
	[FileName] [NVARCHAR](255) NOT NULL,
	[Bytes] [INT] NOT NULL,
	[ContentType] [NVARCHAR](50),
	[Uploaded] [DATETIME] NOT NULL,
	[Downloads] [INT] NOT NULL,
	constraint [PK_yaf_User_AlbumImage] primary key(ImageID)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Active]') and type in (N'U'))
	create table [dbo].[yaf_Active](
		SessionID		nvarchar (24) NOT NULL,
		BoardID			int NOT NULL,
		UserID			int NOT NULL,
		IP				varchar (39) NOT NULL,
		[Login]			datetime NOT NULL,
		LastActive		datetime NOT NULL,
		Location		nvarchar (255) NOT NULL,
		ForumID			int NULL,
		TopicID			int NULL,
		Browser			nvarchar (50) NULL,
		[Platform]		nvarchar (50) NULL,
		Flags           int NULL,
		ForumPage       nvarchar(1024) NULL,
        constraint [PK_yaf_Active] PRIMARY KEY CLUSTERED 
(
	[SessionID] ASC,
	[BoardID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
go

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_ActiveAccess]') and type in (N'U'))
	create table [dbo].[yaf_ActiveAccess](		
		UserID			    int NOT NULL,
		BoardID			    int NOT NULL,			
		ForumID			    int NOT NULL,
		IsAdmin				bit NOT NULL,
		IsForumModerator	bit NOT NULL,
		IsModerator			bit NOT NULL,
		ReadAccess			bit NOT NULL,
		PostAccess			bit NOT NULL,
		ReplyAccess			bit NOT NULL,
		PriorityAccess		bit NOT NULL,
		PollAccess			bit NOT NULL,
		VoteAccess			bit NOT NULL,
		ModeratorAccess		bit NOT NULL,
		EditAccess			bit NOT NULL,
		DeleteAccess		bit NOT NULL,
		UploadAccess		bit NOT NULL,		
		DownloadAccess		bit NOT NULL,
		LastActive			datetime NULL,
		IsGuestX			bit NOT NULL,
        constraint [PK_yaf_ActiveAccess] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)	
	)
go

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_AdminPageUserAccess]') and type in (N'U'))
	create table [dbo].[yaf_AdminPageUserAccess](
		UserID		    int NOT NULL,		
		PageName		nvarchar (128) NOT NULL,
 constraint [PK_yaf_AdminPageUserAccess] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[PageName] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
go

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_EventLogGroupAccess]') and type in (N'U'))
	create table [dbo].[yaf_EventLogGroupAccess](
		GroupID		    int NOT NULL,	
		EventTypeID     int NOT NULL,  	
		EventTypeName	nvarchar (128) NOT NULL,
		DeleteAccess    bit NOT NULL,
 constraint [PK_yaf_EventLogGroupAccess] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC,
	[EventTypeID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
go

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_BannedIP]') and type in (N'U'))
	create table [dbo].[yaf_BannedIP](
		ID				int IDENTITY (1,1) NOT NULL,
		BoardID			int NOT NULL,
		Mask			nvarchar (15) NOT NULL,
		Since			datetime NOT NULL,
		Reason          nvarchar (128) NULL,
		UserID			int null,
 constraint [PK_yaf_BannedIP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_BannedIP] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Mask] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
go

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_BannedName]') and type in (N'U'))
	create table [dbo].[yaf_BannedName](
		ID				int IDENTITY (1,1) NOT NULL,
		BoardID			int NOT NULL,
		Mask			nvarchar (255) NOT NULL,
		Since			datetime NOT NULL,
		Reason          nvarchar (128) NULL,
 constraint [PK_yaf_BannedName] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_BannedName] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Mask] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
go

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_BannedEmail]') and type in (N'U'))
	create table [dbo].[yaf_BannedEmail](
		ID				int IDENTITY (1,1) NOT NULL,
		BoardID			int NOT NULL,
		Mask			nvarchar (255) NOT NULL,
		Since			datetime NOT NULL,
		Reason          nvarchar (128) NULL,
 constraint [PK_yaf_BannedEmail] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_BannedEmail] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Mask] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
go

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Category]') and type in (N'U'))
	create table [dbo].[yaf_Category](
		CategoryID		int IDENTITY (1,1) NOT NULL,
		BoardID			int NOT NULL,
		[Name]			[nvarchar](128) NOT NULL,
		[CategoryImage] [nvarchar](255) NULL,		
		SortOrder		smallint NOT NULL,
		PollGroupID     int null,
 constraint [PK_yaf_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_Category] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_CheckEmail]') and type in (N'U'))
	create table [dbo].[yaf_CheckEmail](
		CheckEmailID	int IDENTITY (1,1) NOT NULL,
		UserID			int NOT NULL,
		Email			nvarchar (255) NOT NULL,
		Created			datetime NOT NULL,
		[Hash]			nvarchar (32) NOT NULL,
 constraint [PK_yaf_CheckEmail] PRIMARY KEY CLUSTERED 
(
	[CheckEmailID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_CheckEmail] UNIQUE NONCLUSTERED 
(
	[Hash] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Choice]') and type in (N'U'))
	create table [dbo].[yaf_Choice](
		ChoiceID		int IDENTITY (1,1) NOT NULL,
		PollID			int NOT NULL,
		Choice			nvarchar (50) NOT NULL,
		Votes			int NOT NULL,
		[ObjectPath] nvarchar(255) NULL,
		[MimeType] varchar(50) NULL,
 constraint [PK_yaf_Choice] PRIMARY KEY CLUSTERED 
(
	[ChoiceID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_PollVote]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_PollVote] (
		[PollVoteID] [int] IDENTITY (1,1) NOT NULL,
		[PollID] [int] NOT NULL,
		[UserID] [int] NULL,
		[RemoteIP] [varchar] (39) NULL,
		[ChoiceID] [int] NULL,
 constraint [PK_yaf_PollVote] PRIMARY KEY CLUSTERED 
(
	[PollVoteID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_PollVoteRefuse]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_PollVoteRefuse] (
		[RefuseID] [int] IDENTITY (1,1) NOT NULL,		
		[PollID] [int] NOT NULL,
		[UserID] [int] NULL,
		[RemoteIP] [varchar] (57) NULL
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Forum]') and type in (N'U'))
	create table [dbo].[yaf_Forum](
		ForumID			int IDENTITY (1,1) NOT NULL,
		CategoryID		int NOT NULL,
		ParentID		int NULL,
		Name			nvarchar (50) NOT NULL,
		[Description]	nvarchar (255) NULL,
		SortOrder		smallint NOT NULL,
		LastPosted		datetime NULL,
		LastTopicID		int NULL,
		LastMessageID	int NULL,
		LastUserID		int NULL,
		LastUserName	nvarchar (255) NULL,
		LastUserDisplayName	nvarchar (255) NULL,
		NumTopics		int NOT NULL,
		NumPosts		int NOT NULL,
		RemoteURL		nvarchar(100) null,
		Flags			int not null constraint [DF_yaf_Forum_Flags] default (0),
		[IsLocked]		AS (CONVERT([bit],sign([Flags]&(1)),(0))),
		[IsHidden]		AS (CONVERT([bit],sign([Flags]&(2)),(0))),
		[IsNoCount]		AS (CONVERT([bit],sign([Flags]&(4)),(0))),
		[IsModerated]	AS (CONVERT([bit],sign([Flags]&(8)),(0))),
		ThemeURL		nvarchar(50) NULL,
		PollGroupID     int null,
		ImageURL        nvarchar(128) NULL,
	    Styles          nvarchar(255) NULL,
		UserID          int null,
		ModeratedPostCount int null,
		IsModeratedNewTopicOnly	bit not null constraint [DF_yaf_Forum_IsModeratedNewTopicOnly] default (0),
 constraint [PK_yaf_Forum] PRIMARY KEY CLUSTERED 
(
	[ForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_ForumAccess]') and type in (N'U'))
	create table [dbo].[yaf_ForumAccess](
		GroupID			int NOT NULL,
		ForumID			int NOT NULL,
		AccessMaskID	int NOT NULL,
 constraint [PK_yaf_ForumAccess] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC,
	[ForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Group]') and type in (N'U'))
	create table [dbo].[yaf_Group](
		GroupID		   int IDENTITY (1,1) NOT NULL,
		BoardID		   int NOT NULL,
		[Name]		   nvarchar (255) NOT NULL,
		Flags		   int not null constraint [DF_yaf_Group_Flags] default (0),
		PMLimit        int NOT NULL	constraint [DF_yaf_Group_PMLimit] default (0),
	    Style          nvarchar(255) NULL,
	    SortOrder      smallint NOT NULL constraint [DF_yaf_Group_SortOrder] default (0),
	    [Description]  nvarchar(128) NULL,
	    UsrSigChars    int NOT NULL constraint [DF_yaf_Group_UsrSigChars] default (0),
	    UsrSigBBCodes  nvarchar(255) NULL,
	    UsrSigHTMLTags nvarchar(255) NULL,
	    UsrAlbums      int NOT NULL constraint [DF_yaf_Group_UsrAlbums] default (0),
	    UsrAlbumImages int NOT NULL constraint [DF_yaf_Group_UsrAlbumImages]  default (0),
	    IsHidden       AS (CONVERT([bit],sign([Flags]&(16)),(0))),
	    IsUserGroup    AS (CONVERT([bit],sign([Flags]&(32)),(0))),
 constraint [PK_yaf_Group] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_Group] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Mail]') and type in (N'U'))
	create table [dbo].[yaf_Mail](
		[MailID] [int] IDENTITY(1,1) NOT NULL,
		[FromUser] [nvarchar](255) NOT NULL,
		[FromUserName] [nvarchar](255) NULL,
		[ToUser] [nvarchar](255) NOT NULL,
		[ToUserName] [nvarchar](255) NULL,
		[Created] [datetime] NOT NULL,
		[Subject] [nvarchar](100) NOT NULL,
		[Body] [ntext] NOT NULL,
		[BodyHtml] [ntext] NULL,
		[SendTries] [int] NOT NULL constraint [DF_yaf_Mail_SendTries]  default (0),
		[SendAttempt] [datetime] NULL,
		[ProcessID] [int] NULL,
 constraint [PK_yaf_Mail] PRIMARY KEY CLUSTERED 
(
	[MailID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Message]') and type in (N'U'))
	create table [dbo].[yaf_Message](
		MessageID		    int IDENTITY (1,1) NOT NULL,
		TopicID			    int NOT NULL,
		ReplyTo			    int NULL,
		Position		    int NOT NULL,
		Indent			    int NOT NULL,
		UserID			    int NOT NULL,
		UserName		    nvarchar (255) NULL,
		UserDisplayName		nvarchar (255) NULL,
		Posted			    datetime NOT NULL,
		[Message]		    ntext NOT NULL,
		IP				    varchar (39) NOT NULL,
		Edited			    datetime NULL,
		Flags			    int NOT NULL,
		EditReason          nvarchar (100) NULL,
		IsModeratorChanged  bit NOT NULL constraint [DF_yaf_Message_IsModeratorChanged] default (0),
	    DeleteReason        nvarchar (100)  NULL,
		ExternalMessageId	nvarchar(255) NULL,
		ReferenceMessageId	nvarchar(255) NULL,
		IsDeleted		    AS (CONVERT([bit],sign([Flags]&(8)),0)),
		IsApproved		    AS (CONVERT([bit],sign([Flags]&(16)),(0))),
		BlogPostID          nvarchar(50) NULL,
	    EditedBy            int NULL,
 constraint [PK_yaf_Message] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_MessageHistory]') and type in (N'U'))
	create table [dbo].[yaf_MessageHistory](
		MessageID		    int NOT NULL,
		[Message]		    ntext NOT NULL,
		IP				    varchar (39) NOT NULL,
		Edited			    datetime NOT NULL,
		EditedBy		    int NULL,	
		EditReason          nvarchar (100) NULL,
		IsModeratorChanged  bit NOT NULL constraint [DF_yaf_MessageHistory_IsModeratorChanged] default (0),
		Flags               int NOT NULL constraint [DF_yaf_MessageHistory_Flags] default (23),
 constraint [PK_yaf_MessageHistory] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC,
	[Edited] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
	)
GO

exec('[dbo].[yaf_drop_defaultconstraint_oncolumn] yaf_MessageHistory, MessageHistoryID')
GO

IF NOT EXISTS (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_MessageReported]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_MessageReported](
		[MessageID] [int] NOT NULL,
		[Message] [ntext] NULL,
		[Resolved] [bit] NULL,
		[ResolvedBy] [int] NULL,
		[ResolvedDate] [datetime] NULL,
 constraint [PK_yaf_MessageReported] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

IF NOT EXISTS (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_MessageReportedAudit]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_MessageReportedAudit](
		[LogID] [int] IDENTITY(1,1) NOT NULL,
		[UserID] [int] NULL,
		[MessageID] [int] NOT NULL,
		[Reported] [datetime] NULL,
	    [ReportedNumber] [int] NOT NULL default (1),
	    [ReportText] [nvarchar](4000) NULL
		)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_PMessage]') and type in (N'U'))
	create table [dbo].[yaf_PMessage](
		PMessageID		int IDENTITY (1,1) NOT NULL,
		FromUserID      int NOT NULL,
		ReplyTo			int NULL,
		Created			datetime NOT NULL,
		[Subject]		nvarchar (100) NOT NULL,
		Body			ntext NOT NULL,
		Flags			int NOT NULL constraint [DF_yaf_Message_Flags] default (23),
 constraint [PK_yaf_PMessage] PRIMARY KEY CLUSTERED 
(
	[PMessageID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_PollGroupCluster]') and type in (N'U'))
	create table [dbo].[yaf_PollGroupCluster](		
		PollGroupID int IDENTITY (1,1) NOT NULL,
		UserID	    int not NULL,
		[Flags]     int NOT NULL constraint [DF_yaf_PollGroupCluster_Flags] default (0),
		[IsBound]   AS (CONVERT([bit],sign([Flags]&(2)),(0)))
 constraint [PK_yaf_PollGroupCluster] PRIMARY KEY CLUSTERED 
(
	[PollGroupID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)	
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Poll]') and type in (N'U'))
	create table [dbo].[yaf_Poll](
		PollID			       int IDENTITY (1,1) NOT NULL,
		Question		       nvarchar (50) NOT NULL,
		Closes                 datetime NULL,		
		PollGroupID            int NULL,
		UserID                 int not NULL constraint [DF_yaf_Poll_UserID] default (1),	
		[ObjectPath]           nvarchar(255) NULL,
		[MimeType]             varchar(50) NULL,
		[Flags]                int NOT NULL constraint [DF_yaf_Poll_Flags] default (0),		
		[IsClosedBound] 	   AS (CONVERT([bit],sign([Flags]&(4)),(0))),
		[AllowMultipleChoices] AS (CONVERT([bit],sign([Flags]&(8)),(0))),
		[ShowVoters]           AS (CONVERT([bit],sign([Flags]&(16)),(0))),
		[AllowSkipVote]        AS (CONVERT([bit],sign([Flags]&(32)),(0))),
 constraint [PK_yaf_Poll] PRIMARY KEY CLUSTERED 
(
	[PollID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Smiley]') and type in (N'U'))
	create table [dbo].[yaf_Smiley](
		SmileyID		int IDENTITY (1,1) NOT NULL,
		BoardID			int NOT NULL,
		Code			nvarchar (10) NOT NULL,
		Icon			nvarchar (50) NOT NULL,
		Emoticon		nvarchar (50) NULL,
		SortOrder		tinyint	NOT NULL default 0,
 constraint [PK_yaf_Smiley] PRIMARY KEY CLUSTERED 
(
	[SmileyID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_Smiley] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Code] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Topic]') and type in (N'U'))
	create table [dbo].[yaf_Topic](
		TopicID			    int IDENTITY (1,1) NOT NULL,
		ForumID			    int NOT NULL,
		UserID			    int NOT NULL,
		UserName		    nvarchar (255) NULL,
		UserDisplayName		nvarchar (255) NULL,	
		Posted			    datetime NOT NULL,
		Topic			    nvarchar (100) NOT NULL,
		[Description]		nvarchar (255) NULL,
		[Status]	     	nvarchar (255) NULL,
		[Styles]	     	nvarchar (255) NULL,
		[LinkDate]          datetime NULL,
		[Views]			    int NOT NULL,
		[Priority]		    smallint NOT NULL,
		PollID			    int NULL,
		TopicMovedID	    int NULL,
		LastPosted		    datetime NULL,
		LastMessageID	    int NULL,
		LastUserID		    int NULL,
		LastUserName	    nvarchar (255) NULL,
		LastUserDisplayName	nvarchar (255) NULL,	
		NumPosts		    int NOT NULL,
		Flags			    int not null constraint [DF_yaf_Topic_Flags] default (0),
		IsDeleted		    AS (CONVERT([bit],sign([Flags]&(8)),0)),
		[IsQuestion]        AS (CONVERT([bit],sign([Flags]&(1024)),(0))),
		[AnswerMessageId]   [int] NULL,
		[LastMessageFlags]	[int] NULL,
		[TopicImage]        nvarchar(255) NULL,
 constraint [PK_yaf_Topic] PRIMARY KEY CLUSTERED 
(
	[TopicID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_User]') and type in (N'U'))
	create table [dbo].[yaf_User](
		UserID			int IDENTITY (1,1) NOT NULL,
		BoardID			int NOT NULL,
		ProviderUserKey	nvarchar(64),
		[Name]			nvarchar (255) NOT NULL,
		[DisplayName]	nvarchar (255) NOT NULL,
		[Password]		nvarchar (32) NOT NULL,
		[Email]			nvarchar (255) NULL,
		Joined			datetime NOT NULL,
		LastVisit		datetime NOT NULL,
		IP				nvarchar (39) NULL,
		NumPosts		int NOT NULL,
		TimeZone		int NOT NULL,
		Avatar			nvarchar (255) NULL,
		[Signature]		ntext NULL,
		AvatarImage		image NULL,
		AvatarImageType	nvarchar (50) NULL,
		RankID			[int] NOT NULL,
		Suspended		[datetime] NULL,
		SuspendedReason ntext NULL,
		SuspendedBy     int not null default (0),
		LanguageFile	nvarchar(50) NULL,
		ThemeFile		nvarchar(50) NULL,
		TextEditor		nvarchar(50) NULL,
		OverridedefaultThemes	bit NOT NULL constraint [DF_yaf_User_OverridedefaultThemes] default (1),
		[PMNotification] [bit] NOT NULL constraint [DF_yaf_User_PMNotification] default (1),
		[AutoWatchTopics] [bit] NOT NULL constraint [DF_yaf_User_AutoWatchTopics] default (0),
		[DailyDigest] [bit] NOT NULL constraint [DF_yaf_User_DailyDigest] default (0),
		[NotificationType] [int] default (10),
		[Flags] [int]	NOT NULL  constraint [DF_yaf_User_Flags]  default (0),
		[Points] [int]	NOT NULL constraint [DF_yaf_User_Points] default (1),		
		[IsApproved]	AS (CONVERT([bit],sign([Flags]&(2)),(0))),
		[IsGuest]	AS (CONVERT([bit],sign([Flags]&(4)),(0))),
		[IsCaptchaExcluded]	AS (CONVERT([bit],sign([Flags]&(8)),(0))),
		[IsActiveExcluded] AS (CONVERT([bit],sign([Flags]&(16)),(0))),
		[IsDST]	AS (CONVERT([bit],sign([Flags]&(32)),(0))),
		[IsDirty]	AS (CONVERT([bit],sign([Flags]&(64)),(0))),
		[Culture] varchar (10) default (10),
		[IsFacebookUser][bit] NOT NULL constraint [DF_yaf_User_IsFacebookUser] default (0),
		[IsTwitterUser][bit] NOT NULL constraint [DF_yaf_User_IsTwitterUser] default (0),
		[UserStyle] [varchar](510) NULL,
	    [StyleFlags] [int] NOT NULL constraint [DF_yaf_User_StyleFlags] default (0),
	    [IsUserStyle]  AS (CONVERT([bit],sign([StyleFlags]&(1)),(0))),
	    [IsGroupStyle]  AS (CONVERT([bit],sign([StyleFlags]&(2)),(0))),
	    [IsRankStyle]  AS (CONVERT([bit],sign([StyleFlags]&(4)),(0))),
		[IsGoogleUser][bit] NOT NULL constraint [DF_yaf_User_IsGoogleUser] default (0),
 constraint [PK_yaf_User] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_User] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
GO

IF not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_UserProfile]') and type in (N'U'))
	CREATE TABLE [dbo].[yaf_UserProfile]
	(
		[UserID] [int] NOT NULL,
		[LastUpdatedDate] [datetime] NOT NULL,
		-- added columns
		[LastActivity] [datetime],
		[ApplicationName] [nvarchar](255) NOT NULL,	
		[IsAnonymous] [bit] NOT NULL,
		[UserName] [nvarchar](255) NOT NULL,
 constraint [PK_yaf_UserProfile] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ApplicationName] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_UserProfile] UNIQUE NONCLUSTERED 
(
	[UserID] ASC,
	[ApplicationName] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_WatchForum]') and type in (N'U'))
	create table [dbo].[yaf_WatchForum](
		WatchForumID	int IDENTITY (1,1) NOT NULL,
		ForumID			int NOT NULL,
		UserID			int NOT NULL,
		Created			datetime NOT NULL,
		LastMail		datetime null,
 constraint [PK_yaf_WatchForum] PRIMARY KEY CLUSTERED 
(
	[WatchForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_WatchForum] UNIQUE NONCLUSTERED 
(
	[ForumID] ASC,
	[UserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_WatchTopic]') and type in (N'U'))
	create table [dbo].[yaf_WatchTopic](
		WatchTopicID	int IDENTITY (1,1) NOT NULL,
		TopicID			int NOT NULL,
		UserID			int NOT NULL,
		Created			datetime NOT NULL,
		LastMail		datetime null,
 constraint [PK_yaf_WatchTopic] PRIMARY KEY CLUSTERED 
(
	[WatchTopicID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_WatchTopic] UNIQUE NONCLUSTERED 
(
	[TopicID] ASC,
	[UserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Attachment]') and type in (N'U'))
	create table [dbo].[yaf_Attachment](
		AttachmentID	int IDENTITY (1,1) not null,
		MessageID		int not null default (0),
		UserID          int not null default (0),		
		[FileName]		nvarchar(255) not null,
		Bytes			int not null,
		ContentType		nvarchar(max) null,
		Downloads		int not null,
		FileData		image null,
 constraint [PK_yaf_Attachment] PRIMARY KEY CLUSTERED 
(
	[AttachmentID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_UserGroup]') and type in (N'U'))
	create table [dbo].[yaf_UserGroup](
		UserID			int NOT NULL,
		GroupID			int NOT NULL,
 constraint [PK_yaf_UserGroup] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[GroupID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Rank]') and type in (N'U'))
	create table [dbo].[yaf_Rank](
		RankID			 int IDENTITY (1,1) NOT NULL,
		BoardID			 int NOT NULL,
		Name			 nvarchar (50) NOT NULL,
		MinPosts		 int NULL,
		RankImage		 nvarchar (50) NULL,
		Flags			 int not null constraint [DF_yaf_Rank_Flags] default (0),
	    [PMLimit]        [int] NULL,
	    [Style]          [nvarchar](255) NULL,
	    [SortOrder]      [smallint] NOT NULL constraint [DF_yaf_Rank_SortOrder] default (0),
	    [Description]    [nvarchar](128) NULL,
	    [UsrSigChars]    [int] NOT NULL constraint [DF_yaf_Rank_UsrSigChars] default (0),
	    [UsrSigBBCodes]  [nvarchar](255) NULL,
	    [UsrSigHTMLTags] [nvarchar](255) NULL,
	    [UsrAlbums]      [int] NOT NULL constraint [DF_yaf_Rank_UsrAlbums] default (0),
	    [UsrAlbumImages] [int] NOT NULL constraint [DF_yaf_Rank_UsrAlbumImages]  default (0),
 constraint [PK_yaf_Rank] PRIMARY KEY CLUSTERED 
(
	[RankID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF),
 constraint [IX_yaf_Rank] UNIQUE NONCLUSTERED 
(
	[BoardID] ASC,
	[Name] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_AccessMask]') and type in (N'U'))
	create table [dbo].[yaf_AccessMask](
		AccessMaskID	int IDENTITY (1,1) NOT NULL,
		BoardID			int NOT NULL,
		Name			nvarchar(50) NOT NULL,
		Flags			int not null constraint [DF_yaf_AccessMask_Flags] default (0),
	    [SortOrder]     [smallint] NOT NULL default (0),
 constraint [PK_yaf_AccessMask] PRIMARY KEY CLUSTERED 
(
	[AccessMaskID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_UserForum]') and type in (N'U'))
	create table [dbo].[yaf_UserForum](
		UserID			int NOT NULL,
		ForumID			int NOT NULL,
		AccessMaskID	int NOT NULL,
		Invited			datetime NOT NULL,
		Accepted		bit NOT NULL,
 constraint [PK_yaf_UserForum] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Board]') and type in (N'U'))
begin
	create table [dbo].[yaf_Board](
		BoardID			int IDENTITY (1,1) NOT NULL,
		Name			nvarchar(50) NOT NULL,
		AllowThreaded	bit NOT NULL,
		MembershipAppName nvarchar(255) NULL,
		RolesAppName nvarchar(255) NULL,
 constraint [PK_yaf_Board] PRIMARY KEY CLUSTERED 
(
	[BoardID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_NntpServer]') and type in (N'U'))
	create table [dbo].[yaf_NntpServer](
		NntpServerID	int IDENTITY (1,1) not null,
		BoardID			int NOT NULL,
		Name			nvarchar(50) not null,
		[Address]		nvarchar(100) not null,
		Port			int null,
		UserName		nvarchar(255) null,
		UserPass		nvarchar(50) null,
 constraint [PK_yaf_NntpServer] PRIMARY KEY CLUSTERED 
(
	[NntpServerID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
		
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_NntpForum]') and type in (N'U'))
	create table [dbo].[yaf_NntpForum](
		NntpForumID		int IDENTITY (1,1) not null,
		NntpServerID	int not null,
		GroupName		nvarchar(100) not null,
		ForumID			int not null,
		LastMessageNo	int not null,
		LastUpdate		datetime not null,
		Active			bit not null,
		DateCutOff		datetime null,
 constraint [PK_yaf_NntpForum] PRIMARY KEY CLUSTERED 
(
	[NntpForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_NntpTopic]') and type in (N'U'))
	create table [dbo].[yaf_NntpTopic](
		NntpTopicID		int IDENTITY (1,1) not null,
		NntpForumID		int not null,
		Thread			nvarchar(64) not null,
		TopicID			int not null,
 constraint [PK_yaf_NntpTopic] PRIMARY KEY CLUSTERED 
(
	[NntpTopicID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_UserPMessage]') and type in (N'U'))
begin
	create table [dbo].[yaf_UserPMessage](
		UserPMessageID	int IDENTITY (1,1) not null,
		UserID			int not null,
		PMessageID		int not null,
		[Flags]			int NOT NULL constraint [DF_yaf_UserPMessage_Flags]  default (0),
		[IsRead]		AS (CONVERT([bit],sign([Flags]&(1)),(0))),
		[IsInOutbox]	AS (CONVERT([bit],sign([Flags]&(2)),(0))),
		[IsArchived]	AS (CONVERT([bit],sign([Flags]&(4)),(0))),
		[IsDeleted]		AS (CONVERT([bit],sign([Flags]&(8)),(0))),
		[IsReply]		[bit] NOT NULL  default (0)		,
 constraint [PK_yaf_UserPMessage] PRIMARY KEY CLUSTERED 
(
	[UserPMessageID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Replace_Words]') and type in (N'U'))
begin
	create table [dbo].[yaf_Replace_Words](
		ID				int IDENTITY (1,1) NOT NULL,
		BoardId			int NOT NULL constraint [DF_yaf_Replace_Words_BoardID] default (1),
		BadWord			nvarchar (255) NULL,
		GoodWord		nvarchar (255) NULL,
 constraint [PK_yaf_Replace_Words] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Spam_Words]') and type in (N'U'))
begin
	create table [dbo].[yaf_Spam_Words](
		ID				int IDENTITY (1,1) NOT NULL,
		BoardId			int NOT NULL,
		SpamWord			nvarchar (255) NULL,
		constraint [PK_yaf_Spam_Words] primary key(ID)
	)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Registry]') and type in (N'U'))
begin
	create table [dbo].[yaf_Registry](
		RegistryID		int IDENTITY(1,1) NOT NULL,
		Name			nvarchar(50) NOT NULL,
		Value			ntext,
		BoardID			int,
		constraint [PK_yaf_Registry] PRIMARY KEY (RegistryID)
	)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_EventLog]') and type in (N'U'))
begin
	create table [dbo].[yaf_EventLog](
		EventLogID	int identity(1,1) not null,
		EventTime	datetime not null constraint [DF_yaf_EventLog_EventTime] default GETUTCDATE() ,
		UserID		int, -- deprecated
		UserName	nvarchar(100) null,
		[Source]	nvarchar(50) not null,
		Description	ntext not null,
		[Type] [int] NOT NULL constraint [DF_yaf_EventLog_Type] default (0),
		constraint [PK_yaf_EventLog] primary key(EventLogID)
	)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Extension]') and type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[yaf_Extension](
		ExtensionID int IDENTITY(1,1) NOT NULL,
		BoardId int NOT NULL,
		Extension nvarchar(10) NOT NULL,
		constraint [PK_yaf_Extension] PRIMARY KEY(ExtensionID)
	)
END
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_BBCode]') and type in (N'U'))
begin
	create table [dbo].[yaf_BBCode](
		[BBCodeID] [int] IDENTITY(1,1) NOT NULL,
		[BoardID] [int] NOT NULL,
		[Name] [nvarchar](255) NOT NULL,
		[Description] [nvarchar](4000) NULL,
		[OnClickJS] [nvarchar](1000) NULL,
		[DisplayJS] [ntext] NULL,
		[EditJS] [ntext] NULL,
		[DisplayCSS] [ntext] NULL,
		[SearchRegex] [ntext] NULL,
		[ReplaceRegex] [ntext] NULL,
		[Variables] [nvarchar](1000) NULL,
		[UseModule] [bit] NULL,
		[ModuleClass] [nvarchar](255) NULL,		
		[ExecOrder] [int] NOT NULL,
		constraint [PK_yaf_BBCode] PRIMARY KEY (BBCodeID)
	)
end
GO


if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Medal]') and type in (N'U'))
begin
	create table [dbo].[yaf_Medal](
		[BoardID] [int] NOT NULL,
		[MedalID] [int] IDENTITY(1,1) NOT NULL,
		[Name] [nvarchar](100) NOT NULL,
		[Description] [ntext] NOT NULL,
		[Message] [nvarchar](100) NOT NULL,
		[Category] [nvarchar](50) NULL,
		[MedalURL] [nvarchar](250) NOT NULL,
		[RibbonURL] [nvarchar](250) NULL,
		[SmallMedalURL] [nvarchar](250) NOT NULL,
		[SmallRibbonURL] [nvarchar](250) NULL,
		[SmallMedalWidth] [smallint] NOT NULL,
		[SmallMedalHeight] [smallint] NOT NULL,
		[SmallRibbonWidth] [smallint] NULL,
		[SmallRibbonHeight] [smallint] NULL,
		[SortOrder] [tinyint] NOT NULL constraint [DF_yaf_Medal_defaultOrder]  default ((255)),
		[Flags] [int] NOT NULL constraint [DF_yaf_Medal_Flags]  default ((0)),
		constraint [PK_yaf_Medal] PRIMARY KEY CLUSTERED ([MedalID] ASC)
		)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_GroupMedal]') and type in (N'U'))
begin
	create table [dbo].[yaf_GroupMedal](
		[GroupID] [int] NOT NULL,
		[MedalID] [int] NOT NULL,
		[Message] [nvarchar](100) NULL,
		[Hide] [bit] NOT NULL constraint [DF_yaf_GroupMedal_Hide]  default ((0)),
		[OnlyRibbon] [bit] NOT NULL constraint [DF_yaf_GroupMedal_OnlyRibbon]  default ((0)),
		[SortOrder] [tinyint] NOT NULL constraint [DF_yaf_GroupMedal_SortOrder]  default ((255)),
 constraint [PK_yaf_GroupMedal] PRIMARY KEY CLUSTERED 
(
	[MedalID] ASC,
	[GroupID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
		)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_UserMedal]') and type in (N'U'))
begin
	create table [dbo].[yaf_UserMedal](
		[UserID] [int] NOT NULL,
		[MedalID] [int] NOT NULL,
		[Message] [nvarchar](100) NULL,
		[Hide] [bit] NOT NULL constraint [DF_yaf_UserMedal_Hide]  default ((0)),
		[OnlyRibbon] [bit] NOT NULL constraint [DF_yaf_UserMedal_OnlyRibbon]  default ((0)),
		[SortOrder] [tinyint] NOT NULL constraint [DF_yaf_UserMedal_SortOrder]  default ((255)),
		[DateAwarded] [datetime] NOT NULL,
 constraint [PK_yaf_UserMedal] PRIMARY KEY CLUSTERED 
(
	[MedalID] ASC,
	[UserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_IgnoreUser]') and type in (N'U'))
begin
	CREATE TABLE [dbo].[yaf_IgnoreUser]
	(
		[UserID] int NOT NULL,
		[IgnoredUserID] int NOT NULL,
 constraint [PK_yaf_IgnoreUser] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[IgnoredUserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
end
GO

-- Create Topic Read Tracking Table

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_TopicReadTracking]') and type in (N'U'))
	create table [dbo].[yaf_TopicReadTracking](
		UserID			int NOT NULL,
		TopicID			int NOT NULL,
		LastAccessDate	datetime NOT NULL
 constraint [PK_yaf_TopicReadTracking] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[TopicID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

-- Create Forum Read Tracking Table

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_ForumReadTracking]') and type in (N'U'))
	create table [dbo].[yaf_ForumReadTracking](
		UserID			int NOT NULL,
		ForumID			int NOT NULL,
		LastAccessDate	datetime NOT NULL,
 constraint [PK_yaf_ForumReadTracking] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_ShoutboxMessage]') and type in (N'U'))
begin
	CREATE TABLE [dbo].[yaf_ShoutboxMessage](
		[ShoutBoxMessageID] [int] IDENTITY(1,1) NOT NULL,		
		[BoardId] [int] NOT NULL constraint [DF_yaf_ShoutboxMessage_BoardID] default (1),
		[UserID] [int] NULL,
		[UserName] [nvarchar](255) NOT NULL,
		[UserDisplayName] [nvarchar](255) NOT NULL,
		[Message] [ntext] NULL,
		[Date] [datetime] NOT NULL,
		[IP] [varchar](50) NOT NULL,
 constraint [PK_yaf_ShoutboxMessage] PRIMARY KEY CLUSTERED 
(
	[ShoutBoxMessageID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
end
GO	

exec('[dbo].[yaf_drop_defaultconstraint_oncolumn] yaf_Board, BoardUID')
GO

if exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Board]') and name='BoardUID')
begin
alter table [dbo].[yaf_Board] drop column  BoardUID
end
GO

-- Mail Table
if not exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Mail]') and name='FromUserName')
begin
	alter table [dbo].[yaf_Mail] add [FromUserName] [nvarchar](255) NULL
	alter table [dbo].[yaf_Mail] add [ToUserName] [nvarchar](255) NULL
	alter table [dbo].[yaf_Mail] add [BodyHtml] [ntext] NULL		
	alter table [dbo].[yaf_Mail] add [SendTries] [int] NOT NULL constraint [DF_yaf_Mail_SendTries]  default ((0))		
	alter table [dbo].[yaf_Mail] add [SendAttempt] [datetime] NULL
	alter table [dbo].[yaf_Mail] add [ProcessID] [int] NULL	
end
GO

if exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Mail]') and name='FromUserName' and precision < 255)
begin
alter table [dbo].[yaf_Mail] alter column [FromUserName] [nvarchar](255) NULL
end
GO

if exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Mail]') and name='FromUser' and precision < 255)
begin
alter table [dbo].[yaf_Mail] alter column [FromUser] [nvarchar](255) NULL
end
GO

if exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Mail]') and name='ToUserName' and precision < 255)
begin
alter table [dbo].[yaf_Mail] alter column [ToUserName] [nvarchar](255) NULL
end
GO

if exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Mail]') and name='ToUser' and precision < 255)
begin
alter table [dbo].[yaf_Mail] alter column [ToUser] [nvarchar](255) NULL
end
GO

-- Active Table
if exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Active]') and name='Location' and precision < 255)
 	alter table [dbo].[yaf_Active] alter column [Location] nvarchar(255) NOT NULL
GO

if not exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Active]') and name='ForumPage')
begin
	alter table [dbo].[yaf_Active] add [ForumPage] nvarchar(255)
end
GO

if exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Active]') and name='ForumPage' and precision < 1024)
 	alter table [dbo].[yaf_Active] alter column [ForumPage] nvarchar(1024) 
GO

if exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Active]') and name='IP' and precision < 39)
 	alter table [dbo].[yaf_Active] alter column [IP] varchar(39) not null 
GO

if not exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Active]') and name='Flags')
 	alter table [dbo].[yaf_Active] add [Flags] int NULL 
GO

if exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Active]') and type in (N'U'))    
    grant delete on [dbo].[yaf_Active] to public
	exec('delete from [dbo].[yaf_Active]')
	revoke delete on [dbo].[yaf_Active] from public
GO

-- Board Table
if not exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Board]') and name='MembershipAppName')
begin
	alter table [dbo].[yaf_Board] add MembershipAppName nvarchar(255)
end
GO

if not exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Board]') and name='RolesAppName')
begin
	alter table [dbo].[yaf_Board] add RolesAppName nvarchar(255)
end
GO

if not exists (select top 1 1 from sys.columns where object_id = object_id('[dbo].[yaf_Board]') and name='MembershipAppName')
begin
	alter table [dbo].[yaf_Board] add MembershipAppName nvarchar(255)
end
GO

-- UserPMessage Table
if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_UserPMessage]') and name='Flags')
begin
	-- add new "Flags" field to UserPMessage
	alter table [dbo].[yaf_UserPMessage] add Flags int not null  constraint [DF_yaf_UserPMessage_Flags] default (0)
end
GO

if exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_UserPMessage]') and name='IsRead')
BEGIN
	if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_UserPMessage]') and name='IsArchived')
	BEGIN	
		-- Copy "IsRead" value over
		grant update on [dbo].[yaf_UserPMessage] to public
		exec('update [dbo].[yaf_UserPMessage] set Flags = IsRead')
		revoke update on [dbo].[yaf_UserPMessage] from public
		
		-- drop the old column
		alter table [dbo].[yaf_UserPMessage] drop column IsRead
		
		-- Verify flags isn't NULL
		grant update on [dbo].[yaf_UserPMessage] to public
		exec('update [dbo].[yaf_UserPMessage] set Flags = 1 WHERE Flags IS NULL')
		revoke update on [dbo].[yaf_UserPMessage] from public
		
		-- add new calculated columns	
		alter table [dbo].[yaf_UserPMessage] ADD [IsRead] AS (CONVERT([bit],sign([Flags]&(1)),(0)))
		alter table [dbo].[yaf_UserPMessage] ADD [IsInOutbox] AS (CONVERT([bit],sign([Flags]&(2)),(0)))
		alter table [dbo].[yaf_UserPMessage] ADD [IsArchived] AS (CONVERT([bit],sign([Flags]&(4)),(0)))
	END
END
GO

IF NOT exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_UserPMessage]') AND NAME='IsDeleted')
BEGIN
	alter table [dbo].[yaf_UserPMessage] ADD [IsDeleted] AS (CONVERT([bit],sign([Flags]&(8)),(0)))
END
GO

-- User Table
if exists(select top 1 1 from [dbo].[yaf_Group] where ([Flags] & 2)=2)
begin
  update [dbo].[yaf_User] set [Flags] = [Flags] | 4 where UserID in (select distinct UserID from [dbo].[yaf_UserGroup] a join [dbo].[yaf_Group] b on b.GroupID=a.GroupID and (b.[Flags] & 2)=2)
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_User]') and name='IsApproved')
begin
	alter table [dbo].[yaf_User] ADD [IsApproved] AS (CONVERT([bit],sign([Flags]&(2)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_User]') and name='NotificationType')
begin
	alter table [dbo].[yaf_User] ADD NotificationType int default(10)
end
GO

if exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_User]') and name='NotificationType')
begin
	update  [dbo].[yaf_User] SET [NotificationType]=10 WHERE [NotificationType] IS NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_User]') and name='IsActiveExcluded')
begin
	alter table [dbo].[yaf_User] ADD [IsActiveExcluded] AS (CONVERT([bit],sign([Flags]&(16)),(0)))
end
GO

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_User]') and name=N'Signature' and system_type_id<>99)
	alter table [dbo].[yaf_User] alter column Signature ntext null
go

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Flags')
begin
	alter table [dbo].[yaf_User] add [Flags] int not null constraint DF_yaf_User_Flags default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='IsQuestion')
begin
	alter table [dbo].[yaf_Topic] add IsQuestion AS (CONVERT([bit],sign([Flags]&(1024)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='TextEditor')
begin
	alter table [dbo].[yaf_User] add TextEditor nvarchar(50) NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='AnswerMessageId')
begin
	alter table [dbo].[yaf_Topic] add AnswerMessageId INT NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='TopicImage')
begin
	alter table [dbo].[yaf_Topic] add TopicImage nvarchar(255) NULL
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsHostAdmin')
begin
	grant update on [dbo].[yaf_User] to public
	exec('update [dbo].[yaf_User] set Flags = Flags | 1 where IsHostAdmin<>0')
	revoke update on [dbo].[yaf_User] from public
	alter table [dbo].[yaf_User] drop column IsHostAdmin
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_PollVoteRefuse]') and name='BoardID')
begin
alter table [dbo].[yaf_PollVoteRefuse] drop column [BoardID] 
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Approved')
begin
	grant update on [dbo].[yaf_User] to public
	exec('update [dbo].[yaf_User] set Flags = Flags | 2 where Approved<>0')
	revoke update on [dbo].[yaf_User] from public
	alter table [dbo].[yaf_User] drop column Approved
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='ProviderUserKey')
begin
	alter table [dbo].[yaf_User] add ProviderUserKey nvarchar(64)
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_User]') and name='DisplayName')
begin
	alter table [dbo].[yaf_User] ADD [DisplayName] nvarchar(255) 
	grant update on [dbo].[yaf_User] to public
	exec('update [dbo].[yaf_User] SET DisplayName = [Name]')
	revoke update on [dbo].[yaf_User] from public	
	ALTER TABLE [dbo].[yaf_User] ALTER COLUMN [DisplayName] nvarchar(255) NOT NULL
end
GO

-- convert uniqueidentifier to nvarchar(64)
if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='ProviderUserKey' and system_type_id='36')
begin
	-- drop the provider user key index if it exists...
	if exists(select 1 from sys.indexes where name=N'IX_yaf_User_ProviderUserKey' and object_id=object_id(N'[dbo].[yaf_User]'))
	begin
		DROP INDEX [IX_yaf_User_ProviderUserKey] ON [dbo].[yaf_User]
	end
	-- alter the column
	ALTER TABLE [dbo].[yaf_User] ALTER COLUMN ProviderUserKey nvarchar(64)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='PMNotification')
begin
	alter table [dbo].[yaf_User] add [PMNotification] [bit] NOT NULL constraint [DF_yaf_User_PMNotification] default (1)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='DailyDigest')
begin
	alter table [dbo].[yaf_User] add [DailyDigest] [bit] NOT NULL constraint [DF_yaf_User_DailyDigest] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='AutoWatchTopics')
begin
	alter table [dbo].[yaf_User] add [AutoWatchTopics] [bit] NOT NULL constraint [DF_yaf_User_AutoWatchTopics] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='OverridedefaultThemes')
begin
alter table [dbo].[yaf_User] add  [OverridedefaultThemes]	bit NOT NULL constraint [DF_yaf_User_OverridedefaultThemes] default (1)
end
GO

if exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_User]') and name='OverridedefaultThemes')
begin
	update  [dbo].[yaf_User] SET [OverridedefaultThemes]=1 WHERE [OverridedefaultThemes] = 0
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Points')
begin
	alter table [dbo].[yaf_User] add [Points] [int] NOT NULL constraint [DF_yaf_User_Points] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='AvatarImageType')
begin
	alter table [dbo].[yaf_User] add [AvatarImageType] nvarchar(50) NULL
end
GO

-- make sure the gender column is nullable
if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Gender')
begin
	alter table [dbo].[yaf_User] alter column Gender tinyint NULL
end
GO

-- Add 8-letter Language Code column
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Culture')
begin
	alter table [dbo].[yaf_User] add Culture varchar(10) NULL
end
GO

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_User]') and name=N'IP' and precision < 39)
	alter table [dbo].[yaf_User] alter column [IP] varchar(39) null
go

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Name' and precision < 255)
begin
	alter table [dbo].[yaf_User] alter column [Name] nvarchar(255) not null
end
GO

-- Only remove User table columns if version is 30+
IF EXISTS (SELECT ver FROM (SELECT CAST(CAST(Value as nvarchar(255)) as int) as ver FROM [dbo].[yaf_Registry] WHERE Name = 'version') reg WHERE ver > 30)
BEGIN
	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Gender')
	begin
		alter table [dbo].[yaf_User] drop column Gender
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Location')
	begin
		alter table [dbo].[yaf_User] drop column Location
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='HomePage')
	begin
		alter table [dbo].[yaf_User] drop column HomePage
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='MSN')
	begin
		alter table [dbo].[yaf_User] drop column MSN
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='YIM')
	begin
		alter table [dbo].[yaf_User] drop column YIM
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='AIM')
	begin
		alter table [dbo].[yaf_User] drop column AIM
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='ICQ')
	begin
		alter table [dbo].[yaf_User] drop column ICQ
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='RealName')
	begin
		alter table [dbo].[yaf_User] drop column RealName
	end

	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Occupation')
	begin
		alter table [dbo].[yaf_User] drop column Occupation
	end
	
	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Interests')
	begin
		alter table [dbo].[yaf_User] drop column Interests
	end
	
	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Weblog')
	begin
		alter table [dbo].[yaf_User] drop column Weblog
	end
	
	if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='WeblogUrl')
	begin
		alter table [dbo].[yaf_User] drop column WeblogUrl
		alter table [dbo].[yaf_User] drop column WeblogUsername
		alter table [dbo].[yaf_User] drop column WeblogID
	end
END
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsGuest')
begin
	alter table [dbo].[yaf_User] add [IsGuest] AS (CONVERT([bit],sign([Flags]&(4)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsCaptchaExcluded')
begin
	alter table [dbo].[yaf_User] add [IsCaptchaExcluded] AS (CONVERT([bit],sign([Flags]&(8)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsDST')
begin
	alter table [dbo].[yaf_User] add [IsDST] AS (CONVERT([bit],sign([Flags]&(32)),(0)))
end
GO
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsDirty')
begin
	alter table [dbo].[yaf_User] add [IsDirty] AS (CONVERT([bit],sign([Flags]&(64)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsFacebookUser')
begin
	alter table [dbo].[yaf_User] add [IsFacebookUser][bit] NOT NULL constraint [DF_yaf_IsFacebookUser] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsTwitterUser')
begin
	alter table [dbo].[yaf_User] add [IsTwitterUser][bit] NOT NULL constraint [DF_yaf_IsTwitterUser] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsGoogleUser')
begin
	alter table [dbo].[yaf_User] add [IsGoogleUser][bit] NOT NULL constraint [DF_yaf_IsGoogleUser] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='UserStyle')
begin
	alter table [dbo].[yaf_User] add [UserStyle] varchar(510) 		
end
GO	

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='StyleFlags')
begin
	alter table [dbo].[yaf_User] add [StyleFlags] [int] NOT NULL constraint [DF_yaf_User_StyleFlags] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsUserStyle')
begin
	alter table [dbo].[yaf_User] add [IsUserStyle] AS (CONVERT([bit],sign([StyleFlags]&(1)),(0)))
end
GO	

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsGroupStyle')
begin
	alter table [dbo].[yaf_User] add [IsGroupStyle] AS (CONVERT([bit],sign([StyleFlags]&(2)),(0)))
end
GO	

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='IsRankStyle')
begin
	alter table [dbo].[yaf_User] add [IsRankStyle] AS (CONVERT([bit],sign([StyleFlags]&(4)),(0)))
end
GO	

-- Forum Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='RemoteURL')
	alter table [dbo].[yaf_Forum] add RemoteURL nvarchar(100) null
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='ModeratedPostCount')
	alter table [dbo].[yaf_Forum] add ModeratedPostCount int null
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='IsModeratedNewTopicOnly')
	alter table [dbo].[yaf_Forum] add IsModeratedNewTopicOnly	bit not null constraint [DF_yaf_Forum_IsModeratedNewTopicOnly] default (0)
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='Flags')
	alter table [dbo].[yaf_Forum] add Flags int not null constraint DF_yaf_Forum_Flags default (0)
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='ThemeURL')
	alter table [dbo].[yaf_Forum] add ThemeURL nvarchar(50) NULL
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='Locked')
begin
	exec('update [dbo].[yaf_Forum] set Flags = Flags | 1 where Locked<>0')
	alter table [dbo].[yaf_Forum] drop column Locked
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='Hidden')
begin
	exec('update [dbo].[yaf_Forum] set Flags = Flags | 2 where Hidden<>0')
	alter table [dbo].[yaf_Forum] drop column Hidden
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='IsTest')
begin
	exec('update [dbo].[yaf_Forum] set Flags = Flags | 4 where IsTest<>0')
	alter table [dbo].[yaf_Forum] drop column IsTest
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='Moderated')
begin
	exec('update [dbo].[yaf_Forum] set Flags = Flags | 8 where Moderated<>0')
	alter table [dbo].[yaf_Forum] drop column Moderated
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='ImageURL')
	alter table [dbo].[yaf_Forum] add ImageURL nvarchar(128) NULL
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='Styles')
	alter table [dbo].[yaf_Forum] add Styles nvarchar(255) NULL
GO

if exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Forum]') and name='LastUserName' and precision < 255)
 	alter table [dbo].[yaf_Forum] alter column [LastUserName]	nvarchar (255) NULL 
GO

if not exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Forum]') and name='LastUserDisplayName')
 	alter table [dbo].[yaf_Forum] add [LastUserDisplayName]	nvarchar (255) NULL
	
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Forum]') and name='PollGroupID')
	alter table [dbo].[yaf_Forum] add PollGroupID int NULL
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Forum]') and name='IsHidden')
begin
	alter table [dbo].[yaf_Forum] ADD [IsHidden] AS (CONVERT([bit],sign([Flags]&(2)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Forum]') and name='IsLocked')
begin
	alter table [dbo].[yaf_Forum] ADD [IsLocked] AS (CONVERT([bit],sign([Flags]&(1)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Forum]') and name='IsNoCount')
begin
	alter table [dbo].[yaf_Forum] ADD [IsNoCount] AS (CONVERT([bit],sign([Flags]&(4)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Forum]') and name='IsModerated')
begin
	alter table [dbo].[yaf_Forum] ADD [IsModerated] AS (CONVERT([bit],sign([Flags]&(8)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Forum]') and name='UserID')
begin
	alter table [dbo].[yaf_Forum] ADD [UserID]  int null 
end
GO

if exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Forum]') and name='Description' and is_nullable=0)
begin
	alter table [dbo].[yaf_Forum] alter column [Description] nvarchar(255) null
end
GO

-- Group Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='Flags')
begin
	alter table [dbo].[yaf_Group] add Flags int not null constraint [DF_yaf_Group_Flags] default (0)
end
GO

if exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Group]') and name='Name' and precision < 255)
begin
if exists (select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_Group]') and name='IX_yaf_Group')
begin
	alter table [dbo].[yaf_Group] drop constraint IX_yaf_Group 
end
 	alter table [dbo].[yaf_Group] alter column [Name] nvarchar(255) NOT NULL
end
GO


if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='IsAdmin')
begin
	exec('update [dbo].[yaf_Group] set Flags = Flags | 1 where IsAdmin<>0')
	alter table [dbo].[yaf_Group] drop column IsAdmin
end
GO


if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='IsGuest')
begin
	exec('update [dbo].[yaf_Group] set Flags = Flags | 2 where IsGuest<>0')
	alter table [dbo].[yaf_Group] drop column IsGuest
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='IsStart')
begin
	exec('update [dbo].[yaf_Group] set Flags = Flags | 4 where IsStart<>0')
	alter table [dbo].[yaf_Group] drop column IsStart
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='IsModerator')
begin
	exec('update [dbo].[yaf_Group] set Flags = Flags | 8 where IsModerator<>0')
	alter table [dbo].[yaf_Group] drop column IsModerator
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_Group]') and name=N'PMLimit')
begin

		alter table [dbo].[yaf_Group] add PMLimit int not null	constraint [DF_yaf_Group_PMLimit] default (0)
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_Group]') and name=N'PMLimit' and is_nullable=1)
begin		
		grant update on [dbo].[yaf_Group] to public
		exec('update [dbo].[yaf_Group] set PMLimit = 30 WHERE PMLimit IS NULL')
		alter table [dbo].[yaf_Group] alter column [PMLimit] integer NOT NULL
		revoke update on [dbo].[yaf_Group] from public	    
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='Style')
begin
	alter table [dbo].[yaf_Group] add Style nvarchar(255) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='SortOrder')
begin
	alter table [dbo].[yaf_Group] add SortOrder smallint not null constraint [DF_yaf_Group_SortOrder] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='Description')
begin
	alter table [dbo].[yaf_Group] add Description nvarchar(128) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='UsrSigChars')
begin
	alter table [dbo].[yaf_Group] add UsrSigChars int not null constraint [DF_yaf_Group_UsrSigChars] default (0)
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='UsrSigChars')
begin
grant update on [dbo].[yaf_Group] to public
		exec('update [dbo].[yaf_Group] set UsrSigChars = 128 WHERE UsrSigChars = 0 AND Name != ''Guest'' ')
		revoke update on [dbo].[yaf_Group] from public	
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='UsrSigBBCodes')
begin
	alter table [dbo].[yaf_Group] add UsrSigBBCodes nvarchar(255) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='UsrSigHTMLTags')
begin
	alter table [dbo].[yaf_Group] add UsrSigHTMLTags nvarchar(255) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='UsrAlbums')
begin
	alter table [dbo].[yaf_Group] add UsrAlbums int not null constraint [DF_yaf_Group_UsrAlbums] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='UsrAlbumImages')
begin
	alter table [dbo].[yaf_Group] add UsrAlbumImages int not null constraint [DF_yaf_Group_UsrAlbumImages] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='IsHidden')
begin
alter table [dbo].[yaf_Group] ADD [IsHidden] AS (CONVERT([bit],sign([Flags]&(16)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Group]') and name='IsUserGroup')
begin
alter table [dbo].[yaf_Group] ADD [IsUserGroup] AS (CONVERT([bit],sign([Flags]&(32)),(0)))
end
GO

-- AccessMask Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='Flags')
begin
	alter table [dbo].[yaf_AccessMask] add Flags int not null constraint [DF_yaf_AccessMask_Flags] default (0)
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='ReadAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 1 where ReadAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column ReadAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='PostAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 2 where PostAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column PostAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='ReplyAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 4 where ReplyAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column ReplyAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='PriorityAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 8 where PriorityAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column PriorityAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='PollAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 16 where PollAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column PollAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='VoteAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 32 where VoteAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column VoteAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='ModeratorAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 64 where ModeratorAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column ModeratorAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='EditAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 128 where EditAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column EditAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='DeleteAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 256 where DeleteAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column DeleteAccess
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='UploadAccess')
begin
	exec('update [dbo].[yaf_AccessMask] set Flags = Flags | 512 where UploadAccess<>0')
	alter table [dbo].[yaf_AccessMask] drop column UploadAccess
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_AccessMask]') and name='SortOrder')
begin
	alter table [dbo].[yaf_AccessMask] add SortOrder smallint not null default (0)
end
GO

-- NntpForum Table

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_NntpForum]') and name='Active')
begin
	alter table [dbo].[yaf_NntpForum] add Active bit null
	exec('update [dbo].[yaf_NntpForum] set Active=1 where Active is null')
	alter table [dbo].[yaf_NntpForum] alter column Active bit not null
end
GO

if not exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_NntpForum]') and name='DateCutOff')
 	alter table [dbo].[yaf_NntpForum] ADD	DateCutOff datetime NULL
GO

-- NntpTopic Table

if exists (select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_nntptopic]') and name='Thread' and precision < 64)
 	alter table [dbo].[yaf_nntptopic] alter column [Thread]	nvarchar (64) NULL 
GO

-- ReplaceWords Table
if exists (select * from sys.columns where object_id =  object_id(N'[dbo].[yaf_Replace_Words]') and name='badword' and precision < 255)
 	alter table [dbo].[yaf_Replace_Words] alter column badword nvarchar(255) NULL
GO

if exists (select * from sys.columns where object_id =  object_id(N'[dbo].[yaf_Replace_Words]') and name='goodword' and precision < 255)
	alter table [dbo].[yaf_Replace_Words] alter column goodword nvarchar(255) NULL
GO	

if not exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_Replace_Words]') and name='BoardID')
begin
	alter table [dbo].[yaf_Replace_Words] add BoardID int not null constraint [DF_yaf_Replace_Words_BoardID] default (1)
end
GO

-- ShoutboxMessage Table
if not exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_ShoutboxMessage]') and name='BoardID')
begin
	alter table [dbo].[yaf_ShoutboxMessage] add BoardID int not null constraint [DF_yaf_ShoutboxMessage_BoardID] default (1)
end
GO
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_ShoutboxMessage]') and name='UserDisplayName')
begin	
	alter table [dbo].[yaf_ShoutboxMessage] add UserDisplayName nvarchar (255) null
	-- alter table [dbo].[yaf_ShoutboxMessage] alter column UserDisplayName nvarchar (255) not null
end
GO

-- BBCode Table
if not exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_BBCode]') and name='UseModule')
begin
	alter table [dbo].[yaf_BBCode] add UseModule bit null
	alter table [dbo].[yaf_BBCode] add ModuleClass nvarchar(255) null
end
GO

-- Registry Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Registry]') and name='BoardID')
	alter table [dbo].[yaf_Registry] add BoardID int
GO

if exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_Registry]') and name=N'Value' and system_type_id<>99)
	alter table [dbo].[yaf_Registry] alter column Value ntext null
GO

-- PMessage Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_PMessage]') and name='Flags')
begin
	alter table [dbo].[yaf_PMessage] add Flags int not null constraint [DF_yaf_Message_Flags] default (23)
end
GO

-- Message Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='Flags')
begin
	alter table [dbo].[yaf_Topic] add Flags int not null constraint [DF_yaf_Topic_Flags] default (0)
	update [dbo].[yaf_Message] set Flags = Flags & 7
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='Approved')
begin
	exec('update [dbo].[yaf_Message] set Flags = Flags | 16 where Approved<>0')
	alter table [dbo].[yaf_Message] drop column Approved
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='BlogPostID')
begin
	alter table [dbo].[yaf_Message] add BlogPostID nvarchar(50)
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Message]') and name='IsDeleted')
begin
	alter table [dbo].[yaf_Message] ADD [IsDeleted] AS (CONVERT([bit],sign([Flags]&(8)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='UserDisplayName')
begin
	alter table [dbo].[yaf_Message] add UserDisplayName nvarchar(255) 

end
GO



if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Message]') and name='IsApproved')
begin
	alter table [dbo].[yaf_Message] ADD [IsApproved] AS (CONVERT([bit],sign([Flags]&(16)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='EditReason')
	alter table [dbo].[yaf_Message] add EditReason nvarchar (100) NULL
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='IsModeratorChanged')
	alter table [dbo].[yaf_Message] add 	IsModeratorChanged      bit NOT NULL constraint [DF_yaf_Message_IsModeratorChanged] default (0)
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='DeleteReason')
	alter table [dbo].[yaf_Message] add DeleteReason            nvarchar (100)  NULL
GO
    
-- an attempt to migrate the legacy report abuse and report spam features flags		
 if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='Flags')
begin
	grant update on [dbo].[yaf_Message] to public	
	exec('update [dbo].[yaf_Message] SET [dbo].[yaf_Message].Flags =  ([dbo].[yaf_Message].Flags  ^ POWER(2, 8) | POWER(2, 7))
		WHERE (([dbo].[yaf_Message].Flags & 256)=256)')
	-- exec('update [dbo].[yaf_Message] SET [dbo].[yaf_Message].Flags =  ([dbo].[yaf_Message].Flags  ^ POWER(2, 9) | POWER(2, 7)
	---	WHERE (([dbo].[yaf_Message].Flags & 512)=512)')			
	revoke update on [dbo].[yaf_Message] from public	
end


if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='EditedBy')
	alter table [dbo].[yaf_Message] add [EditedBy]   int  NULL
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='ExternalMessageId')
	alter table [dbo].[yaf_Message] add [ExternalMessageId]   nvarchar(255) NULL
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='ReferenceMessageId')
	alter table [dbo].[yaf_Message] add [ReferenceMessageId]   nvarchar(255) NULL
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='ExternalMessageId' and precision < 255)
begin
	alter table [dbo].[yaf_Message] alter column [ExternalMessageId] nvarchar (255) NULL
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='IP' and precision < 39)
begin
	alter table [dbo].[yaf_Message] alter column [IP] varchar(39) not null
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Message]') and name='UserName' and precision < 255)
begin
	alter table [dbo].[yaf_Message] alter column [UserName] nvarchar (255) NULL
end
GO

-- MessageHistory Table

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_MessageHistory]') and name='MessageHistoryID')
begin
	alter table [dbo].[yaf_MessageHistory] drop column [MessageHistoryID]
end
GO
-- the dependency should be dropped first
if exists (select top 1 1 from  sys.objects where name='IX_yaf_MessageHistory' and parent_object_id =object_id('[dbo].[yaf_MessageHistory]'))
	alter table [dbo].[yaf_MessageHistory] drop constraint [IX_yaf_MessageHistory] 
go
if exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_MessageHistory]') and name=N'Edited' and is_nullable=1)
begin		
		grant update on [dbo].[yaf_MessageHistory] to public
		-- exec('[dbo].[yaf_drop_defaultconstraint_oncolumn] yaf_MessageHistory, Edited')
		exec('update [dbo].[yaf_MessageHistory] set Edited = GETDATE() WHERE Edited IS NULL')
		alter table [dbo].[yaf_MessageHistory] alter column [Edited] datetime NOT NULL
		revoke update on [dbo].[yaf_MessageHistory] from public	    
end
GO

-- Topic Table
if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='IsLocked')
begin
	grant update on [dbo].[yaf_Topic] to public
	exec('update [dbo].[yaf_Topic] set Flags = Flags | 1 where IsLocked<>0')
	revoke update on [dbo].[yaf_Topic] from public
	alter table [dbo].[yaf_Topic] drop column IsLocked
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Topic]') and name='IsDeleted')
begin
	alter table [dbo].[yaf_Topic] ADD [IsDeleted] AS (CONVERT([bit],sign([Flags]&(8)),(0)))
end
GO

if exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Topic]') and name='UserName')
begin
	alter table [dbo].[yaf_Topic] alter column [UserName]	nvarchar (255) NULL 
end
GO

if exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Topic]') and name='LastUserName')
begin
	alter table [dbo].[yaf_Topic] alter column [LastUserName]	nvarchar (255) NULL	
end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Topic]') and name='UserDisplayName')
begin
	alter table [dbo].[yaf_Topic] add [UserDisplayName]	nvarchar (255) NULL 

end
GO

if not exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_Topic]') and name='LastUserDisplayName')
begin
	alter table [dbo].[yaf_Topic] add [LastUserDisplayName]		nvarchar (255) NULL 
end
GO


if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='LastMessageFlags')
begin
	alter table [dbo].[yaf_Topic] add [LastMessageFlags] int null
	grant update on [dbo].[yaf_Topic] to public
	-- vzrus : we don't migrate flags to not slow down update and possible timeouts. Users can run maintenance scripts? Else use cursors.
	exec('update [dbo].[yaf_Topic] set LastMessageFlags = 22 WHERE LastMessageFlags IS NULL')
	revoke update on [dbo].[yaf_Topic] from public	
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='Description')
begin
	alter table [dbo].[yaf_Topic] add [Description] nvarchar(255) null	
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='LinkDate')
begin
	alter table [dbo].[yaf_Topic] add [LinkDate] datetime null	
end
GO

-- Rank Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='Flags')
begin
	alter table [dbo].[yaf_Rank] add Flags int not null constraint [DF_yaf_Rank_Flags] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_Rank]') and name=N'PMLimit')
begin	
	alter table [dbo].[yaf_Rank] add PMLimit int null 
	grant update on [dbo].[yaf_Rank] to public
	exec('update [dbo].[yaf_Rank] set PMLimit = 0 WHERE PMLimit IS NULL')
	alter table [dbo].[yaf_Rank] alter column [PMLimit] integer NOT NULL
	revoke update on [dbo].[yaf_Rank] from public
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='Style')
begin
	alter table [dbo].[yaf_Rank] add Style nvarchar(255) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='SortOrder')
begin
	alter table [dbo].[yaf_Rank] add SortOrder smallint not null constraint [DF_yaf_Rank_SortOrder] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='Description')
begin
	alter table [dbo].[yaf_Rank] add Description nvarchar(128) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='UsrSigChars')
begin
	alter table [dbo].[yaf_Rank] add UsrSigChars int not null constraint [DF_yaf_Rank_UsrSigChars] default (0)
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='UsrSigChars')
begin
grant update on [dbo].[yaf_Rank] to public
		exec('update [dbo].[yaf_Rank] set UsrSigChars = 128 WHERE UsrSigChars = 0 AND Name != ''Guest'' ')
		revoke update on [dbo].[yaf_Rank] from public	
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='UsrSigBBCodes')
begin
	alter table [dbo].[yaf_Rank] add UsrSigBBCodes nvarchar(255) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='UsrSigHTMLTags')
begin
	alter table [dbo].[yaf_Rank] add UsrSigHTMLTags nvarchar(255) null
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='UsrAlbums')
begin
	alter table [dbo].[yaf_Rank] add UsrAlbums int not null constraint [DF_yaf_Rank_UsrAlbums] default (0)
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='UsrAlbumImages')
begin
	alter table [dbo].[yaf_Rank] add UsrAlbumImages int not null constraint [DF_yaf_Rank_UsrAlbumImages] default (0)
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='IsStart')
begin
	grant update on [dbo].[yaf_Rank] to public
	exec('update [dbo].[yaf_Rank] set Flags = Flags | 1 where IsStart<>0')
	revoke update on [dbo].[yaf_Rank] from public
	alter table [dbo].[yaf_Rank] drop column IsStart
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Rank]') and name='IsLadder')
begin
	grant update on [dbo].[yaf_Rank] to public
	exec('update [dbo].[yaf_Rank] set Flags = Flags | 2 where IsLadder<>0')
	revoke update on [dbo].[yaf_Rank] from public
	alter table [dbo].[yaf_Rank] drop column IsLadder
end
GO

--vzrus: eof migrate to independent multiple polls


-- Poll Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name='Closes')
begin
	alter table [dbo].[yaf_Poll] add Closes datetime null
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'Question' AND precision < 256 )
begin
	alter table [dbo].[yaf_Poll] alter column Question nvarchar(256) NOT NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'PollGroupID')
begin
	alter table [dbo].[yaf_Poll] add PollGroupID int NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'UserID')
begin
	alter table [dbo].[yaf_Poll] add [UserID] int NOT NULL constraint [DF_yaf_Poll_UserID] default (1)
end
GO

IF  EXISTS (SELECT top 1 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollgroup_migration]') AND type in (N'P', N'PC'))
begin
DROP PROCEDURE [dbo].[yaf_pollgroup_migration]		
end
GO

-- should drop it else error
if exists(select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_Poll' and parent_object_id =object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_yaf_Topic_yaf_Poll] 
go 

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'Flags')
begin
	alter table [dbo].[yaf_Poll] add [Flags] int NULL
end
GO

create procedure [dbo].[yaf_pollgroup_migration]
 as
  begin
     declare @ptmp int
	 declare @ttmp int
	 declare @utmp int 
	 declare @PollGroupID int

        declare c cursor for
        select  PollID,TopicID, UserID from [dbo].[yaf_Topic] where PollID IS NOT NULL
		        
        open c
        
        fetch next from c into @ptmp, @ttmp, @utmp
        while @@FETCH_STATUS = 0
        begin
		if @ptmp is not null
		begin
		insert into [dbo].[yaf_PollGroupCluster](UserID, Flags) values (@utmp, 0)	
		SET @PollGroupID = SCOPE_IDENTITY()  
		
	            update [dbo].[yaf_Topic] SET PollID = @PollGroupID WHERE TopicID = @ttmp
				update [dbo].[yaf_Poll] SET UserID = @utmp, PollGroupID = @PollGroupID, Flags = 0 WHERE PollID = @ptmp
		end       
        fetch next from c into @ptmp, @ttmp, @utmp
        end

        close c
        deallocate c 

		end
GO

if (not exists (select top 1 1 from [dbo].[yaf_PollGroupCluster]) and exists (select top 1 1 from [dbo].[yaf_Poll]))
begin
	--vzrus: migrate to independent multiple polls	
	exec('[dbo].[yaf_pollgroup_migration]')	

		-- vzrus: drop the temporary  sp
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollgroup_migration]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pollgroup_migration]		
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name='Flags')
begin
	grant update on [dbo].[yaf_Poll] to public
	exec('update [dbo].[yaf_Poll] set Flags = 0 where Flags is null')
	revoke update on [dbo].[yaf_Poll] from public
	-- here computed columns on Flags should be dropped if exist before
	-- alter table [dbo].[yaf_Poll] alter column Flags int not null
	-- alter table [dbo].[yaf_Poll] add constraint [DF_yaf_Poll_Flags] default(0) for Flags
end
GO

-- TODO: change userid to not null

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'ObjectPath')
begin
	alter table [dbo].[yaf_Poll] add [ObjectPath] nvarchar(255) NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'MimeType')
begin
	alter table [dbo].[yaf_Poll] add [MimeType] varchar(50) NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'IsClosedBound')
begin
	alter table [dbo].[yaf_Poll] add [IsClosedBound] AS (CONVERT([bit],sign([Flags]&(4)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'AllowMultipleChoices')
begin
	alter table [dbo].[yaf_Poll] add [AllowMultipleChoices] AS (CONVERT([bit],sign([Flags]&(8)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'ShowVoters')
begin
	alter table [dbo].[yaf_Poll] add [ShowVoters] AS (CONVERT([bit],sign([Flags]&(16)),(0)))
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Poll]') and name=N'AllowSkipVote')
begin
	alter table [dbo].[yaf_Poll] add [AllowSkipVote] AS (CONVERT([bit],sign([Flags]&(32)),(0)))
end
GO

 -- PollGroupTable
 if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_PollGroupCluster]') and name=N'IsBound')
 begin
 	alter table [dbo].[yaf_PollGroupCluster] add [IsBound]	AS (CONVERT([bit],sign([Flags]&(2)),(0)))
 end
GO
 
if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_PollGroupCluster]') and name='Flags')
begin
	grant update on [dbo].[yaf_PollGroupCluster] to public
	exec('update [dbo].[yaf_PollGroupCluster] set Flags = 0 where Flags is null')
	revoke update on [dbo].[yaf_PollGroupCluster] from public
	-- alter table [dbo].[yaf_PollGroupCluster] alter column Flags int not null
	-- alter table [dbo].[yaf_PollGroupCluster] add constraint [DF_yaf_PollGroupCluster_Flags] default(0) for Flags
end
GO
-- ActiveAccess Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_ActiveAccess]') and name=N'LastActive')
begin
	alter table [dbo].[yaf_ActiveAccess] add [LastActive] datetime NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_ActiveAccess]') and name=N'IsGuestX')
begin
    delete from [dbo].[yaf_ActiveAccess]
	alter table [dbo].[yaf_ActiveAccess] add [IsGuestX] bit NOT NULL
end
GO
-- drop the old contrained just in case
if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_ActiveAccess]') and name='IX_yaf_ActiveAccess')
	alter table [dbo].[yaf_ActiveAccess] drop constraint IX_yaf_ActiveAccess
go

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_ActiveAccess]') and name=N'ForumID' and is_nullable=1)
	alter table [dbo].[yaf_ActiveAccess] alter column ForumID int not null
GO

-- Choice Table
-- this is a dummy it doesn't work
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Choice]') and name= N'Choice' AND precision < 255 )
begin
	alter table [dbo].[yaf_Choice] alter column Choice varchar(255) NOT NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Choice]') and name=N'ObjectPath')
begin
	alter table [dbo].[yaf_Choice] add [ObjectPath] nvarchar(255) NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Choice]') and name=N'MimeType')
begin
	alter table [dbo].[yaf_Choice] add [MimeType] varchar(50) NULL
end
GO

-- EventLog Table
if not exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_EventLog]') and name=N'Type')
begin
	alter table [dbo].[yaf_EventLog] add Type int not null constraint [DF_yaf_EventLog_Type] default (0)
	exec('update [dbo].[yaf_EventLog] set Type = 0')
end
GO

if not exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_EventLog]') and name=N'UserName')
begin
	alter table [dbo].[yaf_EventLog] add UserName nvarchar(100) null
end
GO

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_EventLog]') and name=N'UserName' and is_nullable=0)
	alter table [dbo].[yaf_EventLog] alter column UserName nvarchar(100) null
GO

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_EventLog]') and name=N'UserID' and is_nullable=0)
	alter table [dbo].[yaf_EventLog] alter column UserID int null
GO	

-- Smiley Table
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Smiley]') and name='SortOrder')
begin
	alter table [dbo].[yaf_Smiley] add SortOrder tinyint NOT NULL default 0
end
GO

-- Category Table
IF NOT exists (select top 1 1 from sys.columns where object_id =  Object_id(N'[dbo].[yaf_Category]') AND name = N'CategoryImage')
BEGIN
    ALTER TABLE [dbo].[yaf_Category] ADD [CategoryImage] [nvarchar](255) NULL
END
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Category]') and name='PollGroupID')
	alter table [dbo].[yaf_Category] add PollGroupID int NULL
GO


-- MessageReportedAudit Table
IF NOT exists (select top 1 1 from sys.columns where object_id =  Object_id(N'[dbo].[yaf_MessageReportedAudit]') AND name = N'ReportedNumber')
BEGIN
    ALTER TABLE [dbo].[yaf_MessageReportedAudit] ADD [ReportedNumber] int NOT NULL default 1
END
GO

IF NOT exists (select top 1 1 from sys.columns where object_id =  Object_id(N'[dbo].[yaf_MessageReportedAudit]') AND name = N'ReportText')
BEGIN
    ALTER TABLE [dbo].[yaf_MessageReportedAudit] ADD [ReportText] nvarchar(4000)  NULL 
END
GO

if exists (select top 1 1 from sys.columns where object_id=object_id(N'[dbo].[yaf_MessageReportedAudit]') and name=N'MessageID' and is_nullable=1)
begin
		alter table [dbo].[yaf_MessageReportedAudit] alter column [MessageID] integer NOT NULL		    
end
GO


-- BannedIP Table

IF NOT exists (select top 1 1 from sys.columns where object_id =  Object_id(N'[dbo].[yaf_BannedIP]') AND name = N'Reason')
BEGIN
    ALTER TABLE [dbo].[yaf_BannedIP] ADD [Reason] nvarchar(128)  NULL 
END
GO

IF NOT exists (select top 1 1 from sys.columns where object_id =  Object_id(N'[dbo].[yaf_BannedIP]') AND name = N'UserID')
BEGIN
    ALTER TABLE [dbo].[yaf_BannedIP] ADD [UserID] int  null 
END
GO

IF NOT exists (select top 1 1 from sys.columns where object_id =  Object_id(N'[dbo].[yaf_BannedIP]') AND name = N'Mask' AND precision < 56)
BEGIN
    ALTER TABLE [dbo].[yaf_BannedIP] alter column [Mask] varchar(57) not  null 
END
GO

-- PollVote Table

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_PollVote]') and name=N'RemoteIP' and precision<39)
    -- vzrus: should drop the index to change the field
    if exists(select * from sys.indexes where object_id=object_id('[dbo].[yaf_PollVote]') and name='IX_yaf_PollVote_RemoteIP')
    begin
    begin
    drop index [IX_yaf_PollVote_RemoteIP] ON [dbo].[yaf_PollVote]
    end
	alter table [dbo].[yaf_PollVote] alter column [RemoteIP] varchar(39) null
	end
GO	

IF NOT exists (select top 1 1 from sys.columns where object_id =  Object_id(N'[dbo].[yaf_PollVote]') AND name = N'ChoiceID')
BEGIN
    ALTER TABLE [dbo].[yaf_PollVote] ADD [ChoiceID] int  null 
END
GO


-- MessageHistory Table

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_MessageHistory]') and name=N'IP' and precision<39)
	alter table [dbo].[yaf_MessageHistory] alter column [IP] varchar(39) not null
GO

-- NntpServer Table

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_NntpServer]') and name=N'UserName' and precision<255)
	alter table [dbo].[yaf_NntpServer] alter column [UserName] nvarchar(255) null
GO

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_User]') and name=N'Email' and precision<255)
	alter table [dbo].[yaf_User] alter column [Email] nvarchar(255) null
GO

if exists(select top 1 1 from sys.columns where object_id =  object_id(N'[dbo].[yaf_CheckEmail]') and name=N'Email' and precision<255)
	alter table [dbo].[yaf_CheckEmail] alter column [Email] nvarchar(255) null
GO

-- Create Topic Read Tracking Table

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_TopicReadTracking]') and type in (N'U'))
	create table [dbo].[yaf_TopicReadTracking](
		UserID			int NOT NULL,
		TopicID			int NOT NULL,
		LastAccessDate	datetime NOT NULL
 constraint [PK_yaf_TopicReadTracking] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[TopicID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

-- Create Forum Read Tracking Table

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_ForumReadTracking]') and type in (N'U'))
	create table [dbo].[yaf_ForumReadTracking](
		UserID			int NOT NULL,
		ForumID			int NOT NULL,
		LastAccessDate	datetime NOT NULL,
 constraint [PK_yaf_ForumReadTracking] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ForumID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='Status')
begin
	alter table [dbo].[yaf_Topic] add [Status] nvarchar(255) null	
end
GO


if exists(select top 1 1 from sys.objects where name='PK_yaf_ForumReadTracking')
	alter table [dbo].[yaf_ForumReadTracking] drop constraint [PK_yaf_ForumReadTracking] 
go 

if exists(select top 1 1 from sys.objects where name='PK_yaf_TopicReadTracking')
	alter table [dbo].[yaf_TopicReadTracking] drop constraint [PK_yaf_TopicReadTracking] 
go 

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_ForumReadTracking]') and name='TrackingID')
begin
	alter table [dbo].[yaf_ForumReadTracking] drop column TrackingID
end
GO

if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_TopicReadTracking]') and name='TrackingID')
begin
	alter table [dbo].[yaf_TopicReadTracking] drop column TrackingID
end
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_TopicStatus]') and type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[yaf_TopicStatus](
	    TopicStatusID int IDENTITY(1,1) NOT NULL,
		TopicStatusName nvarchar(100) NOT NULL,
		BoardID int NOT NULL,
		defaultDescription nvarchar(100) NOT NULL,
		constraint [PK_yaf_TopicStatus] PRIMARY KEY(TopicStatusID)
	)
END
GO

exec('[dbo].[yaf_drop_defaultconstraint_oncolumn] yaf_User, Culture')
GO

-- Add 8-letter Language Code column
if exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='Culture' and precision=5)
begin
	alter table [dbo].[yaf_User] alter column [Culture] varchar(10) NULL
end
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_Topic]') and name='Styles')
	alter table [dbo].[yaf_Topic] add Styles nvarchar(255) NULL
GO

if not exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_ReputationVote]') and type in (N'U'))
	create table [dbo].[yaf_ReputationVote](
		ReputationFromUserID  int NOT NULL,
		ReputationToUserID	  int NOT NULL,
		VoteDate	datetime NOT NULL,
 constraint [PK_yaf_ReputationVote] PRIMARY KEY CLUSTERED 
(
	[ReputationFromUserID] ASC,
	[ReputationToUserID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
	)
GO	

-- display names upgrade routine can run really for ages on large forums 
IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_initdisplayname]'))
DROP procedure [dbo].[yaf_forum_initdisplayname]
GO

create procedure [dbo].[yaf_forum_initdisplayname] as
 
begin
    declare @tmpUserName nvarchar(255)
    declare @tmpUserDisplayName nvarchar(255)
    declare @tmpLastUserName nvarchar(255)
    declare @tmpLastUserDisplayName nvarchar(255)
    declare @tmp int
    declare @tmpUserID int
    declare @tmpLastUserID int
 
     update d
      set    d.LastUserDisplayName = ISNULL((select top 1 f.LastUserDisplayName FROM [dbo].[yaf_Forum] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID), 
           (select top 1 f.LastUserName FROM [dbo].[yaf_Forum] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_Forum] d where d.LastUserDisplayName IS NULL OR d.LastUserDisplayName = d.LastUserName;
         
        /* declare fc cursor for
        select ForumID, LastUserID from [dbo].[yaf_Forum]
        where (LastUserDisplayName IS NULL OR LastUserName IS NULL) and LastUserID IS NOT NULL
        FOR UPDATE     
        open fc
         
        fetch next from fc into @tmp,@tmpLastUserID
        while @@FETCH_STATUS = 0
        begin
        select @tmpLastUserDisplayName = u.DisplayName,  @tmpLastUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpLastUserID
        update [dbo].[yaf_Forum] set LastUserDisplayName = @tmpLastUserDisplayName, LastUserName = @tmpLastUserName where [dbo].[yaf_Forum].ForumID = @tmp    
        fetch next from fc into @tmp,@tmpLastUserID
        end
        close fc
        deallocate fc */
 
        update d
       set    d.UserDisplayName = ISNULL((select top 1 f.UserDisplayName FROM [dbo].[yaf_ShoutboxMessage] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID), 
           (select top 1 f.UserName FROM [dbo].[yaf_ShoutboxMessage] f
          join [dbo].[yaf_User] u on u.UserID = f.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_ShoutboxMessage] d where d.UserDisplayName IS NULL OR d.UserDisplayName = d.UserName;
         
    /*  declare sbc cursor for
        select ShoutBoxMessageID,UserID from [dbo].[yaf_ShoutboxMessage]
        where UserDisplayName IS NULL
        FOR UPDATE     
        open sbc
         
        fetch next from sbc into @tmp,@tmpUserID
        while @@FETCH_STATUS = 0
        begin
        select @tmpUserDisplayName = u.DisplayName,  @tmpUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpUserID
        update [dbo].[yaf_ShoutboxMessage] set UserDisplayName = @tmpUserDisplayName,UserName = @tmpUserName where [dbo].[yaf_ShoutboxMessage].ShoutBoxMessageID = @tmp
        fetch next from sbc into @tmp,@tmpUserID
        end
        close sbc
        deallocate sbc  
        */  
         
            update d
       set    d.UserDisplayName = ISNULL((select top 1 m.UserDisplayName FROM [dbo].[yaf_Message] m
          join [dbo].[yaf_User] u on u.UserID = m.UserID where u.UserID = d.UserID), 
           (select top 1 m.UserName FROM [dbo].[yaf_Message] m
          join [dbo].[yaf_User] u on u.UserID = m.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_Message] d where d.UserDisplayName IS NULL OR d.UserDisplayName = d.UserName;  
         
    /*  declare mc cursor for
        select MessageID,UserID from [dbo].[yaf_Message]
        where UserDisplayName IS NULL
        FOR UPDATE
                 
        open mc
         
        fetch next from mc into @tmp,@tmpUserID
        while @@FETCH_STATUS = 0
        begin
        select @tmpUserDisplayName = u.DisplayName,  @tmpUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpUserID     
        update [dbo].[yaf_Message]  set UserDisplayName = @tmpUserDisplayName, UserName = @tmpUserName where MessageID = @tmp
        fetch next from mc into @tmp,@tmpUserID
        end
        close mc
        deallocate mc
        */      
         
            update d
       set    d.UserDisplayName = ISNULL((select top 1 t.UserDisplayName FROM [dbo].[yaf_Topic] t
          join [dbo].[yaf_User] u on u.UserID = t.UserID where u.UserID = d.UserID), 
           (select top 1 t.UserName FROM [dbo].[yaf_Topic] t
          join [dbo].[yaf_User] u on u.UserID = t.UserID where u.UserID = d.UserID ))      
       from  [dbo].[yaf_Message] d where d.UserDisplayName IS NULL OR d.UserDisplayName = d.UserName;  
 
    /*  declare tc cursor for
        select TopicID,UserID,LastUserID from [dbo].[yaf_Topic]
        where (UserDisplayName IS NULL OR LastUserDisplayName IS NULL) and LastUserID IS NOT NULL
        FOR UPDATE
                 
        open tc
         
        fetch next from tc into @tmp,@tmpUserID,@tmpLastUserID
        while @@FETCH_STATUS = 0
        begin  
        select @tmpUserDisplayName = u.DisplayName,  @tmpUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpUserID 
        select @tmpLastUserDisplayName = u.DisplayName,  @tmpLastUserName = u.Name FROM [dbo].[yaf_User] u WHERE u.UserID = @tmpLastUserID     
        update [dbo].[yaf_Topic] set UserDisplayName = @tmpUserDisplayName, UserName = @tmpUserName  where TopicID = @tmp
        update [dbo].[yaf_Topic] set LastUserDisplayName = @tmpLastUserDisplayName, LastUserName = @tmpLastUserName where TopicID = @tmp           
 
        fetch next from tc into @tmp,@tmpUserID,@tmpLastUserID
        end
        close tc
        deallocate tc   */      
end
GO

if exists (select top 1 1 from [dbo].[yaf_Message] where UserDisplayName IS NULL)
exec('[dbo].[yaf_forum_initdisplayname]')
GO

-- add ReplyTo Column to PMessage Table if not exists
if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_PMessage]') and name='ReplyTo')
	alter table [dbo].[yaf_PMessage] add ReplyTo int NULL
GO

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_UserPMessage]') and name='IsReply')
    alter table [dbo].[yaf_UserPMessage] ADD [IsReply] [bit] NOT NULL  default (0)
GO

-- a deleted user was not previously deleted from here - clean-up possible needs a prefetch into temp table for perfomance 
exec('delete from [dbo].[yaf_UserMedal] where [UserID] NOT IN (select [UserID] from [dbo].[yaf_User])')
GO

-- update default points from 0 to 1
if exists (select top 1 1 from sys.columns where object_id =  object_id('[dbo].[yaf_User]') and name='Points')
begin
	update  [dbo].[yaf_User] SET [Points]=1 WHERE [Points] = 0
end
GO

-- delete old stuff from registry
grant delete on [dbo].[yaf_Registry] to public
grant update on [dbo].[yaf_Registry] to public

-- fix the problem when a user couldn't be registered
exec('delete from [dbo].[yaf_Registry] where Name LIKE ''timezone'' and BoardID IS NOT NULL')

if not exists (select count(name) from [dbo].[yaf_Registry] where [Name] LIKE 'timezone' and BoardID IS NULL)
exec('insert into [dbo].[yaf_Registry] (Name,Value) values (''timezone'',0)')
exec('update [dbo].[yaf_Group] set Style = NULL where Style is not null and len(Style) <=2')
exec('update [dbo].[yaf_Rank] set Style = NULL where Style is not null and len(Style) <=2')
     
revoke delete on [dbo].[yaf_Registry] from public
revoke update on [dbo].[yaf_Registry] from public	
GO

-- delete any old medals without valid groups.
exec('DELETE FROM [dbo].[yaf_GroupMedal] WHERE GroupID NOT IN (SELECT GroupID FROM [dbo].[yaf_Group])')
GO

if exists(select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Attachment]') and name=N'ContentType' and precision < 255)
	alter table [dbo].[yaf_Attachment] alter column ContentType nvarchar(max) null
GO

if exists(select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Attachment]') and name=N'FileID')
	alter table [dbo].[yaf_Attachment] drop column FileID
GO

if not exists(select top 1 1 from sys.columns where object_id = object_id(N'[dbo].[yaf_Attachment]') and name=N'UserID')
    begin
	    alter table [dbo].[yaf_Attachment] add UserID int not null default (0)

		exec('
		declare @MessageID int
		declare @UserID int

		declare curMessages cursor for
            select 
                a.MessageID,
				m.UserID
            from
                [dbo].[yaf_Attachment] a  
				INNER JOIN [dbo].[yaf_Message] m ON m.MessageID = a.MessageID

            where
                a.UserID = 0

        open curMessages
        
        -- cycle through messages
        fetch next from curMessages into @MessageID, @UserID
        while @@FETCH_STATUS = 0
        begin
            update [dbo].[yaf_Attachment] SET UserID = @UserID where MessageID = @MessageID and UserID = 0

            fetch next from curMessages into @MessageID, @UserID
        end
        close curMessages
        deallocate curMessages')
    end
go

if not exists (select top 1 1 from sys.columns where object_id=object_id('[dbo].[yaf_User]') and name='SuspendedReason')
begin
	alter table [dbo].[yaf_User] add SuspendedReason ntext NULL
	alter table [dbo].[yaf_User] add SuspendedBy     int not null default (0)
end
GO

--================================ FUNCTIONS =========================================

-- scalar functions
IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_registry_value]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_registry_value]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bitset]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_bitset]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_posts]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_forum_posts]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_topics]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_forum_topics]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_subforums]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_forum_subforums]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_lasttopic]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_forum_lasttopic]

GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_getribbonsetting]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_medal_getribbonsetting]

GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_getsortorder]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_medal_getsortorder]

GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_gethide]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_medal_gethide]

GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_get_userstyle]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_get_userstyle]

GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_getthanksinfo]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_message_getthanksinfo]

GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_save_parentschecker]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_forum_save_parentschecker]

GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Split]') AND type in (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[yaf_Split]
GO

CREATE FUNCTION [dbo].[yaf_registry_value] (
    @Name NVARCHAR(64)
    ,@BoardID INT = NULL
    )
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @returnValue NVARCHAR(MAX)

    IF @BoardID IS NOT NULL AND EXISTS(SELECT 1 FROM [dbo].[yaf_Registry] WHERE LOWER([Name]) = LOWER(@Name) AND [BoardID] = @BoardID)
    BEGIN
        SET @returnValue = (
            SELECT CAST([Value] AS NVARCHAR(MAX))
            FROM [dbo].[yaf_Registry]
            WHERE LOWER([Name]) = LOWER(@Name) AND [BoardID] = @BoardID)
    END
    ELSE
    BEGIN
        SET @returnValue = (
            SELECT CAST([Value] AS NVARCHAR(MAX))
            FROM [dbo].[yaf_Registry]
            WHERE LOWER([Name]) = LOWER(@Name) AND [BoardID] IS NULL)
    END

    RETURN @returnValue
END
GO

create function [dbo].[yaf_forum_posts](@ForumID int) returns int as
begin
    declare @NumPosts int
    declare @tmp int

    select @NumPosts=NumPosts from [dbo].[yaf_Forum] where ForumID=@ForumID


    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)

    begin
        declare c cursor for
        select ForumID from [dbo].[yaf_Forum]

        where ParentID = @ForumID
        
        open c
        
        fetch next from c into @tmp
        while @@FETCH_STATUS = 0
        begin
            set @NumPosts=@NumPosts+[dbo].[yaf_forum_posts](@tmp)

            fetch next from c into @tmp
        end
        close c
        deallocate c
    end

    return @NumPosts
end
GO

create function [dbo].[yaf_forum_topics](@ForumID int) returns int as

begin
    declare @NumTopics int
    declare @tmp int

    select @NumTopics=NumTopics from [dbo].[yaf_Forum] where ForumID=@ForumID


    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)

    begin
        declare c cursor for
        select ForumID from [dbo].[yaf_Forum]

        where ParentID = @ForumID
        
        open c
        
        fetch next from c into @tmp
        while @@FETCH_STATUS = 0
        begin
            set @NumTopics=@NumTopics+[dbo].[yaf_forum_topics](@tmp)

            fetch next from c into @tmp
        end
        close c
        deallocate c
    end

    return @NumTopics
end
GO

CREATE FUNCTION [dbo].[yaf_forum_lasttopic] 

(	
    @ForumID int,
    @UserID int = null,
    @LastTopicID int = null,
    @LastPosted datetime = null
) RETURNS int AS
BEGIN
    -- local variables for temporary values
    declare @SubforumID int
    declare @TopicID int
    declare @Posted datetime

    -- try to retrieve last direct topic posed in forums if not supplied as argument 
    if (@LastTopicID is null or @LastPosted is null) BEGIN
        IF (@UserID IS NULL)
        BEGIN	
                SELECT TOP 1 
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    a.ForumID = @ForumID AND a.IsHidden = 0
        END			
        ELSE
        BEGIN	
                SELECT TOP 1
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    (a.IsHidden = 0 or x.ReadAccess <> 0) AND a.ForumID=@ForumID and x.UserID=@UserID
        END	
    END

    -- look for newer topic/message in subforums
    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)
    begin
        declare c cursor FORWARD_ONLY READ_ONLY for
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (x.UserID=@UserID and ((a.Flags & 2)=0 or x.ReadAccess<>0))
                )	
            UNION			
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess]x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (@UserID is null and (a.Flags & 2)=0)
                )
            
        open c
        
        -- cycle through subforums
        fetch next from c into @SubforumID, @TopicID, @Posted
        while @@FETCH_STATUS = 0
        begin
            -- get last topic/message info for subforum
            SELECT 
                @TopicID = LastTopicID,
                @Posted = LastPosted
            FROM
                [dbo].[yaf_forum_lastposted](@SubforumID, @UserID, @TopicID, @Posted)


            -- if subforum has newer topic/message, make it last for parent forum
            if (@TopicID is not null and @Posted is not null and @LastPosted < @Posted) begin
                SET @LastTopicID = @TopicID
                SET @LastPosted = @Posted
            end
            -- workaround to avoid logical expressions with NULL possible differences through SQL server versions. 
            if (@TopicID is not null and @Posted is not null and @LastPosted is null) begin
                SET @LastTopicID = @TopicID
                SET @LastPosted = @Posted
            end	

            fetch next from c into @SubforumID, @TopicID, @Posted
        end
        close c
        deallocate c
    end

    -- return id of topic with last message in this forum or its subforums
    RETURN @LastTopicID
END
GO

-- table-valued functions

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_lastposted]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[yaf_forum_lastposted]

GO

CREATE FUNCTION [dbo].[yaf_forum_lastposted] 

(	
    @ForumID int,
    @UserID int = null,
    @LastTopicID int = null,
    @LastPosted datetime = null
)
RETURNS @LastPostInForum TABLE 
(
    LastTopicID int,
    LastPosted datetime
)
AS
BEGIN
    -- local variables for temporary values
    declare @SubforumID int
    declare @TopicID int
    declare @Posted datetime

    -- try to retrieve last direct topic posed in forums if not supplied as argument 
    if (@LastTopicID is null or @LastPosted is null) BEGIN
        IF (@UserID IS NULL)
        BEGIN	
                SELECT TOP 1 
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    a.ForumID = @ForumID AND a.IsHidden = 0
        END			
        ELSE
        BEGIN	
                SELECT TOP 1
                    @LastTopicID=a.LastTopicID,
                    @LastPosted=a.LastPosted
                FROM
                    [dbo].[yaf_Forum] a WITH(NOLOCK)
                    INNER JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
                WHERE
                    (a.IsHidden = 0 or x.ReadAccess <> 0) AND a.ForumID=@ForumID and x.UserID=@UserID
        END	
    END

    -- look for newer topic/message in subforums
    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)

    begin
        declare c cursor FORWARD_ONLY READ_ONLY for
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess] x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (x.UserID=@UserID and ((a.Flags & 2)=0 or x.ReadAccess<>0))
                )	
            UNION			
            SELECT
                a.ForumID,
                a.LastTopicID,
                a.LastPosted
            FROM
                [dbo].[yaf_Forum] a WITH(NOLOCK)
                JOIN [dbo].[yaf_ActiveAccess]x WITH(NOLOCK) ON a.ForumID=x.ForumID
            WHERE
                a.ParentID=@ForumID and
                (					
                    (@UserID is null and (a.Flags & 2)=0)
                )
            
        open c
        
        -- cycle through subforums
        fetch next from c into @SubforumID, @TopicID, @Posted
        while @@FETCH_STATUS = 0
        begin
            -- get last topic/message info for subforum
            SELECT 
                @TopicID = LastTopicID,
                @Posted = LastPosted
            FROM
                [dbo].[yaf_forum_lastposted](@SubforumID, @UserID, @TopicID, @Posted)


            -- if subforum has newer topic/message, make it last for parent forum
            if (@TopicID is not null and @Posted is not null and @LastPosted < @Posted) begin
                SET @LastTopicID = @TopicID
                SET @LastPosted = @Posted
            end

            fetch next from c into @SubforumID, @TopicID, @Posted
        end
        close c
        deallocate c
    end

    -- return vector
    INSERT @LastPostInForum
    SELECT 
        @LastTopicID,
        @LastPosted
    RETURN
END
GO

CREATE FUNCTION [dbo].[yaf_medal_getribbonsetting]
(
    @RibbonURL nvarchar(250),
    @Flags int,
    @OnlyRibbon bit
)
RETURNS bit
AS
BEGIN

    if ((@RibbonURL is null) or ((@Flags & 2) = 0)) set @OnlyRibbon = 0

    return @OnlyRibbon

END
GO

CREATE FUNCTION [dbo].[yaf_medal_getsortorder]
(
    @SortOrder tinyint,
    @DefaultSortOrder tinyint,
    @Flags int
)
RETURNS tinyint
AS
BEGIN

    if ((@Flags & 8) = 0) set @SortOrder = @DefaultSortOrder

    return @SortOrder

END
GO

CREATE FUNCTION [dbo].[yaf_medal_gethide]
(
    @Hide bit,
    @Flags int
)
RETURNS bit
AS
BEGIN

    if ((@Flags & 4) = 0) set @Hide = 0

    return @Hide

END
GO

-- Gets the Thanks info which will be formatted and then placed in "dvThanksInfo" Div Tag in displaypost.ascx.
create function [dbo].[yaf_message_getthanksinfo]
(
@MessageID INT,
@ShowThanksDate bit
) returns VARCHAR(MAX)
BEGIN
    DECLARE @Output VARCHAR(MAX)
        SELECT @Output = COALESCE(@Output+',', '') + CAST(i.ThanksFromUserID AS varchar) + 
    CASE @ShowThanksDate WHEN 1 THEN ',' + CAST (i.ThanksDate AS varchar)  ELSE '' end
            FROM	[dbo].[yaf_Thanks] i
            WHERE	i.MessageID = @MessageID	ORDER BY i.ThanksDate
    -- Add the last comma if @Output has data.
    IF @Output <> ''
        SELECT @Output = @Output + ','
    RETURN @Output
END
GO

create function [dbo].[yaf_forum_save_parentschecker](@ForumID int, @ParentID int) returns int as

begin
-- Checks if the forum is already referenced as a parent 
    declare @dependency int
    declare @haschildren int
    declare @frmtmp int
    declare @prntmp int
    
    set @dependency = 0
    set @haschildren = 0
    
    select @dependency=ForumID from [dbo].[yaf_Forum] where ParentID=@ForumID AND ForumID = @ParentID;
    if @dependency > 0
    begin
    return @ParentID
    end

    if exists(select 1 from [dbo].[yaf_Forum] where ParentID=@ForumID)
        begin        
        declare c cursor for
        select ForumID,ParentID from [dbo].[yaf_Forum]
        where ParentID = @ForumID
        
        open c
        
        fetch next from c into @frmtmp,@prntmp
        while @@FETCH_STATUS = 0
        begin
        if @frmtmp > 0 AND @frmtmp IS NOT NULL
         begin        
            set @haschildren= [dbo].[yaf_forum_save_parentschecker](@frmtmp,@ParentID)            
            if  @prntmp = @ParentID
            begin
            set @dependency= @ParentID
            end    
            else if @haschildren > 0
            begin
            set @dependency= @haschildren
            end        
        end
        fetch next from c into @frmtmp,@prntmp
        end
        close c
        deallocate c    
    end
    return @dependency
end
GO

CREATE FUNCTION [dbo].[yaf_Split]
(
   @sInputList VARCHAR(8000) -- List of delimited items
  , @sDelimiter VARCHAR(8000) = ',' -- delimiter that separates items
) RETURNS @List TABLE (item VARCHAR(8000))

    BEGIN
    DECLARE @sItem VARCHAR(8000)
    WHILE CHARINDEX(@sDelimiter,@sInputList,0) <> 0
     BEGIN
     SELECT
      @sItem=RTRIM(LTRIM(SUBSTRING(@sInputList,1,CHARINDEX(@sDelimiter,@sInputList,0)-1))),
      @sInputList=RTRIM(LTRIM(SUBSTRING(@sInputList,CHARINDEX(@sDelimiter,@sInputList,0)+LEN(@sDelimiter),LEN(@sInputList))))
 
     IF LEN(@sItem) > 0
      INSERT INTO @List SELECT @sItem
     END

    IF LEN(@sInputList) > 0
     INSERT INTO @List SELECT @sInputList -- Put the last item in
    RETURN
    END
GO

--================================== INDEXES =========================================
if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_Membership_ApplicationID' and object_id=object_id(N'[dbo].[yaf_prov_Membership]'))
 CREATE  INDEX [IX_yaf_prov_Membership_ApplicationID] ON [dbo].[yaf_prov_Membership]([ApplicationID])
GO

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_Membership_Username' and object_id=object_id(N'[dbo].[yaf_prov_Membership]'))
 CREATE  INDEX [IX_yaf_prov_Membership_Username] ON [dbo].[yaf_prov_Membership]([Username])
GO

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_Membership_Email' and object_id=object_id(N'[dbo].[yaf_prov_Membership]'))
 CREATE  INDEX [IX_yaf_prov_Membership_Email] ON [dbo].[yaf_prov_Membership]([Email])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_Application_Name' and object_id=object_id(N'[dbo].[yaf_prov_Application]'))
 CREATE  INDEX [IX_yaf_prov_Application_Name] ON [dbo].[yaf_prov_Application]([ApplicationName])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_Role_Name' and object_id=object_id(N'[dbo].[yaf_prov_Role]'))
 CREATE  INDEX [IX_yaf_prov_Role_Name] ON [dbo].[yaf_prov_Role]([RoleName])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_Role_ApplicationID' and object_id=object_id(N'[dbo].[yaf_prov_Role]'))
 CREATE  INDEX [IX_yaf_prov_Role_ApplicationID] ON [dbo].[yaf_prov_Role]([ApplicationID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_RoleMembership_RoleID' and object_id=object_id(N'[dbo].[yaf_prov_RoleMembership]'))
 CREATE  INDEX [IX_yaf_prov_RoleMembership_RoleID] ON [dbo].[yaf_prov_RoleMembership]([RoleID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_prov_RoleMembership_UserID' and object_id=object_id(N'[dbo].[yaf_prov_RoleMembership]'))
 CREATE  INDEX [IX_yaf_prov_RoleMembership_UserID] ON [dbo].[yaf_prov_RoleMembership]([UserID])
go

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_prov_RoleMembership]') and name='PK_yaf_prov_RoleMembership')
	alter table [dbo].[yaf_prov_RoleMembership] with nocheck add constraint [PK_yaf_prov_RoleMembership] primary key clustered(RoleID,UserID)   
go

--================================== INDEXES =========================================

-- yaf_Buddy
if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Buddy_UserID' and object_id=object_id(N'[dbo].[yaf_Buddy]'))
	CREATE  INDEX [IX_yaf_Buddy_UserID] ON [dbo].[yaf_Buddy]([FromUserID],[ToUserID])
go

-- yaf_Registry

if exists(select top 1 1 from sys.indexes where name=N'IX_Name' and object_id=object_id(N'[dbo].[yaf_Registry]'))
	drop index [IX_Name] ON [dbo].[yaf_Registry]
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Registry_Name' and object_id=object_id(N'[dbo].[yaf_Registry]'))
	CREATE  INDEX [IX_yaf_Registry_Name] ON [dbo].[yaf_Registry]([BoardID],[Name])
go

-- yaf_PollVote

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_PollVote_RemoteIP' and object_id=object_id(N'[dbo].[yaf_PollVote]'))
 CREATE  INDEX [IX_yaf_PollVote_RemoteIP] ON [dbo].[yaf_PollVote]([RemoteIP])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_PollVote_UserID' and object_id=object_id(N'[dbo].[yaf_PollVote]'))
 CREATE  INDEX [IX_yaf_PollVote_UserID] ON [dbo].[yaf_PollVote]([UserID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_PollVote_PollID' and object_id=object_id(N'[dbo].[yaf_PollVote]'))
 CREATE  INDEX [IX_yaf_PollVote_PollID] ON [dbo].[yaf_PollVote]([PollID])
go

-- yaf_UserGroup

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_UserGroup_UserID' and object_id=object_id(N'[dbo].[yaf_UserGroup]'))
 CREATE  INDEX [IX_yaf_UserGroup_UserID] ON [dbo].[yaf_UserGroup]([UserID])
go

-- yaf_Message

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Message_TopicID' and object_id=object_id(N'[dbo].[yaf_Message]'))
 CREATE  INDEX [IX_yaf_Message_TopicID] ON [dbo].[yaf_Message]([TopicID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Message_UserID' and object_id=object_id(N'[dbo].[yaf_Message]'))
 CREATE  INDEX [IX_yaf_Message_UserID] ON [dbo].[yaf_Message]([UserID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Message_Flags' and object_id=object_id(N'[dbo].[yaf_Message]'))
 CREATE  INDEX [IX_yaf_Message_Flags] ON [dbo].[yaf_Message]([Flags])
go

IF  NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Message]') AND name = N'IX_yaf_Message_Posted_Desc')
CREATE NONCLUSTERED INDEX [IX_yaf_Message_Posted_Desc] ON [dbo].[yaf_Message] 
(
	[Posted] DESC
) ON [PRIMARY]
GO

-- yaf_Topic

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Topic_ForumID' and object_id=object_id(N'[dbo].[yaf_Topic]'))
 CREATE  INDEX [IX_yaf_Topic_ForumID] ON [dbo].[yaf_Topic]([ForumID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Topic_UserID' and object_id=object_id(N'[dbo].[yaf_Topic]'))
 CREATE  INDEX [IX_yaf_Topic_UserID] ON [dbo].[yaf_Topic]([UserID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Topic_Flags' and object_id=object_id(N'[dbo].[yaf_Topic]'))
 CREATE  INDEX [IX_yaf_Topic_Flags] ON [dbo].[yaf_Topic]([Flags])
go

-- yaf_Forum

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Forum_CategoryID' and object_id=object_id(N'[dbo].[yaf_Forum]'))
 CREATE  INDEX [IX_yaf_Forum_CategoryID] ON [dbo].[yaf_Forum]([CategoryID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Forum_ParentID' and object_id=object_id(N'[dbo].[yaf_Forum]'))
 CREATE  INDEX [IX_yaf_Forum_ParentID] ON [dbo].[yaf_Forum]([ParentID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Forum_Flags' and object_id=object_id(N'[dbo].[yaf_Forum]'))
 CREATE  INDEX [IX_yaf_Forum_Flags] ON [dbo].[yaf_Forum]([Flags])
go

-- yaf_User

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_User_FlagsNJoinded' and object_id=object_id(N'[dbo].[yaf_User]'))
 CREATE NONCLUSTERED INDEX [IX_yaf_User_FlagsNJoinded] ON [dbo].[yaf_User] ([BoardID]) INCLUDE ([UserID],[Joined],[Flags])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_User_Flags' and object_id=object_id(N'[dbo].[yaf_User]'))
 CREATE  INDEX [IX_yaf_User_Flags] ON [dbo].[yaf_User]([Flags])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_User_Joined' and object_id=object_id(N'[dbo].[yaf_User]'))
 CREATE  INDEX [IX_yaf_User_Joined] ON [dbo].[yaf_User]([Joined])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_User_ProviderUserKey' and object_id=object_id(N'[dbo].[yaf_User]'))
 CREATE  INDEX [IX_yaf_User_ProviderUserKey] ON [dbo].[yaf_User]([ProviderUserKey])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_User_Name' and object_id=object_id(N'[dbo].[yaf_User]'))
 CREATE  INDEX [IX_yaf_User_Name] ON [dbo].[yaf_User]([Name])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_User_UserStyle' and object_id=object_id(N'[dbo].[yaf_User]'))
 CREATE INDEX [IX_yaf_User_UserStyle] ON [dbo].[yaf_User]([UserStyle])
go

-- yaf_ForumAccess

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_ForumAccess_ForumID' and object_id=object_id(N'[dbo].[yaf_ForumAccess]'))
 CREATE  INDEX [IX_yaf_ForumAccess_ForumID] ON [dbo].[yaf_ForumAccess]([ForumID])
go

-- yaf_UserPMessage

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_UserPMessage_UserID' and object_id=object_id(N'[dbo].[yaf_UserPMessage]'))
 CREATE  INDEX [IX_yaf_UserPMessage_UserID] ON [dbo].[yaf_UserPMessage]([UserID])
go

-- yaf_Category

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Category_BoardID' and object_id=object_id(N'[dbo].[yaf_Category]'))
 CREATE  INDEX [IX_yaf_Category_BoardID] ON [dbo].[yaf_Category]([BoardID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_Category_Name' and object_id=object_id(N'[dbo].[yaf_Category]'))
 CREATE  INDEX [IX_yaf_Category_Name] ON [dbo].[yaf_Category]([Name])
go

-- yaf_FavoriteTopic

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_FavoriteTopic_TopicID' and object_id=object_id(N'[dbo].[yaf_FavoriteTopic]'))
 CREATE  INDEX [IX_yaf_FavoriteTopic_TopicID] ON [dbo].[yaf_FavoriteTopic]([TopicID])
go

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_FavoriteTopic_UserID' and object_id=object_id(N'[dbo].[yaf_FavoriteTopic]'))
 CREATE  INDEX [IX_yaf_FavoriteTopic_UserID] ON [dbo].[yaf_FavoriteTopic]([UserID])
go

-- yaf_UserAlbum

if not exists(select top 1 1 from sys.indexes where name=N'IX_yaf_UserAlbumImage_AlbumID' and object_id=object_id(N'[dbo].[yaf_UserAlbumImage]'))
 CREATE  INDEX [IX_yaf_UserAlbumImage_AlbumID] ON [dbo].[yaf_UserAlbumImage]([AlbumID])
go

-- yaf_Thanks

IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Thanks]') AND name = N'IX_yaf_Thanks_MessageID')
CREATE  INDEX [IX_yaf_Thanks_MessageID] ON [dbo].[yaf_Thanks] 
(
	[MessageID] ASC
)
GO

IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Thanks]') AND name = N'IX_yaf_Thanks_ThanksFromUserID')
CREATE  INDEX [IX_yaf_Thanks_ThanksFromUserID] ON [dbo].[yaf_Thanks] 
(
	[ThanksFromUserID] ASC
)
GO

IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Thanks]') AND name = N'IX_yaf_Thanks_ThanksToUserID')
CREATE  INDEX [IX_yaf_Thanks_ThanksToUserID] ON [dbo].[yaf_Thanks] 
(
	[ThanksToUserID] ASC
)
GO

IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_FavoriteTopic]') AND name = N'IX_yaf_FavoriteTopic_TopicID')
CREATE  INDEX [IX_yaf_FavoriteTopic_TopicID] ON [dbo].[yaf_FavoriteTopic] 
(
	[TopicID] ASC
)
GO

IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_FavoriteTopic]') AND name = N'IX_yaf_FavoriteTopic_UserID')
CREATE  INDEX [IX_yaf_FavoriteTopic_UserID] ON [dbo].[yaf_FavoriteTopic] 
(
	[UserID] ASC
)
GO

IF  NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Topic]') AND name = N'IX_yaf_Topic_LastPosted_Desc')
CREATE NONCLUSTERED INDEX [IX_yaf_Topic_LastPosted_Desc] ON [dbo].[yaf_Topic] 
(
	[LastPosted] DESC
) ON [PRIMARY]
GO

IF  NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Group]') AND name = N'IX_yaf_Group_SortOrder')
CREATE NONCLUSTERED INDEX [IX_yaf_Group_SortOrder] ON [dbo].[yaf_Group] 
(
	[SortOrder] ASC
) ON [PRIMARY]
GO

IF  NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_Group]') AND name = N'IX_yaf_Group_Style')
CREATE NONCLUSTERED INDEX [IX_yaf_Group_Style] ON [dbo].[yaf_Group] 
(
	[Style] ASC
) ON [PRIMARY]
GO

IF  NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_User]') AND name = N'IX_yaf_User_DisplayName')
CREATE NONCLUSTERED INDEX [IX_yaf_User_DisplayName] ON [dbo].[yaf_User] 
(
	[DisplayName] ASC
) ON [PRIMARY]
GO

--================================== PROCEDURES ======================================

-- =============================================
-- Membership Drop Procedures
-- =============================================
IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_upgrade]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_upgrade]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_CreateApplication]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_CreateApplication]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_changepassword]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_changepassword]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_changepasswordquestionandanswer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_changepasswordquestionandanswer]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_createuser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_createuser]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_deleteuser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_deleteuser]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_findusersbyemail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_findusersbyemail]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_findusersbyname]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_findusersbyname]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_getallusers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_getallusers]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_getnumberofusersonline]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_getnumberofusersonline]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_getuser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_getuser]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_getusernamebyemail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_getusernamebyemail]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_resetpassword]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_resetpassword]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_unlockuser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_unlockuser]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_updateuser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_updateuser]
GO

-- =============================================
-- Roles Drop Procedures
-- =============================================

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_list]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_delete]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_addusertorole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_addusertorole]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_createrole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_createrole]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_deleterole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_deleterole]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_findusersinrole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_findusersinrole]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_getroles]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_getroles]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_isuserinrole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_isuserinrole]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_removeuserfromrole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_removeuserfromrole]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_role_exists]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_role_exists]
GO

-- =============================================
-- Profiles Drop Procedures
-- =============================================

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_profile_deleteinactive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_profile_deleteinactive]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_profile_deleteprofiles]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_profile_deleteprofiles]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_profile_getprofiles]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_profile_getprofiles]
GO

IF  exists(select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_prov_profile_getnumberinactiveprofiles]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_prov_profile_getnumberinactiveprofiles]
GO

-- =============================================
-- Membership Create Procedures
-- =============================================

CREATE PROCEDURE [dbo].[yaf_prov_upgrade]
(
@PreviousVersion int,
@NewVersion int,
@UTCTIMESTAMP datetime
)
AS
BEGIN
    		IF (@PreviousVersion = 31) OR (@PreviousVersion = 32)
		BEGIN
			-- RESOLVE SALT ISSUE IN 193 BETA and RC2
			UPDATE [dbo].[yaf_prov_Membership] SET PasswordSalt='UwB5AHMAdABlAG0ALgBCAHkAdABlAFsAXQA=' WHERE PasswordSalt IS NOT NULL;
			UPDATE [dbo].[yaf_prov_Membership] SET Joined=@UTCTIMESTAMP  WHERE Joined IS NULL;
		END	
END 
GO


CREATE PROCEDURE [dbo].[yaf_prov_CreateApplication]
(
@ApplicationName nvarchar(256),
@ApplicationID uniqueidentifier OUTPUT
)
AS
BEGIN
    	SET @ApplicationID = (SELECT ApplicationID FROM [dbo].[yaf_prov_Application] WHERE ApplicationNameLwd=LOWER(@ApplicationName))
	
	IF (@ApplicationID IS Null)
	BEGIN
		    SELECT  @ApplicationID = NEWID()
            INSERT  [dbo].[yaf_prov_Application] (ApplicationID, ApplicationName, ApplicationNameLwd)
            VALUES  (@ApplicationID, @ApplicationName, LOWER(@ApplicationName))
    END
END 
GO

CREATE PROCEDURE [dbo].[yaf_prov_changepassword]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Password nvarchar(256),
@PasswordSalt nvarchar(256),
@PasswordFormat nvarchar(256),
@PasswordAnswer nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET [Password]=@Password, PasswordSalt=@PasswordSalt,
		PasswordFormat=@PasswordFormat, PasswordAnswer=@PasswordAnswer
	WHERE UsernameLwd=LOWER(@UserName) and ApplicationID=@ApplicationID;

END
GO

CREATE PROCEDURE [dbo].[yaf_prov_changepasswordquestionandanswer]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@PasswordQuestion nvarchar(256),
@PasswordAnswer nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET PasswordQuestion=@PasswordQuestion, PasswordAnswer=@PasswordAnswer
	WHERE UsernameLwd=LOWER(@UserName) and ApplicationID=@ApplicationID;

END
GO

CREATE PROCEDURE [dbo].[yaf_prov_createuser]
(
@ApplicationName nvarchar(256),
@Username nvarchar(256),
@Password nvarchar(256),
@PasswordSalt nvarchar(256) = null,
@PasswordFormat nvarchar(256) = null,
@Email nvarchar(256) = null,
@PasswordQuestion nvarchar(256) = null,
@PasswordAnswer nvarchar(256) = null,
@IsApproved bit = null,
@UTCTIMESTAMP datetime,
@UserKey nvarchar(64) = null out
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	IF @UserKey IS NULL
		SET @UserKey = NEWID()
		
	INSERT INTO [dbo].[yaf_prov_Membership] (UserID,ApplicationID,Joined,Username,UsernameLwd,[Password],PasswordSalt,PasswordFormat,Email,EmailLwd,PasswordQuestion,PasswordAnswer,IsApproved)
		VALUES (@UserKey, @ApplicationID, @UTCTIMESTAMP ,@Username, LOWER(@Username), @Password, @PasswordSalt, @PasswordFormat, @Email, LOWER(@Email), @PasswordQuestion, @PasswordAnswer, @IsApproved);
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_deleteuser]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@DeleteAllRelated bit
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier, @UserID nvarchar(64)
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	-- get the userID
	SELECT @UserID = UserID FROM [dbo].[yaf_prov_Membership] WHERE ApplicationID = @ApplicationID AND UsernameLwd = LOWER(@UserName);

	IF (@UserID IS NOT NULL)
	BEGIN
		-- Delete records from membership
		DELETE FROM [dbo].[yaf_prov_Membership] WHERE UserID = @UserID
		-- Delete from Role table
		DELETE FROM [dbo].[yaf_prov_RoleMembership] WHERE UserID = @UserID
		-- Delete from Profile table
		DELETE FROM [dbo].[yaf_prov_Profile] WHERE UserID = @UserID
	END	
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_findusersbyemail]
(
@ApplicationName nvarchar(256),
@EmailAddress nvarchar(256),
@PageIndex int,
@PageSize int
)
AS
BEGIN
    
    -- Set the page bounds
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DECLARE @PagingLowerBoundary int
    DECLARE @PagingUpperBoundary int
    DECLARE @TotalRecords   int
    SET @PagingLowerBoundary = @PageSize * @PageIndex
    SET @PagingUpperBoundary = @PageSize - 1 + @PagingLowerBoundary
    
	CREATE TABLE #RowNumber (RowNumber int IDENTITY (1, 1), UserID nvarchar(64) collate database_default)
	
	INSERT INTO #RowNumber (UserID) SELECT m.UserID FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID  WHERE a.ApplicationID = @ApplicationID AND m.EmailLwd = LOWER(@EmailAddress)

	SELECT m.*, r.RowNumber FROM [dbo].[yaf_prov_Membership] m INNER JOIN #RowNumber r ON m.UserID = r.UserID WHERE r.RowNumber >= @PagingLowerBoundary AND r.RowNumber <= @PagingUpperBoundary;
    
	SET @TotalRecords = (SELECT COUNT(RowNumber) FROM #RowNumber)
	DROP TABLE #RowNumber
	RETURN @TotalRecords
   
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_findusersbyname]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@PageIndex int,
@PageSize int
)
AS
BEGIN
    
    -- Set the page bounds
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DECLARE @PagingLowerBoundary int
    DECLARE @PagingUpperBoundary int
    DECLARE @TotalRecords   int
    SET @PagingLowerBoundary = @PageSize * @PageIndex
    SET @PagingUpperBoundary = @PageSize - 1 + @PagingLowerBoundary
    
	CREATE TABLE #RowNumber (RowNumber int IDENTITY (1, 1),  UserID nvarchar(64) collate database_default)
	
	INSERT INTO #RowNumber (UserID) SELECT m.UserID FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID WHERE a.ApplicationID = @ApplicationID AND m.UsernameLwd LIKE '%' + LOWER(@UserName) + '%'

	SELECT m.*, r.RowNumber FROM [dbo].[yaf_prov_Membership] m INNER JOIN #RowNumber r ON m.UserID = r.UserID WHERE r.RowNumber >= @PagingLowerBoundary AND r.RowNumber <= @PagingUpperBoundary;
    
	SET @TotalRecords = (SELECT COUNT(RowNumber) FROM #RowNumber)
	DROP TABLE #RowNumber
	RETURN @TotalRecords
   
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_getallusers]
(
@ApplicationName nvarchar(256),
@PageIndex int,
@PageSize int
)
AS
BEGIN
    
    -- Set the page bounds
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DECLARE @PagingLowerBoundary int
    DECLARE @PagingUpperBoundary int
    DECLARE @TotalRecords   int
    SET @PagingLowerBoundary = @PageSize * @PageIndex
    SET @PagingUpperBoundary = @PageSize - 1 + @PagingLowerBoundary
    
	CREATE TABLE #RowNumber (RowNumber int IDENTITY (1, 1),  UserID nvarchar(64) collate database_default)
	
	INSERT INTO #RowNumber (UserID) SELECT m.UserID FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID WHERE a.ApplicationID = @ApplicationID

	SELECT m.*, r.RowNumber FROM [dbo].[yaf_prov_Membership] m INNER JOIN #RowNumber r ON m.UserID = r.UserID WHERE r.RowNumber >= @PagingLowerBoundary AND r.RowNumber <= @PagingUpperBoundary;
    
	SET @TotalRecords = (SELECT COUNT(RowNumber) FROM #RowNumber)
	DROP TABLE #RowNumber
	RETURN @TotalRecords
   
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_getnumberofusersonline]
(
@ApplicationName nvarchar(256),
@TimeWindow int,
@CurrentTimeUtc DateTime
)
AS
BEGIN
    	DECLARE @ActivityDate DateTime
	SET @ActivityDate = DATEADD(n, - @TimeWindow, @CurrentTimeUtc)

	DECLARE @ApplicationID uniqueidentifier
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	DECLARE @NumberActive int
	SET @NumberActive = (SELECT COUNT(1) FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID  WHERE a.ApplicationID = @ApplicationID AND m.LastLogin >= @ActivityDate)
    
    RETURN @NumberActive

END
GO

CREATE PROCEDURE [dbo].[yaf_prov_getuser]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256) = null,
@UserKey nvarchar(64) = null,
@UserIsOnline bit,
@UTCTIMESTAMP datetime
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	IF (@UserKey IS NULL)
		SELECT m.* FROM [dbo].[yaf_prov_Membership] m WHERE m.UsernameLwd = LOWER(@UserName) and m.ApplicationID = @ApplicationID
	ELSE
		SELECT m.* FROM [dbo].[yaf_prov_Membership] m WHERE m.UserID = @UserKey and m.ApplicationID = @ApplicationID
	
	-- IF USER IS ONLINE DO AN UPDATE USER	
	IF (@UserIsOnline = 1)
	BEGIN
		UPDATE [dbo].[yaf_prov_Membership] SET LastActivity = @UTCTIMESTAMP  WHERE UsernameLwd = LOWER(@UserName) and ApplicationID = @ApplicationID
	END		
END
GO


CREATE PROCEDURE [dbo].[yaf_prov_getusernamebyemail]
(
@ApplicationName nvarchar(256),
@Email nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SELECT m.Username FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_Application] a ON m.ApplicationID = a.ApplicationID  WHERE a.ApplicationID = @ApplicationID AND m.EmailLwd = LOWER(@Email);
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_resetpassword]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Password nvarchar(256),
@PasswordSalt nvarchar(256),
@PasswordFormat nvarchar(256),
@MaxInvalidAttempts int,
@PasswordAttemptWindow int,
@CurrentTimeUtc datetime
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET
	[Password] = @Password,
	PasswordSalt = @PasswordSalt,
	PasswordFormat = @PasswordFormat,
	LastPasswordChange = @CurrentTimeUtc
	WHERE ApplicationID = @ApplicationID AND
	UsernameLwd = LOWER(@UserName);

END
GO


CREATE PROCEDURE [dbo].[yaf_prov_unlockuser]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	UPDATE [dbo].[yaf_prov_Membership] SET
	IsLockedOut = 0,
	FailedPasswordAttempts = 0
	WHERE ApplicationID = @ApplicationID AND
	UsernameLwd = LOWER(@UserName);

END
GO
                
CREATE PROCEDURE [dbo].[yaf_prov_updateuser]
(
@ApplicationName nvarchar(256),
@UserKey nvarchar(64),
@UserName nvarchar(256),
@Email nvarchar(256),
@Comment text,
@IsApproved bit,
@LastLogin datetime,
@LastActivity datetime,
@UniqueEmail bit
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
		-- Check UserKey
	IF (@UserKey IS NULL)
        RETURN(1) -- 

	-- Check for UniqueEmail
	IF (@UniqueEmail = 1)
	BEGIN
		IF (EXISTS (SELECT 1 FROM [dbo].[yaf_prov_Membership] m WHERE m.UserID != @UserKey AND m.EmailLwd=LOWER(@Email) AND m.ApplicationID=@ApplicationID) )
			RETURN (2)
	END
	
	UPDATE [dbo].[yaf_prov_Membership] SET
	Username = @UserName,
	UsernameLwd = LOWER(@UserName),
	Email = @Email,
	EmailLwd = LOWER(@Email),
	IsApproved = @IsApproved,
	LastLogin = @LastLogin,
	LastActivity = @LastActivity,
	Comment = @Comment
	WHERE ApplicationID = @ApplicationID AND
	UserID = @UserKey;

	-- Return successful
	RETURN(0)
END
GO                 

-- =============================================
-- Roles Create Procedures
-- =============================================

CREATE PROCEDURE [dbo].[yaf_prov_role_addusertorole]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
	DECLARE @UserID nvarchar(64)
	DECLARE @RoleID uniqueidentifier
	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SET @UserID = (SELECT UserID FROM [dbo].[yaf_prov_Membership] m WHERE m.UsernameLwd=LOWER(@UserName) AND m.ApplicationID = @ApplicationID)
	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r WHERE r.RoleNameLwd=LOWER(@Rolename) AND r.ApplicationID = @ApplicationID)

	IF (@UserID IS NULL OR @RoleID IS NULL)
		RETURN;
	
	IF (NOT EXISTS(SELECT 1 FROM [dbo].[yaf_prov_RoleMembership] rm WHERE rm.UserID=@UserID AND rm.RoleID=@RoleID))
		INSERT INTO [dbo].[yaf_prov_RoleMembership] (RoleID, UserID) VALUES (@RoleID, @UserID);
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_role_deleterole]
(
@ApplicationName nvarchar(256),
@Rolename nvarchar(256),
@DeleteOnlyIfRoleIsEmpty bit
)
AS
BEGIN
    	DECLARE @RoleID uniqueidentifier
	DECLARE @ErrorCode int
	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT	
	
	SET @ErrorCode = 0
	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r WHERE r.RoleNameLwd=LOWER(@Rolename) AND r.ApplicationID = @ApplicationID)
	
	IF (@DeleteOnlyIfRoleIsEmpty <> 0)
	BEGIN
		IF (EXISTS (SELECT 1 FROM [dbo].[yaf_prov_RoleMembership] rm WHERE rm.RoleID=@RoleID))
			SELECT @ErrorCode = 2
	ELSE
		DELETE FROM [dbo].[yaf_prov_RoleMembership] WHERE RoleID=@RoleID
	END	

	IF (@ErrorCode = 0)
		DELETE FROM [dbo].[yaf_prov_Role] WHERE RoleID=@RoleID
    
    RETURN @ErrorCode	
END 
GO


CREATE PROCEDURE [dbo].[yaf_prov_role_findusersinrole]
(
@ApplicationName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @RoleID uniqueidentifier
	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r INNER JOIN [dbo].[yaf_prov_Application] a ON r.ApplicationID = a.ApplicationID WHERE r.RoleNameLwd=LOWER(@Rolename) AND a.ApplicationID = @ApplicationID)

	SELECT m.* FROM [dbo].[yaf_prov_Membership] m INNER JOIN [dbo].[yaf_prov_RoleMembership] rm ON m.UserID = rm.UserID WHERE rm.RoleID = @RoleID
		
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_role_createrole]
(
@ApplicationName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	IF (NOT EXISTS(SELECT 1 FROM [dbo].[yaf_prov_Role] r WHERE r.ApplicationID = @ApplicationID AND r.RoleNameLwd = LOWER(@Rolename)))
		INSERT INTO [dbo].[yaf_prov_Role] (RoleID, ApplicationID, RoleName, RoleNameLwd) VALUES (NEWID(),@ApplicationID, @Rolename,LOWER(@Rolename));		
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_role_getroles]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256) = null
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
	
 	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	IF (@UserName is null)
		SELECT r.* FROM [dbo].[yaf_prov_Role] r WHERE r.ApplicationID = @ApplicationID
	ELSE
		SELECT
			r.*
		FROM
			[dbo].[yaf_prov_Role] r
		INNER JOIN
			[dbo].[yaf_prov_RoleMembership] rm ON r.RoleID = rm.RoleID
		INNER JOIN
			[dbo].[yaf_prov_Membership] m ON m.UserID = rm.UserID
		WHERE
			r.ApplicationID  = @ApplicationID
			AND m.UsernameLwd = LOWER(@UserName)
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_role_isuserinrole]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

	SELECT m.* FROM [dbo].[yaf_prov_RoleMembership] rm 
		INNER JOIN [dbo].[yaf_prov_Membership] m ON rm.UserID = m.UserID
		INNER JOIN [dbo].[yaf_prov_Role] r ON rm.RoleID = r.RoleID
		WHERE m.UsernameLwd=LOWER(@UserName) AND r.RoleNameLwd =LOWER(@Rolename) AND r.ApplicationID = @ApplicationID;
END 
GO

CREATE PROCEDURE [dbo].[yaf_prov_role_removeuserfromrole]
(
@ApplicationName nvarchar(256),
@UserName nvarchar(256),
@Rolename nvarchar(256)
)
AS
BEGIN
    	DECLARE @UserID nvarchar(64)
	DECLARE @RoleID uniqueidentifier
	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT	
	
	SET @RoleID = (SELECT RoleID FROM [dbo].[yaf_prov_Role] r WHERE r.RoleNameLwd = LOWER(@Rolename) AND r.ApplicationID = @ApplicationID)
	SET @UserID = (SELECT UserID FROM [dbo].[yaf_prov_Membership] m WHERE m.UsernameLwd=LOWER(@UserName) AND m.ApplicationID = @ApplicationID)
	
	DELETE FROM [dbo].[yaf_prov_RoleMembership] WHERE RoleID = @RoleID AND UserID=@UserID
	
END 
GO

CREATE PROCEDURE [dbo].[yaf_prov_role_exists]
(
@ApplicationName nvarchar(256),
@RoleName nvarchar(256)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT
	
	SELECT COUNT(1) FROM [dbo].[yaf_prov_Role]
		WHERE RoleNameLwd = LOWER(@RoleName) AND ApplicationID = @ApplicationID
END 
GO

-- =============================================
-- Profiles Create Procedures
-- =============================================

CREATE PROCEDURE [dbo].[yaf_prov_profile_deleteinactive]
(
@ApplicationName nvarchar(256),
@InactiveSinceDate datetime
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    DELETE
    FROM    [dbo].[yaf_prov_Profile]
    WHERE   UserID IN
            (   SELECT  UserID
                FROM    [dbo].[yaf_prov_Membership] m
                WHERE   ApplicationID = @ApplicationID
                        AND (LastActivity <= @InactiveSinceDate)
            )

    SELECT  @@ROWCOUNT
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_profile_deleteprofiles]
(
@ApplicationName nvarchar(256),
@UserNames nvarchar(4000)
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0

			DELETE FROM [dbo].[yaf_prov_Profile] WHERE UserID IN (SELECT UserID FROM [dbo].[yaf_prov_Membership] WHERE UsernameLwd = LOWER(@UserName) AND ApplicationID = @ApplicationID)

            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Error
            END
            IF (@@ROWCOUNT <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END

    SELECT @NumDeleted

    RETURN 0

Error:

    RETURN @ErrorCode
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_profile_getprofiles]
(
	@ApplicationName        nvarchar(256),
	@PageIndex              int,
	@PageSize               int,
	@UserNameToMatch        nvarchar(256) = NULL,
	@InactiveSinceDate      datetime      = NULL
)
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexID int IDENTITY (0, 1) NOT NULL,
        UserID nvarchar(64) collate database_default
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserID)
        SELECT  m.UserID
        FROM    [dbo].[yaf_prov_Membership] m, [dbo].[yaf_prov_Profile] p
        WHERE   ApplicationID = @ApplicationID
            AND m.UserID = p.UserID
            AND (@InactiveSinceDate IS NULL OR LastActivity <= @InactiveSinceDate)
            AND (@UserNameToMatch IS NULL OR m.UsernameLwd LIKE LOWER(@UserNameToMatch))
        ORDER BY Username


    SELECT  m.Username, m.LastActivity, p.*
    FROM    [dbo].[yaf_prov_Membership] m, [dbo].[yaf_prov_Profile] p, #PageIndexForUsers i
    WHERE   m.UserId = p.UserId AND p.UserId = i.UserID AND i.IndexID >= @PageLowerBound AND i.IndexID <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO

CREATE PROCEDURE [dbo].[yaf_prov_profile_getnumberinactiveprofiles]
    @ApplicationName        nvarchar(256),
    @InactiveSinceDate      datetime
AS
BEGIN
    	DECLARE @ApplicationID uniqueidentifier

	EXEC [dbo].[yaf_prov_CreateApplication] @ApplicationName, @ApplicationID OUTPUT

    SELECT  COUNT(*)
    FROM    [dbo].[yaf_prov_Membership] m, [dbo].[yaf_prov_Profile] p
    WHERE   ApplicationID = @ApplicationID
        AND m.UserID = p.UserID
        AND (LastActivity <= @InactiveSinceDate)
END
GO

--================================== PROCEDURES ======================================

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_exampleserverversion]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_exampleserverversion]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_db_handle_computedcolumns]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_db_handle_computedcolumns]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_adminpageaccess_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_adminpageaccess_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_adminpageaccess_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_adminpageaccess_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_adminpageaccess_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_adminpageaccess_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_eventloggroupaccess_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_eventloggroupaccess_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_eventloggroupaccess_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_eventloggroupaccess_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_eventloggroupaccess_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_eventloggroupaccess_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_savestyle]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_savestyle]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_unanswered]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_unanswered]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_unread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_unread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_update_single_sign_on_status]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_update_single_sign_on_status]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_updatefacebookstatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_updatefacebookstatus]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_move]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_move]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_User_ListTodaysBirthdays]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_User_ListTodaysBirthdays]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_TopicStatus_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_TopicStatus_Delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_TopicStatus_Edit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_TopicStatus_Edit]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_TopicStatus_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_TopicStatus_List]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_TopicStatus_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_TopicStatus_Save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topics_byuser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topics_byuser]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_readtopic_addorupdate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_readtopic_addorupdate]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_readtopic_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_readtopic_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_readtopic_lastread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_readtopic_lastread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_readforum_addorupdate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_readforum_addorupdate]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_readforum_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_readforum_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_readforum_lastread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_readforum_lastread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_lastread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_lastread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_recent_users]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_recent_users]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_thankfromcount]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_thankfromcount]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_repliedtopic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_repliedtopic]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_thankedmessage]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_thankedmessage]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_accessmask_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_accessmask_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_accessmask_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_accessmask_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_accessmask_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_accessmask_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_active_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_active_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_active_listforum]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_active_listforum]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_active_listtopic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_active_listtopic]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_active_stats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_active_stats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_activeaccess_reset]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_activeaccess_reset]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_active_updatemaxstats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_active_updatemaxstats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_attachment_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_attachment_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_attachment_download]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_attachment_download]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_attachment_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_attachment_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_attachment_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_attachment_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedip_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedip_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedip_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedip_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedip_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedip_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedname_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedname_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedname_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedname_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedname_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedname_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedemail_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedemail_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedemail_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedemail_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bannedemail_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_bannedemail_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_create]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_create]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_poststats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_poststats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_userstats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_userstats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_resync]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_resync]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_setguid]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_setguid]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_board_stats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_board_stats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_category_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_category_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_category_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_category_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_category_listread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_category_listread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_category_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_category_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_checkemail_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_checkemail_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_checkemail_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_checkemail_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_checkemail_update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_checkemail_update]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_choice_add]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_choice_add]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_choice_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_choice_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_choice_update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_choice_update]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_choice_vote]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_choice_vote]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_eventlog_create]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_eventlog_create]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_eventlog_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_eventlog_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_eventlog_deletebyuser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_eventlog_deletebyuser]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_eventlog_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_eventlog_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_extension_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_extension_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_extension_edit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_extension_edit]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_extension_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_extension_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_extension_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_extension_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_maxid]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_maxid]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_listall]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_listall]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_listall_fromcat]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_listall_fromcat]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_listallmymoderated]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_listallmymoderated]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_listpath]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_listpath]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_listread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_listread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_listSubForums]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_listSubForums]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_listtopics]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_listtopics]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_moderatelist]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_moderatelist]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_moderators]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_moderators]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_moderators_team_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_moderators_team_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_resync]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_resync]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_updatelastpost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_updatelastpost]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forum_updatestats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_updatestats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forumaccess_group]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forumaccess_group]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forumaccess_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forumaccess_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_forumaccess_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forumaccess_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_eventlogaccesslist]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_eventlogaccesslist]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_medal_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_medal_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_medal_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_medal_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_medal_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_medal_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_member]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_member]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_group_rank_style]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_group_rank_style]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_mail_create]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_mail_create]
GO

IF  exists (select top 1 1 from sys.objects where object_id = OBJECT_ID(N'[dbo].[yaf_mail_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_mail_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_mail_createwatch]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_mail_createwatch]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_mail_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_mail_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_mail_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_mail_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_medal_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_medal_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_listusers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_medal_listusers]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_resort]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_medal_resort]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_medal_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_medal_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_approve]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_approve]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_findunread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_findunread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_getReplies]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_getReplies]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_listreported]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_listreported]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_listreporters]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_listreporters]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_report]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_report]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_reportcopyover]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_reportcopyover]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_reportresolve]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_reportresolve]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_secdata]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_secdata]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_unapproved]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_unapproved]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_update]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntpforum_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntpforum_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntpforum_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntpforum_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntpforum_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntpforum_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntpforum_update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntpforum_update]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntpserver_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntpserver_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntpserver_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntpserver_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntpserver_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntpserver_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntptopic_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntptopic_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_nntptopic_savemessage]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_nntptopic_savemessage]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pageaccess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pageaccess]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pageaccess_path]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pageaccess_path]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pageload]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pageload]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pmessage_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pmessage_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pmessage_info]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pmessage_info]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pmessage_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pmessage_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pmessage_markread]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pmessage_markread]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pmessage_prune]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pmessage_prune]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pmessage_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pmessage_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pmessage_archive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pmessage_archive]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_poll_remove]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_poll_remove]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollgroup_attach]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pollgroup_attach]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollgroup_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pollgroup_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollgroup_remove]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pollgroup_remove]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_poll_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_poll_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_poll_stats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_poll_stats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollgroup_stats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pollgroup_stats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_poll_update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_poll_update]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollvote_check]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pollvote_check]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_pollgroup_votecheck]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_pollgroup_votecheck]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_post_last10user]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_post_last10user]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_post_alluser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_post_alluser]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_post_alluser_simple]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_post_alluser_simple]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_post_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_post_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_post_list_reverse10]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_post_list_reverse10]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_rank_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_rank_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_rank_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_rank_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_rank_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_rank_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_registry_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_registry_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_registry_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_registry_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_replace_words_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_replace_words_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_replace_words_edit]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_replace_words_edit]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_replace_words_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_replace_words_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_replace_words_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_replace_words_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_spam_words_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_spam_words_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_spam_words_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_spam_words_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_spam_words_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_spam_words_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_smiley_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_smiley_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_smiley_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_smiley_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_smiley_listunique]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_smiley_listunique]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_smiley_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_smiley_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_smiley_resort]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_smiley_resort]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_system_initialize]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_system_initialize]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_system_updateversion]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_system_updateversion]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_active]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_findduplicate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_findduplicate]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_findnext]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_findnext]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_findprev]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_findprev]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_info]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_info]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_announcements]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_announcements]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_latest]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_latest]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_latest_in_category]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_latest_in_category]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_rss_topic_latest]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_rss_topic_latest]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_rsstopic_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_rsstopic_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_announcements_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_announcements_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_listmessages]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_listmessages]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_deleteattachements]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_deleteattachements]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_lock]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_lock]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_move]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_move]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_poll_update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_poll_update]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_prune]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_prune]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_updatelastpost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_updatelastpost]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_updatetopic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_updatetopic]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_accessmasks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_accessmasks]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_activity_rank]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_activity_rank]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_addpoints]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_addpoints]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_adminsave]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_adminsave]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_approve]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_approve]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_approveall]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_approveall]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_aspnet]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_aspnet]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_migrate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_migrate]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_avatarimage]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_avatarimage]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_changepassword]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_changepassword]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_pmcount]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_pmcount]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_deleteavatar]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_deleteavatar]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_deleteold]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_deleteold]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_emails]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_emails]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_find]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_find]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_getpoints]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_getpoints]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_getsignature]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_getsignature]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_guest]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_guest]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_admin_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_admin_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_admin_pageaccesslist]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_admin_pageaccesslist]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_listmembers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_listmembers]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_listmedals]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_listmedals]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_login]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_login]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_medal_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_medal_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_medal_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_medal_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_medal_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_medal_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_nntp]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_nntp]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_recoverpassword]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_recoverpassword]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_removepoints]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_removepoints]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_removepointsbytopicid]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_removepointsbytopicid]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_resetpoints]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_resetpoints]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_savenotification]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_savenotification]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_saveavatar]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_saveavatar]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_savepassword]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_savepassword]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_savesignature]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_savesignature]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_setnotdirty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_setnotdirty]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_setpoints]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_setpoints]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_setrole]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_setrole]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_suspend]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_suspend]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_upgrade]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_upgrade]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_userforum_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_userforum_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_userforum_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_userforum_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_userforum_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_userforum_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_usergroup_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_usergroup_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_usergroup_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_usergroup_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_userpmessage_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_userpmessage_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_userpmessage_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_userpmessage_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchforum_add]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchforum_add]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchforum_check]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchforum_check]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchforum_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchforum_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchforum_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchforum_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchtopic_add]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchtopic_add]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchtopic_check]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchtopic_check]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchtopic_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchtopic_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_watchtopic_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_watchtopic_list]
GO

IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_reply_list]') and OBJECTPROPERTY(object_id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[yaf_message_reply_list]
GO

IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_deleteundelete]') and OBJECTPROPERTY(object_id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[yaf_message_deleteundelete]
GO

IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_create_by_message]') and OBJECTPROPERTY(object_id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[yaf_topic_create_by_message]
GO

IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_move]') and OBJECTPROPERTY(object_id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[yaf_message_move]
GO

IF exists (select top 1 1 from sys.objects
           WHERE  object_id = Object_id(N'[dbo].[yaf_category_simplelist]')
           AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_category_simplelist] 
GO

IF EXISTS (select top 1 1 from sys.objects
           WHERE  object_id = Object_id(N'[dbo].[yaf_forum_simplelist]')
           AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_forum_simplelist] 
GO

IF EXISTS (select top 1 1 from sys.objects
           WHERE  object_id = Object_id(N'[dbo].[yaf_message_simplelist]')
           AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_simplelist] 
GO

IF EXISTS (select top 1 1 from sys.objects
           WHERE  object_id = Object_id(N'[dbo].[yaf_topic_simplelist]')
           AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_simplelist] 
GO

IF EXISTS (select top 1 1 from sys.objects
           WHERE  object_id = Object_id(N'[dbo].[yaf_topic_similarlist]')
           AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_similarlist] 
GO

IF EXISTS (select top 1 1 from sys.objects
           WHERE  object_id = Object_id(N'[dbo].[yaf_user_simplelist]')
           AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_simplelist] 
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bbcode_delete]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_bbcode_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bbcode_list]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_bbcode_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_bbcode_save]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_bbcode_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_addignoreduser]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_user_addignoreduser]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_removeignoreduser]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_user_removeignoreduser]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_isuserignored]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_user_isuserignored]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_ignoredlist]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_user_ignoredlist]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_shoutbox_getmessages]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_shoutbox_getmessages]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_shoutbox_savemessage]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_shoutbox_savemessage]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_shoutbox_clearmessages]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[yaf_shoutbox_clearmessages]
GO

/* These stored procedures are for the Thanks Table. For safety, first check to see if they exist. If so, drop them. */
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_addthanks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_addthanks]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_getthanks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_getthanks]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_getallthanks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_getallthanks]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_removethanks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_removethanks]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_thanksnumber]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_thanksnumber]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_getthanks_from]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_getthanks_from]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_getthanks_to]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_getthanks_to]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_active_list_user]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_active_list_user]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_viewallthanks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_viewallthanks]
GO

/* End of Thanks table stored procedures */
 
/* Buddy feature stored procedures */
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_buddy_addrequest]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_buddy_addrequest]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_buddy_approverequest]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_buddy_approverequest]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_buddy_denyrequest]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_buddy_denyrequest]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_buddy_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_buddy_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_buddy_remove]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_buddy_remove]
GO
/* End of Buddy feature stored procedures */

/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_add]    Script Date: 12/08/2009 18:13:19 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_favorite_add]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_favorite_add]
GO

/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_details]    Script Date: 12/08/2009 18:13:20 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_favorite_details]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_favorite_details]
GO

/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_list]    Script Date: 12/08/2009 18:13:20 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_favorite_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_favorite_list]
GO

/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_list]    Script Date: 12/08/2009 18:13:20 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_favorite_count]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_favorite_count]
GO

/****** Object:  StoredProcedure [dbo].[yaf_topic_favorite_remove]    Script Date: 12/08/2009 18:13:20 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_topic_favorite_remove]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_topic_favorite_remove]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_save]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_gettitle]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_gettitle]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_getstats]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_getstats]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_image_save]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_image_save]
Go

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_image_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_image_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_images_by_user]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_images_by_user]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_image_delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_image_delete]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_album_image_download]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_album_image_download]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_getsignaturedata]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_getsignaturedata]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_getalbumsdata]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_getalbumsdata]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_messagehistory_list]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_messagehistory_list]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_user_lazydata]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_user_lazydata]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_gettextbyids]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_gettextbyids]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_message_GetTextByIds]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_message_GetTextByIds]
GO

IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_init_styles]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[yaf_init_styles]
GO

/*****************************************************************************************************************************/
/***** BEGIN CREATE PROCEDURES ******/
/*****************************************************************************************************************************/

/* Procedures for "Thanks" Mod */
CREATE PROCEDURE [dbo].[yaf_message_addthanks] 
    @FromUserID int,
    @MessageID int,
    @UTCTIMESTAMP datetime,
    @UseDisplayName bit=0,
    @paramOutput nvarchar(255) = null out
AS
BEGIN
IF not exists (SELECT top 1 ThanksID FROM [dbo].[yaf_Thanks] WHERE (MessageID = @MessageID AND ThanksFromUserID=@FromUserID))
BEGIN
DECLARE @ToUserID int
    SET @ToUserID = (SELECT UserID FROM [dbo].[yaf_Message] WHERE (MessageID = @MessageID))
    INSERT INTO [dbo].[yaf_Thanks] (ThanksFromUserID, ThanksToUserID, MessageID, ThanksDate) Values 
                                (@FromUserID, @ToUserId, @MessageID, @UTCTIMESTAMP )
    
    IF @UseDisplayName = 1
            SET @paramOutput = (SELECT [DisplayName] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
    ELSE
            SET @paramOutput = (SELECT [Name] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
END
ELSE
    SET @paramOutput = ''
END
GO

CREATE PROCEDURE [dbo].[yaf_message_getthanks] 
    @MessageID int
AS
BEGIN
    SELECT a.ThanksFromUserID as UserID, a.ThanksDate, b.Name, b.DisplayName
    FROM [dbo].[yaf_Thanks] a 
    Inner Join [dbo].[yaf_User] b
    ON (a.ThanksFromUserID = b.UserID) WHERE (MessageID=@MessageID)
    ORDER BY a.ThanksDate DESC
END
GO

CREATE PROCEDURE [dbo].[yaf_message_getallthanks] 
    @MessageIDs varchar(max)
AS
BEGIN
-- vzrus says: the server version > 2000 ntext works too slowly with substring in the 2005 
DECLARE @ParsedMessageIDs TABLE
      (
            MessageID int
      )
      
DECLARE @MessageID varchar(11), @Pos INT      

SET @Pos = CHARINDEX(',', @MessageIDs, 1)
-- check here if the value is not empty
IF REPLACE(@MessageIDs, ',', '') <> ''
BEGIN
 WHILE @Pos > 0
                  BEGIN
                        SET @MessageID = LTRIM(RTRIM(LEFT(@MessageIDs, @Pos - 1)))
                        IF @MessageID <> ''
                        BEGIN
                              INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageID AS int)) --Use Appropriate conversion
                        END
                        SET @MessageIDs = RIGHT(@MessageIDs, LEN(@MessageIDs) - @Pos)
                        SET @Pos = CHARINDEX(',', @MessageIDs, 1)
                  END
                     -- to be sure that last value is inserted
                    IF (LEN(@MessageIDs) > 0)
                           INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageIDs AS int)) 
END 
    SELECT a.MessageID, b.ThanksFromUserID AS FromUserID, b.ThanksDate,
    (SELECT COUNT(ThanksID) FROM [dbo].[yaf_Thanks] b WHERE b.ThanksFromUserID=d.UserID) AS ThanksFromUserNumber,
    (SELECT COUNT(ThanksID) FROM [dbo].[yaf_Thanks] b WHERE b.ThanksToUserID=d.UserID) AS ThanksToUserNumber,
    (SELECT COUNT(DISTINCT(MessageID)) FROM [dbo].[yaf_Thanks] b WHERE b.ThanksToUserID=d.UserID) AS ThanksToUserPostsNumber
    FROM @ParsedMessageIDs a
    INNER JOIN [dbo].[yaf_Message] d ON (d.MessageID=a.MessageID)
    LEFT JOIN [dbo].[yaf_Thanks] b ON (b.MessageID = a.MessageID)
END
GO

CREATE PROCEDURE [dbo].[yaf_message_removethanks] 
    @FromUserID int,
    @MessageID int,
    @UseDisplayName bit=0,
    @paramOutput nvarchar(255) = null out
AS
BEGIN
    DELETE FROM [dbo].[yaf_Thanks] WHERE (ThanksFromUserID=@FromUserID AND MessageID=@MessageID)
    DECLARE @ToUserID int
    SET @ToUserID = (SELECT UserID FROM [dbo].[yaf_Message] WHERE (MessageID = @MessageID))
    IF @UseDisplayName = 1
            SET @paramOutput = (SELECT [DisplayName] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
    ELSE
            SET @paramOutput = (SELECT [Name] FROM [dbo].[yaf_User] WHERE (UserID=@ToUserID))
END
GO

CREATE PROCEDURE [dbo].[yaf_message_thanksnumber] 
    @MessageID int
AS
BEGIN
RETURN (SELECT Count(1) from [dbo].[yaf_Thanks] WHERE (MessageID=@MessageID))
END
GO

CREATE PROCEDURE [dbo].[yaf_user_getthanks_from] 
    @UserID int, @PageUserID  int
AS
BEGIN
SELECT Count(1) FROM [dbo].[yaf_Thanks] 
WHERE ThanksFromUserID=@UserID
END
GO

CREATE PROCEDURE [dbo].[yaf_user_getthanks_to] 
    @UserID			int,
    @PageUserID     int,
    @ThanksToNumber int output,
    @ThanksToPostsNumber int output
AS
BEGIN
SELECT @ThanksToNumber=(SELECT Count(1) FROM [dbo].[yaf_Thanks] WHERE ThanksToUserID=@UserID)	
SELECT @ThanksToPostsNumber=(SELECT Count(DISTINCT MessageID) FROM [dbo].[yaf_Thanks] WHERE ThanksToUserID=@UserID)	
END
GO

CREATE PROCEDURE [dbo].[yaf_user_viewallthanks] @UserID int, @PageUserID int
AS 
    BEGIN
        SELECT  t.ThanksFromUserID,
                t.ThanksToUserID,
                c.MessageID,
                a.ForumID,
                a.TopicID,
                a.Topic,
                b.UserID,
                c.MessageID,
                c.Posted,
                c.[Message],
                c.Flags
        FROM   
                [dbo].[yaf_Thanks] t
                join [dbo].[yaf_Message] c  on c.MessageID = t.MessageID		 
                join [dbo].[yaf_Topic] a on a.TopicID = c.TopicID
                join [dbo].[yaf_User] b on c.UserID = b.UserID
                join [dbo].[yaf_ActiveAccess] x  on x.ForumID = a.ForumID
        WHERE	
                c.IsDeleted = 0
                AND c.IsApproved = 1     				
                AND (t.ThanksFromUserID = @UserID OR t.ThanksToUserID = @UserID)
                AND a.TopicMovedID IS NULL
                AND a.IsDeleted = 0     
                AND x.UserID = @PageUserID	      
                AND x.ReadAccess <> 0
        ORDER BY c.Posted DESC
    END
Go
/* End of procedures for "Thanks" Mod */

create procedure [dbo].[yaf_accessmask_delete](@AccessMaskID int) as
begin
        declare @flag int
    
    set @flag=1
    if exists(select 1 from [dbo].[yaf_ForumAccess] where AccessMaskID=@AccessMaskID) or exists(select 1 from [dbo].[yaf_UserForum] where AccessMaskID=@AccessMaskID)
        set @flag=0
    else
        delete from [dbo].[yaf_AccessMask] where AccessMaskID=@AccessMaskID
    
    select @flag
end
GO

create procedure [dbo].[yaf_accessmask_list](@BoardID int,@AccessMaskID int=null,@ExcludeFlags int = 0) as
begin
        if @AccessMaskID is null
        select 
            a.* 
        from 
            [dbo].[yaf_AccessMask] a 
        where
            a.BoardID = @BoardID and
            (a.Flags & @ExcludeFlags) = 0
        order by 
            a.SortOrder
    else
        select 
            a.* 
        from 
            [dbo].[yaf_AccessMask] a 
        where
            a.BoardID = @BoardID and
            a.AccessMaskID = @AccessMaskID
        order by 
            a.SortOrder
end
GO

create procedure [dbo].[yaf_accessmask_save](
    @AccessMaskID		int=null,
    @BoardID			int,
    @Name				nvarchar(50),
    @ReadAccess			bit,
    @PostAccess			bit,
    @ReplyAccess		bit,
    @PriorityAccess		bit,
    @PollAccess			bit,
    @VoteAccess			bit,
    @ModeratorAccess	bit,
    @EditAccess			bit,
    @DeleteAccess		bit,
    @UploadAccess		bit,
    @DownloadAccess		bit,
    @SortOrder          smallint
) as
begin
        declare @Flags	int
    
    set @Flags = 0
    if @ReadAccess<>0 set @Flags = @Flags | 1
    if @PostAccess<>0 set @Flags = @Flags | 2
    if @ReplyAccess<>0 set @Flags = @Flags | 4
    if @PriorityAccess<>0 set @Flags = @Flags | 8
    if @PollAccess<>0 set @Flags = @Flags | 16
    if @VoteAccess<>0 set @Flags = @Flags | 32
    if @ModeratorAccess<>0 set @Flags = @Flags | 64
    if @EditAccess<>0 set @Flags = @Flags | 128
    if @DeleteAccess<>0 set @Flags = @Flags | 256
    if @UploadAccess<>0 set @Flags = @Flags | 512
    if @DownloadAccess<>0 set @Flags = @Flags | 1024

    if @AccessMaskID is null
        insert into [dbo].[yaf_AccessMask](Name,BoardID,Flags,SortOrder)
        values(@Name,@BoardID,@Flags,@SortOrder)
    else
        update [dbo].[yaf_AccessMask] set
            Name			= @Name,
            Flags			= @Flags,
            SortOrder       = @SortOrder
        where AccessMaskID=@AccessMaskID
end
GO

create procedure [dbo].[yaf_active_list](@BoardID int,@Guests bit=0,@ShowCrawlers bit=0,@ActiveTime int,@StyledNicks bit=0,@UTCTIMESTAMP datetime) as
begin
    delete from [dbo].[yaf_Active] where DATEDIFF(minute,LastActive,@UTCTIMESTAMP )>@ActiveTime 
    -- we don't delete guest access
    delete from [dbo].[yaf_ActiveAccess] where DATEDIFF(minute,LastActive,@UTCTIMESTAMP )>@ActiveTime AND  IsGuestX = 0
    -- select active	
    if @Guests<>0 
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),				
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 			
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID	
            INNER JOIN [dbo].[yaf_Active] c ON c.UserID = a.UserID
        where
            c.BoardID = @BoardID 	
                
        order by 
            c.LastActive desc
    else if @ShowCrawlers = 1 and @Guests = 0 
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),		
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 	 						
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID	
            INNER JOIN [dbo].[yaf_Active] c ON c.UserID = a.UserID							  
        where
            c.BoardID = @BoardID 
               -- is registered or is crawler 
               and ((c.Flags & 4) = 4 OR (c.Flags & 8) = 8)			  
        order by 
            c.LastActive desc
    else
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 				
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            INNER JOIN [dbo].[yaf_Active] c ON c.UserID = a.UserID							  
        where
            c.BoardID = @BoardID and
            -- no guests
            not exists(				
                select 1 
                    from [dbo].[yaf_UserGroup] x
                        inner join [dbo].[yaf_Group] y ON y.GroupID=x.GroupID 
                    where x.UserID=a.UserID and (y.Flags & 2)<>0
                )
        order by
            c.LastActive desc
end
GO

create procedure [dbo].[yaf_active_list_user](@BoardID int, @UserID int, @Guests bit=0, @ShowCrawlers bit = 0, @ActiveTime int,@StyledNicks bit=0) as
begin
    -- select active
    if @Guests<>0
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            HasForumAccess = CONVERT(int,x.ReadAccess),			
            c.TopicID,
            ForumName = (select [Name] from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = ISNULL((select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 				
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,		
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            inner join [dbo].[yaf_Active] c 
            ON c.UserID = a.UserID
            inner join [dbo].[yaf_ActiveAccess] x  
            ON (x.ForumID = ISNULL(c.ForumID,0))						
        where		
            c.BoardID = @BoardID AND x.UserID = @UserID		
        order by
            c.LastActive desc
        else if @ShowCrawlers = 1 and @Guests = 0 
            select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            HasForumAccess = CONVERT(int,x.ReadAccess),			
            c.TopicID,
            ForumName = (select [Name] from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = ISNULL((select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 					
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            inner join [dbo].[yaf_Active] c 
            ON c.UserID = a.UserID
            inner join [dbo].[yaf_ActiveAccess] x  
            ON (x.ForumID = ISNULL(c.ForumID,0))						
        where		
            c.BoardID = @BoardID AND x.UserID = @UserID	     
            -- is registered or (is crawler and is registered 	
               and ((c.Flags & 4) = 4 OR (c.Flags & 8) = 8)		
        order by
            c.LastActive desc
    else
        select
            a.UserID,
            UserName = a.Name,
            UserDisplayName = a.DisplayName,
            c.IP,
            c.SessionID,
            c.ForumID,
            HasForumAccess = CONVERT(int,x.ReadAccess),			
            c.TopicID,
            ForumName = (select Name from [dbo].[yaf_Forum] x where x.ForumID=c.ForumID),
            TopicName = (select Topic from [dbo].[yaf_Topic] x where x.TopicID=c.TopicID),
            IsGuest = (select 1 from [dbo].[yaf_UserGroup] x inner join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 2)<>0),
            IsCrawler = CONVERT(int, SIGN((c.Flags & 8))),
            IsHidden = ( a.IsActiveExcluded ),
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 					
            UserCount = 1,
            c.[Login],
            c.LastActive,
            c.Location,
            Active = DATEDIFF(minute,c.Login,c.LastActive),
            c.Browser,
            c.[Platform],
            c.ForumPage
        from
            [dbo].[yaf_User] a	
            JOIN [dbo].[yaf_Rank] r on r.RankID=a.RankID
            INNER JOIN [dbo].[yaf_Active] c 
            ON c.UserID = a.UserID
            inner join [dbo].[yaf_ActiveAccess] x  
            ON (x.ForumID = ISNULL(c.ForumID,0))
            where		
            c.BoardID = @BoardID  AND x.UserID = @UserID				      
         and
            not exists(
                select 1 
                    from [dbo].[yaf_UserGroup] x
                        inner join [dbo].[yaf_Group] y ON y.GroupID=x.GroupID 
                    where x.UserID=a.UserID and (y.Flags & 2)<>0
                )
        order by
            c.LastActive desc
end
GO

create procedure [dbo].[yaf_active_listforum](@ForumID int, @StyledNicks bit = 0) as
begin
        select
        UserID		= a.UserID,
        UserName	= b.Name,
        UserDisplayName = b.DisplayName,
        IsHidden	= ( b.IsActiveExcluded ),
        IsCrawler	= Convert(int,a.Flags & 8),		
        Style = case(@StyledNicks)
        when 1 then  b.UserStyle
        else ''	 end, 			
        UserCount   = (SELECT COUNT(ac.UserID) from
        [dbo].[yaf_Active] ac  where ac.UserID = a.UserID and ac.ForumID = @ForumID),
        Browser = a.Browser
    from
        [dbo].[yaf_Active] a 
        join [dbo].[yaf_User] b on b.UserID=a.UserID
    where
        a.ForumID = @ForumID
    group by
        a.UserID,
        b.DisplayName,
        b.Name,
        b.IsActiveExcluded,
        b.UserID,
        b.UserStyle,
        a.Flags,
        a.Browser
    order by
        b.Name
end
GO

create procedure [dbo].[yaf_active_listtopic](@TopicID int,@StyledNicks bit = 0) as
begin   
        select
        UserID		= a.UserID,
        UserName	= b.Name,
        UserDisplayName = b.DisplayName,
        IsHidden = ( b.IsActiveExcluded ),		
        IsCrawler	= Convert(int,a.Flags & 8),
        Style = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end, 	
        UserCount   = (SELECT COUNT(ac.UserID) from
        [dbo].[yaf_Active] ac  where ac.UserID = a.UserID and ac.TopicID = @TopicID),
        Browser = a.Browser
    from
        [dbo].[yaf_Active] a 
        join [dbo].[yaf_User] b on b.UserID=a.UserID		
    where
        a.TopicID = @TopicID
    group by
        a.UserID,
        b.DisplayName,
        b.Name,
        b.IsActiveExcluded,
        b.UserID,
        b.UserStyle,
        a.Flags,
        a.Browser		
    order by
        b.Name
end
GO

create procedure [dbo].[yaf_active_stats](@BoardID int) as
begin
        select
        ActiveUsers = (select count(1) from [dbo].[yaf_Active] x JOIN [dbo].[yaf_User] usr ON x.UserID = usr.UserID where x.BoardID = @BoardID AND usr.IsActiveExcluded = 0),
        ActiveMembers = (select count(1) from [dbo].[yaf_Active] x JOIN [dbo].[yaf_User] usr ON x.UserID = usr.UserID where x.BoardID = @BoardID and exists(select 1 from [dbo].[yaf_UserGroup] y inner join [dbo].[yaf_Group] z on y.GroupID=z.GroupID where y.UserID=x.UserID and (z.Flags & 2)=0  AND usr.IsActiveExcluded = 0)),
        ActiveGuests = (select count(1) from [dbo].[yaf_Active] x where x.BoardID = @BoardID and exists(select 1 from [dbo].[yaf_UserGroup] y inner join [dbo].[yaf_Group] z on y.GroupID=z.GroupID where y.UserID=x.UserID and (z.Flags & 2)<>0)),
        ActiveHidden = (select count(1) from [dbo].[yaf_Active] x JOIN [dbo].[yaf_User] usr ON x.UserID = usr.UserID where x.BoardID = @BoardID and exists(select 1 from [dbo].[yaf_UserGroup] y inner join [dbo].[yaf_Group] z on y.GroupID=z.GroupID where y.UserID=x.UserID and (z.Flags & 2)=0  AND usr.IsActiveExcluded = 1))
end
GO

CREATE PROCEDURE [dbo].[yaf_active_updatemaxstats]
(
    @BoardID int, @UTCTIMESTAMP datetime
)
AS
BEGIN
        DECLARE @count int, @max int, @maxStr nvarchar(255), @countStr nvarchar(255), @dtStr nvarchar(255)
    
    SET @count = ISNULL((SELECT COUNT(DISTINCT IP + '.' + CAST(UserID as varchar(10))) FROM [dbo].[yaf_Active]  WHERE BoardID = @BoardID),0)
    SET @maxStr = (SELECT ISNULL([dbo].[yaf_registry_value](N'maxusers', @BoardID), '1'))
    SET @max = CAST(@maxStr AS int)
    SET @countStr = CAST(@count AS nvarchar)
    SET @dtStr = CONVERT(nvarchar,@UTCTIMESTAMP,126)

    IF NOT EXISTS ( SELECT 1 FROM [dbo].[yaf_Registry] WHERE BoardID = @BoardID and [Name] = N'maxusers')
    BEGIN 
        INSERT INTO [dbo].[yaf_Registry](BoardID,[Name],[Value]) VALUES (@BoardID,N'maxusers',CAST(@countStr AS ntext))
        INSERT INTO [dbo].[yaf_Registry](BoardID,[Name],[Value]) VALUES (@BoardID,N'maxuserswhen',CAST(@dtStr AS ntext))
    END
    ELSE IF (@count > @max)	
    BEGIN
        UPDATE [dbo].[yaf_Registry] SET [Value] = CAST(@countStr AS ntext) WHERE BoardID = @BoardID AND [Name] = N'maxusers'
        UPDATE [dbo].[yaf_Registry] SET [Value] = CAST(@dtStr AS ntext) WHERE BoardID = @BoardID AND [Name] = N'maxuserswhen'
    END
END
GO

create procedure [dbo].[yaf_attachment_download](@AttachmentID int) as
begin
        update [dbo].[yaf_Attachment] set Downloads=Downloads+1 where AttachmentID=@AttachmentID
end
GO

create procedure [dbo].[yaf_attachment_list](@MessageID int=null,@UserID int=null,@AttachmentID int=null,@BoardID int=null,@PageIndex int = null, @PageSize int = 0) as begin
declare @TotalRows int
declare @FirstSelectRowNumber int
declare @FirstSelectRowID int		
   if @MessageID is not null
        select 
            a.*,
            e.BoardID
        from
            [dbo].[yaf_Attachment] a
            inner join [dbo].[yaf_Message] b on b.MessageID = a.MessageID
            inner join [dbo].[yaf_Topic] c on c.TopicID = b.TopicID
            inner join [dbo].[yaf_Forum] d on d.ForumID = c.ForumID
            inner join [dbo].[yaf_Category] e on e.CategoryID = d.CategoryID
            inner join [dbo].[yaf_Board] brd on brd.BoardID = e.BoardID
        where
            a.MessageID=@MessageID
    else if @AttachmentID is not null
        select 
            a.*
        from
            [dbo].[yaf_Attachment] a
        where 
            a.AttachmentID=@AttachmentID
    else if @UserID is not null
        begin
           set @PageIndex = @PageIndex + 1
           set @TotalRows = 0
           
           select 
               @TotalRows = count(1) 
           from 
               [dbo].[yaf_Attachment]
           where
               UserID = @UserID
		   		
           select top (@PageSize)
               *
                   from
                   (
				       select 
					       *,
					       TotalRows = @TotalRows ,
					       ROW_NUMBER() over (order by AttachmentID desc) as RowNum
				       from 
					       [dbo].[yaf_Attachment] a
				       where 
					       UserID=@UserID
                   ) as Attachments
           where
               RowNum > ((@PageIndex -1) * @PageSize)
           order by 
               AttachmentID desc
        end
    else
        begin
           set @PageIndex = @PageIndex + 1
           set @TotalRows = 0
           
           select @TotalRows = count(1) from [dbo].[yaf_Attachment] a
		                                     inner join [dbo].[yaf_Message] b on b.MessageID = a.MessageID
		                                     inner join [dbo].[yaf_Topic] c on c.TopicID = b.TopicID
		                                     inner join [dbo].[yaf_Forum] d on d.ForumID = c.ForumID
		                                     inner join [dbo].[yaf_Category] e on e.CategoryID = d.CategoryID			
									    where
		                                     e.BoardID = @BoardID
		   		
           select top (@PageSize)
               *
                   from
                   (
				       select 
					       a.*,
					       BoardID		= @BoardID,
					       Posted		= b.Posted,
					       ForumID		= d.ForumID,
					       ForumName	= d.Name,
					       TopicID		= c.TopicID,
					       TopicName	= c.Topic,
					       TotalRows  = @TotalRows,
					       ROW_NUMBER() over (order by AttachmentID desc) as RowNum
				       from 
					       [dbo].[yaf_Attachment] a
					       inner join [dbo].[yaf_Message] b on b.MessageID = a.MessageID
					       inner join [dbo].[yaf_Topic] c on c.TopicID = b.TopicID
					       inner join [dbo].[yaf_Forum] d on d.ForumID = c.ForumID
					       inner join [dbo].[yaf_Category] e on e.CategoryID = d.CategoryID			
				       where 
					       e.BoardID=BoardID
                   ) as Attachments
           where
               RowNum > ((@PageIndex -1) * @PageSize)
           order by 
               AttachmentID desc
        end
end
GO

create procedure [dbo].[yaf_bannedip_delete](@ID int) as
begin
        delete from [dbo].[yaf_BannedIP] where ID = @ID
end
GO

create procedure [dbo].[yaf_bannedip_list](@BoardID int, @Mask varchar(57) = null,@ID int=null,@PageIndex int=null, @PageSize int=null) as
    begin
	    declare @TotalRows int
	    declare @FirstSelectRowNumber int
	    declare @LastSelectRowNumber int
        
		if @ID is not null
            begin
			    select * from [dbo].[yaf_BannedIP] where ID=@ID and BoardID=@BoardID
			end
		else if @Mask is not null
		    begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedName] where Mask like '%' +@Mask + '%' and BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedIPs  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedIP] where Mask like '%' +@Mask + '%' and BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedIPs c
                 inner join [dbo].[yaf_BannedIP] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
	        end
		else
		    begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedIP] where BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedIPs  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedIP] where BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedIPs c
                 inner join [dbo].[yaf_BannedIP] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
	        end       
    end
go

create procedure [dbo].[yaf_bannedip_save](@ID int=null,@BoardID int,@Mask varchar(57), @Reason nvarchar(128), @UserID int, @UTCTIMESTAMP datetime) as
begin
    if (@ID is null or @ID = 0 ) 
    begin
        declare @IPExistsRow int
        select @IPExistsRow = count(1) from [dbo].[yaf_BannedIP] where BoardID=@BoardID and Mask=@Mask;
        if (@IPExistsRow  is null or @IPExistsRow = 0)
        begin
            insert into [dbo].[yaf_BannedIP](BoardID,Mask,Since,Reason,UserID) values(@BoardID,@Mask,@UTCTIMESTAMP,@Reason,@UserID)
        end
    end
    else begin
        update [dbo].[yaf_BannedIP] set Mask = @Mask,Reason = @Reason, UserID = @UserID where ID = @ID
    end
end
GO

create procedure [dbo].[yaf_bannedname_delete](@ID int) as
begin
        delete from [dbo].[yaf_BannedName] where ID = @ID
end
GO

create procedure [dbo].[yaf_bannedname_list](@BoardID int, @Mask varchar(255) = null, @ID int=null,@PageIndex int=null, @PageSize int=null) as
    begin
        declare @TotalRows int
        declare @FirstSelectRowNumber int
        declare @LastSelectRowNumber int
  
        if @ID is not null
            begin
	            select * from [dbo].[yaf_BannedName] where ID=@ID and BoardID=@BoardID
            end       
        else if @Mask is not null
            begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedName] where Mask like '%' +@Mask + '%' and BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedNames  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedName] where Mask like '%' +@Mask + '%' and BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedNames c
                 inner join [dbo].[yaf_BannedName] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
            end
        else
            begin
	            set @PageIndex = @PageIndex + 1;
                set @FirstSelectRowNumber = 0;  
                set @LastSelectRowNumber = 0;  
                set @TotalRows = 0;
           
                select @TotalRows = count(1) from [dbo].[yaf_BannedName] where BoardID=@BoardID;
                select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
                select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
                with BannedNames  as 
                (
                  select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
                  from  [dbo].[yaf_BannedName] where BoardID=@BoardID
                )
                select
                 a.*,
                 @TotalRows as TotalRows
                 from
                 BannedNames c
                 inner join [dbo].[yaf_BannedName] a	
                 on 	c.Mask = a.Mask	
                 where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
                 order by c.RowNum asc
            end
    end
go

create procedure [dbo].[yaf_bannedname_save](@ID int=null,@BoardID int,@Mask varchar(255), @Reason nvarchar(128), @UTCTIMESTAMP datetime) as
begin
    if (@ID is null or @ID = 0 ) 
    begin
        declare @ExistsRow int
        select @ExistsRow = count(1) from [dbo].[yaf_BannedName] where BoardID=@BoardID and Mask=@Mask;
        if (@ExistsRow  is null or @ExistsRow = 0)
        begin
            insert into [dbo].[yaf_BannedName](BoardID,Mask,Since,Reason) values(@BoardID,@Mask,@UTCTIMESTAMP,@Reason)
        end
    end
    else begin
        update [dbo].[yaf_BannedName] set Mask = @Mask,Reason = @Reason where ID = @ID
    end
end
GO

create procedure [dbo].[yaf_bannedemail_delete](@ID int) as
begin
        delete from [dbo].[yaf_BannedEmail] where ID = @ID
end
GO

create procedure [dbo].[yaf_bannedemail_list](@BoardID int, @Mask varchar(255) = null,@ID int=null,@PageIndex int=null, @PageSize int=null) as
begin
  declare @TotalRows int
  declare @FirstSelectRowNumber int
  declare @LastSelectRowNumber int

  if @ID is not null
      begin
          select * from [dbo].[yaf_BannedEmail] where ID=@ID and BoardID=@BoardID
	  end
  else if @Mask is not null
      begin
	       set @PageIndex = @PageIndex + 1;
           set @FirstSelectRowNumber = 0;  
           set @LastSelectRowNumber = 0;  
           set @TotalRows = 0;
           
           select @TotalRows = count(1) from [dbo].[yaf_BannedEmail] where Mask like '%' +@Mask + '%' and BoardID=@BoardID;
           select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
           select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
           with BannedEmails  as 
           (
             select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
             from  [dbo].[yaf_BannedEmail] where Mask like '%' +@Mask + '%' and BoardID=@BoardID
           )
           select
            a.*,
            @TotalRows as TotalRows
            from
            BannedEmails c
            inner join [dbo].[yaf_BannedEmail] a	
            on 	c.Mask = a.Mask	
            where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
            order by c.RowNum asc
	  end
  else
      begin
           set @PageIndex = @PageIndex + 1;
           set @FirstSelectRowNumber = 0;  
           set @LastSelectRowNumber = 0;  
           set @TotalRows = 0;
           
           select @TotalRows = count(1) from [dbo].[yaf_BannedEmail] where BoardID=@BoardID;
           select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
           select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize +  @PageSize;
           
           with BannedEmails  as 
           (
             select ROW_NUMBER() over (order by ID desc) as RowNum, Mask 
             from  [dbo].[yaf_BannedEmail] where BoardID=@BoardID
           )
           select
            a.*,
            @TotalRows as TotalRows
            from
            BannedEmails c
            inner join [dbo].[yaf_BannedEmail] a	
            on 	c.Mask = a.Mask	
            where c.RowNum between (@FirstSelectRowNumber) and (@LastSelectRowNumber)
            order by c.RowNum asc
    end
end
go

create procedure [dbo].[yaf_bannedemail_save](@ID int=null,@BoardID int,@Mask varchar(255), @Reason nvarchar(128), @UTCTIMESTAMP datetime) as
begin
    if (@ID is null or @ID = 0 ) 
    begin
        declare @ExistsRow int
        select @ExistsRow = count(1) from [dbo].[yaf_BannedEmail] where BoardID=@BoardID and Mask=@Mask;
        if (@ExistsRow  is null or @ExistsRow = 0)
        begin
            insert into [dbo].[yaf_BannedEmail](BoardID,Mask,Since,Reason) values(@BoardID,@Mask,@UTCTIMESTAMP,@Reason)
        end
    end
    else begin
        update [dbo].[yaf_BannedEmail] set Mask = @Mask,Reason = @Reason where ID = @ID
    end
end
GO

CREATE procedure [dbo].[yaf_board_create](
    @BoardName 		nvarchar(50),
    @Culture varchar(10),
    @LanguageFile 	nvarchar(50),
    @MembershipAppName nvarchar(50),
    @RolesAppName nvarchar(50),
    @UserName		nvarchar(255),
    @UserEmail		nvarchar(255),
    @UserKey		nvarchar(64),
    @IsHostAdmin	bit,
    @RolePrefix     nvarchar(255),
    @UTCTIMESTAMP datetime
) as 
begin
    declare @BoardID				int
    declare @TimeZone				int
    declare @ForumEmail				nvarchar(50)
    declare	@GroupIDAdmin			int
    declare	@GroupIDGuest			int
    declare @GroupIDMember			int
    declare	@AccessMaskIDAdmin		int
    declare @AccessMaskIDModerator	int
    declare @AccessMaskIDMember		int
    declare	@AccessMaskIDReadOnly	int
    declare @UserIDAdmin			int
    declare @UserIDGuest			int
    declare @RankIDAdmin			int
    declare @RankIDGuest			int
    declare @RankIDNewbie			int
    declare @RankIDMember			int
    declare @RankIDAdvanced			int
    declare	@CategoryID				int
    declare	@ForumID				int
    declare @UserFlags				int

    -- Board
    INSERT INTO [dbo].[yaf_Board](Name, AllowThreaded, MembershipAppName, RolesAppName ) values(@BoardName,0, @MembershipAppName, @RolesAppName)
    SET @BoardID = SCOPE_IDENTITY()

    SET @TimeZone = (SELECT ISNULL(CAST([dbo].[yaf_registry_value](N'TimeZone', @BoardID) as int), 0))
    SET @ForumEmail = (SELECT [dbo].[yaf_registry_value](N'ForumEmail', @BoardID))
    
    EXEC [dbo].[yaf_registry_save] 'culture',@Culture,@BoardID
    EXEC [dbo].[yaf_registry_save] 'language',@LanguageFile,@BoardID
    
    -- Rank
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,Style,SortOrder) VALUES (@BoardID,'Administration',0,null,2147483647,'default!font-size: 8pt; color: #811334/yafpro!font-size: 8pt; color:blue',0)
    SET @RankIDAdmin = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Guest',0,null,0,100)
    SET @RankIDGuest = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Newbie',3,0,10,3)
    SET @RankIDNewbie = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Member',2,10,30,2)
    SET @RankIDMember = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,PMLimit,SortOrder) VALUES(@BoardID,'Advanced Member',2,30,100,1)
    SET @RankIDAdvanced = SCOPE_IDENTITY()

    -- AccessMask
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Admin Access',1023 + 1024,4)
    SET @AccessMaskIDAdmin = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Moderator Access',487 + 1024,3)
    SET @AccessMaskIDModerator = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Member Access',423 + 1024,2)
    SET @AccessMaskIDMember = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'Read Only Access',1,1)
    SET @AccessMaskIDReadOnly = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_AccessMask](BoardID,Name,Flags,SortOrder)
    VALUES(@BoardID,'No Access',0,0)

    -- Group
    INSERT INTO [dbo].[yaf_Group](BoardID,Name,Flags,PMLimit,Style,SortOrder,UsrSigChars,UsrSigBBCodes,UsrAlbums,UsrAlbumImages) values(@BoardID, ISNULL(@RolePrefix,'') + 'Administrators',1,2147483647,'default!font-size: 8pt; color: red/yafpro!font-size: 8pt; color:blue',0,256,'URL,IMG,SPOILER,QUOTE',10,120)
    set @GroupIDAdmin = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Group](BoardID,Name,Flags,PMLimit,Style,SortOrder,UsrSigChars,UsrSigBBCodes,UsrAlbums,UsrAlbumImages) values(@BoardID,'Guests',2,0,'default!font-size: 8pt; font-style: italic; font-weight: bold; color: #0c7333/yafpro!font-size: 8pt; color: #6e1987',1,0,null,0,0)
    SET @GroupIDGuest = SCOPE_IDENTITY()
    INSERT INTO [dbo].[yaf_Group](BoardID,Name,Flags,PMLimit,SortOrder,UsrSigChars,UsrSigBBCodes,UsrAlbums,UsrAlbumImages) values(@BoardID,ISNULL(@RolePrefix,'') + 'Registered',4,100,1,128,'URL,IMG,SPOILER,QUOTE',5,30)
    SET @GroupIDMember = SCOPE_IDENTITY()	
    
    -- User (GUEST)
    INSERT INTO [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName,[Password],Joined,LastVisit,NumPosts,TimeZone,Email,Flags)
    VALUES(@BoardID,@RankIDGuest,'Guest','Guest','na',@UTCTIMESTAMP ,@UTCTIMESTAMP ,0,@TimeZone,@ForumEmail,6)
    SET @UserIDGuest = SCOPE_IDENTITY()	
    
    SET @UserFlags = 2
    if @IsHostAdmin<>0 SET @UserFlags = 3
    
    -- User (ADMIN)
    INSERT INTO [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName, [Password], Email,ProviderUserKey, Joined,LastVisit,NumPosts,TimeZone,Flags)
    VALUES(@BoardID,@RankIDAdmin,@UserName,@UserName,'na',@UserEmail,@UserKey,@UTCTIMESTAMP ,@UTCTIMESTAMP ,0,@TimeZone,@UserFlags)
    SET @UserIDAdmin = SCOPE_IDENTITY()

    -- UserGroup
    INSERT INTO [dbo].[yaf_UserGroup](UserID,GroupID) VALUES(@UserIDAdmin,@GroupIDAdmin)
    INSERT INTO [dbo].[yaf_UserGroup](UserID,GroupID) VALUES(@UserIDGuest,@GroupIDGuest)

    -- Category
    INSERT INTO [dbo].[yaf_Category](BoardID,Name,SortOrder) VALUES(@BoardID,'Test Category',1)
    set @CategoryID = SCOPE_IDENTITY()
    
    -- Forum
    INSERT INTO [dbo].[yaf_Forum](CategoryID,Name,Description,SortOrder,NumTopics,NumPosts,Flags)
    VALUES(@CategoryID,'Test Forum','A test forum',1,0,0,4)
    set @ForumID = SCOPE_IDENTITY()

    -- ForumAccess
    INSERT INTO [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) VALUES(@GroupIDAdmin,@ForumID,@AccessMaskIDAdmin)
    INSERT INTO [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) VALUES(@GroupIDGuest,@ForumID,@AccessMaskIDReadOnly)
    INSERT INTO [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) VALUES(@GroupIDMember,@ForumID,@AccessMaskIDMember)

    SELECT @BoardID;
end
GO

create procedure [dbo].[yaf_board_delete](@BoardID int) as
begin
        declare @tmpForumID int;
    declare forum_cursor cursor for
        select ForumID 
        from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on a.CategoryID=b.CategoryID
        where b.BoardID=@BoardID
        order by ForumID desc
    
    open forum_cursor
    fetch next from forum_cursor into @tmpForumID
    while @@FETCH_STATUS = 0
    begin
        exec [dbo].[yaf_forum_delete] @tmpForumID;
        fetch next from forum_cursor into @tmpForumID
    end
    close forum_cursor
    deallocate forum_cursor

    delete from [dbo].[yaf_ForumAccess] where exists(select 1 from [dbo].[yaf_Group] x where x.GroupID=[dbo].[yaf_ForumAccess].GroupID and x.BoardID=@BoardID)
    delete from [dbo].[yaf_Forum] where exists(select 1 from [dbo].[yaf_Category] x where x.CategoryID=[dbo].[yaf_Forum].CategoryID and x.BoardID=@BoardID)
    delete from [dbo].[yaf_UserGroup] where exists(select 1 from [dbo].[yaf_User] x where x.UserID=[dbo].[yaf_UserGroup].UserID and x.BoardID=@BoardID)
    delete from [dbo].[yaf_Category] where BoardID=@BoardID
    delete from [dbo].[yaf_ActiveAccess] where BoardID=@BoardID
    delete from [dbo].[yaf_Active] where BoardID=@BoardID
    delete from [dbo].[yaf_User] where BoardID=@BoardID
    delete from [dbo].[yaf_Rank] where BoardID=@BoardID
    delete from [dbo].[yaf_Group] where BoardID=@BoardID
    delete from [dbo].[yaf_AccessMask] where BoardID=@BoardID	
    delete from [dbo].[yaf_BBCode] where BoardID=@BoardID
    delete from [dbo].[yaf_Extension] where BoardId=@BoardID
    delete from [dbo].[yaf_ShoutboxMessage] where BoardId=@BoardID
    delete from [dbo].[yaf_Medal] where BoardID=@BoardID
    delete from [dbo].[yaf_Smiley] where BoardID=@BoardID
    delete from [dbo].[yaf_Replace_Words] where BoardId=@BoardID
	delete from [dbo].[yaf_Spam_Words] where BoardId=@BoardID
    delete from [dbo].[yaf_NntpServer] where BoardID=@BoardID
    delete from [dbo].[yaf_BannedIP] where BoardID=@BoardID
    delete from [dbo].[yaf_Registry] where BoardID=@BoardID
    delete from [dbo].[yaf_Board] where BoardID=@BoardID
end
GO

create procedure [dbo].[yaf_board_list](@BoardID int=null) as
begin
        select
        a.*,
        SQLVersion = @@VERSION
    from 
        [dbo].[yaf_Board] a
    where
        (@BoardID is null or a.BoardID = @BoardID)
end
GO

create procedure [dbo].[yaf_board_poststats](@BoardID int, @StyledNicks bit = 0, @ShowNoCountPosts bit = 0, @GetDefaults bit = 0 ) as
BEGIN

-- vzrus: while  a new installation or like this we don't have the row and should return a dummy data
IF @GetDefaults <= 0
BEGIN
        SELECT TOP 1 
        Posts = (select count(1) from [dbo].[yaf_Message] a join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID join [dbo].[yaf_Forum] c on c.ForumID=b.ForumID join [dbo].[yaf_Category] d on d.CategoryID=c.CategoryID where d.BoardID=@BoardID AND (a.Flags & 24)=16),
        Topics = (select count(1) from [dbo].[yaf_Topic] a join [dbo].[yaf_Forum] b on b.ForumID=a.ForumID join [dbo].[yaf_Category] c on c.CategoryID=b.CategoryID where c.BoardID=@BoardID AND a.IsDeleted = 0),
        Forums = (select count(1) from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID),	
        LastPostInfoID	= 1,
        LastPost	= a.Posted,
        LastUserID	= a.UserID,
        LastUser	= e.Name,
        LastUserDisplayName	= e.DisplayName,
        LastUserStyle =  case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = a.UserID)
            else ''	 end
            FROM 
                [dbo].[yaf_Message] a 
				join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
                join [dbo].[yaf_Forum] c on c.ForumID=b.ForumID 
                join [dbo].[yaf_Category] d on d.CategoryID=c.CategoryID 
                join [dbo].[yaf_User] e on e.UserID=a.UserID						
            WHERE 
                (a.Flags & 24) = 16
                AND b.IsDeleted = 0 
                AND d.BoardID = @BoardID 
                AND c.[IsNoCount] <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 1 END)
            ORDER BY
                a.Posted DESC
        END
        ELSE
        BEGIN
        SELECT
        Posts = 0,
        Topics = 0,
        Forums = 1,	
        LastPostInfoID	= 1,
        LastPost	= null,
        LastUserID	= null,
        LastUser	= null,
        LastUserDisplayName	= null,
        LastUserStyle = ''
        END
        -- this can be in any very rare updatable cached place 
        DELETE FROM [dbo].[yaf_Topic] where TopicMovedID IS NOT NULL AND LinkDate IS NOT NULL AND LinkDate < GETUTCDATE()
        
END
GO

create procedure [dbo].[yaf_board_userstats](@BoardID int) as
BEGIN
        SELECT		
        Members = (select count(1) from [dbo].[yaf_User] a where a.BoardID=@BoardID AND (Flags & 2) = 2 AND (a.Flags & 4) = 0),
        MaxUsers = (SELECT [dbo].[yaf_registry_value](N'maxusers', @BoardID)),
        MaxUsersWhen = (SELECT [dbo].[yaf_registry_value](N'maxuserswhen', @BoardID)),
        LastMemberInfo.*
    FROM
        (
            SELECT TOP 1 
                LastMemberInfoID= 1,
                LastMemberID	= UserID,
                LastMember	= [Name],
                LastMemberDisplayName	= [DisplayName]
            FROM 
                [dbo].[yaf_User]
            WHERE 
               -- is approved
                (Flags & 2) = 2
                -- is not a guest
                AND (Flags & 4) <> 4
                AND BoardID = @BoardID 
            ORDER BY 
                Joined DESC
        ) as LastMemberInfo
        
END
GO

create procedure [dbo].[yaf_board_save](@BoardID int,@Name nvarchar(50), @LanguageFile nvarchar(50),@Culture varchar(10), @AllowThreaded bit) as
begin

        EXEC [dbo].[yaf_registry_save] 'culture', @Culture, @BoardID
        EXEC [dbo].[yaf_registry_save] 'language', @LanguageFile, @BoardID
        update [dbo].[yaf_Board] set
        Name = @Name,
        AllowThreaded = @AllowThreaded
    where BoardID=@BoardID
    select @BoardID 
end
GO

create procedure [dbo].[yaf_board_stats]
    @BoardID	int = null
as 
begin
        if (@BoardID is null) begin
        select
            NumPosts	= (select count(1) from [dbo].[yaf_Message] where IsApproved = 1 AND IsDeleted = 0),
            NumTopics	= (select count(1) from [dbo].[yaf_Topic] where IsDeleted = 0),
            NumUsers	= (select count(1) from [dbo].[yaf_User] where IsApproved = 1),
            BoardStart	= (select min(Joined) from [dbo].[yaf_User])
    end
    else begin
        select
            NumPosts	= (select count(1)	
                                from [dbo].[yaf_Message] a
                                join [dbo].[yaf_Topic] b ON a.TopicID=b.TopicID
                                join [dbo].[yaf_Forum] c ON b.ForumID=c.ForumID
                                join [dbo].[yaf_Category] d ON c.CategoryID=d.CategoryID
                                where a.IsApproved = 1 AND a.IsDeleted = 0 and b.IsDeleted = 0 AND d.BoardID=@BoardID
                            ),
            NumTopics	= (select count(1) 
                                from [dbo].[yaf_Topic] a
                                join [dbo].[yaf_Forum] b ON a.ForumID=b.ForumID
                                join [dbo].[yaf_Category] c ON b.CategoryID=c.CategoryID
                                where c.BoardID=@BoardID AND a.IsDeleted = 0
                            ),
            NumUsers	= (select count(1) from [dbo].[yaf_User] where IsApproved = 1 and BoardID=@BoardID),
            BoardStart	= (select min(Joined) from [dbo].[yaf_User] where BoardID=@BoardID)
    end
end
GO

create procedure [dbo].[yaf_category_delete](@CategoryID int) as
begin
        declare @flag int
 
    if exists(select 1 from [dbo].[yaf_Forum] where CategoryID = @CategoryID)
    begin
        set @flag = 0
    end else
    begin
        delete from [dbo].[yaf_Category] where CategoryID = @CategoryID
        set @flag = 1
    end

    select @flag
end
GO

create procedure [dbo].[yaf_category_list](@BoardID int,@CategoryID int=null) as
begin
        if @CategoryID is null
        select * from [dbo].[yaf_Category] where BoardID = @BoardID order by SortOrder
    else
        select * from [dbo].[yaf_Category] where BoardID = @BoardID and CategoryID = @CategoryID
end
GO

create procedure [dbo].[yaf_category_listread](@BoardID int,@UserID int,@CategoryID int=null) as
begin
        select 
        a.CategoryID,
        a.Name,
        a.CategoryImage
    from 
        [dbo].[yaf_Category] a
        join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] v   on v.ForumID=b.ForumID
    where
        a.BoardID=@BoardID and
        v.UserID=@UserID and
        (CONVERT(int,v.ReadAccess)<>0 or (b.Flags & 2)=0) and
        (@CategoryID is null or a.CategoryID=@CategoryID) and
        b.ParentID is null
    group by
        a.CategoryID,
        a.Name,
        a.SortOrder,
        a.CategoryImage
    order by 
        a.SortOrder
end
GO

CREATE PROCEDURE [dbo].[yaf_category_save]
(
    @BoardID    INT,
    @CategoryID INT,
    @Name       NVARCHAR(128),	
    @SortOrder  SMALLINT,
    @CategoryImage NVARCHAR(255) = NULL
)
AS
BEGIN
        IF @CategoryID > 0
    BEGIN
        UPDATE [dbo].[yaf_Category]
        SET    Name = @Name,
               CategoryImage = @CategoryImage,
               SortOrder = @SortOrder
        WHERE  CategoryID = @CategoryID
        SELECT CategoryID = @CategoryID
    END
    ELSE
    BEGIN
        INSERT INTO [dbo].[yaf_Category]
                   (BoardID,
                    [Name],
                    [CategoryImage],
                    SortOrder)
        VALUES     (@BoardID,
                    @Name,
                    @CategoryImage,
                    @SortOrder)
        SELECT CategoryID = Scope_identity()
    END
END
GO

CREATE PROCEDURE [dbo].[yaf_checkemail_list]
(
    @Email nvarchar(255) = null
)
AS
BEGIN
        IF @Email IS NULL
        SELECT * FROM [dbo].[yaf_CheckEmail]
    ELSE
        SELECT * FROM [dbo].[yaf_CheckEmail] WHERE Email = LOWER(@Email)
END
GO

create procedure [dbo].[yaf_checkemail_save]
(
    @UserID int,
    @Hash nvarchar(32),
    @Email nvarchar(255),
    @UTCTIMESTAMP datetime
)
AS
BEGIN
        INSERT INTO [dbo].[yaf_CheckEmail]
        (UserID,Email,Created,Hash)
    VALUES
        (@UserID,LOWER(@Email),@UTCTIMESTAMP ,@Hash)	
END
GO

CREATE procedure [dbo].[yaf_checkemail_update](@Hash nvarchar(32)) as
begin
        declare @UserID int
    declare @CheckEmailID int
    declare @Email nvarchar(255)

    set @UserID = null

    select 
        @CheckEmailID = CheckEmailID,
        @UserID = UserID,
        @Email = Email
    from
        [dbo].[yaf_CheckEmail]
    where
        Hash = @Hash

    if @UserID is null
    begin
        select convert(nvarchar(64),NULL) as ProviderUserKey, convert(nvarchar(255),NULL) as Email
        return
    end

    -- Update new user email
    update [dbo].[yaf_User] set Email = LOWER(@Email), Flags = Flags | 2 where UserID = @UserID
    delete [dbo].[yaf_CheckEmail] where CheckEmailID = @CheckEmailID

    -- return the UserProviderKey
    SELECT ProviderUserKey, Email, UserID FROM [dbo].[yaf_User] WHERE UserID = @UserID
end
GO

CREATE PROCEDURE [dbo].[yaf_choice_vote](@ChoiceID int,@UserID int = NULL, @RemoteIP varchar(39) = NULL) AS
BEGIN
        DECLARE @PollID int

    SET @PollID = (SELECT PollID FROM [dbo].[yaf_Choice] WHERE ChoiceID = @ChoiceID)

    IF @UserID = NULL
    BEGIN
        IF @RemoteIP != NULL
        BEGIN
            INSERT INTO [dbo].[yaf_PollVote] (PollID, UserID, RemoteIP, ChoiceID) VALUES (@PollID,NULL,@RemoteIP, @ChoiceID)	
        END
    END
    ELSE
    BEGIN
        INSERT INTO [dbo].[yaf_PollVote] (PollID, UserID, RemoteIP, ChoiceID) VALUES (@PollID,@UserID,@RemoteIP,@ChoiceID)
    END

    UPDATE [dbo].[yaf_Choice] SET Votes = Votes + 1 WHERE ChoiceID = @ChoiceID
END
GO

create procedure [dbo].[yaf_eventlog_create](@UserID int,@Source nvarchar(50),@Description ntext,@Type int,@UTCTIMESTAMP datetime) as
begin
        insert into [dbo].[yaf_EventLog](UserID,Source,[Description],[Type])
    values(@UserID,@Source,@Description,@Type)	
end
GO

create procedure [dbo].[yaf_eventlog_deletebyuser]
(	
    @BoardID int = null,
    @PageUserID int 
) as
begin
if (exists (select top 1 1 from [dbo].[yaf_User] where ((Flags & 1) = 1 and UserID = @PageUserID)))
begin
delete from [dbo].[yaf_EventLog] where
            (UserID is null or
            UserID in (select UserID from [dbo].[yaf_User] where BoardID=@BoardID))
end
else
begin
declare @tmp_evlogdelacc table (EventLogTID int);

        -- either EventLogID or BoardID must be null, not both at the same time
    insert into	@tmp_evlogdelacc(EventLogTID)
    select a.EventLogID from [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type] 
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
        where e.DeleteAccess = 1
        delete from [dbo].[yaf_EventLog]
        where EventLogID in (select EventLogTID from @tmp_evlogdelacc)
    end	
end
GO


create procedure [dbo].[yaf_eventlog_list](@BoardID int, @PageUserID int, @MaxRows int, @MaxDays int,  @PageIndex int,
   @PageSize int, @SinceDate datetime, @ToDate datetime, @EventIDs varchar(8000) = null,
@UTCTIMESTAMP datetime) as
begin
   declare @TotalRows int 
   declare @FirstSelectRowNumber int 
   declare @FirstSelectRowID int
   DECLARE @ParsedEventIDs TABLE
      (
            EventID int
      )
      
DECLARE @EventID varchar(11), @Pos INT      
SET @Pos = CHARINDEX(',', @EventIDs, 1)
-- check here if the value is not empty
IF REPLACE(@EventIDs, ',', '') <> ''
BEGIN
 WHILE @Pos > 0
                  BEGIN
                        SET @EventID = LTRIM(RTRIM(LEFT(@EventIDs, @Pos - 1)))
                        IF @EventID <> ''
                        BEGIN
                              INSERT INTO @ParsedEventIDs (EventID) VALUES (CAST(@EventID AS int)) --Use Appropriate conversion
                        END
                        SET @EventIDs = RIGHT(@EventIDs, LEN(@EventIDs) - @Pos)
                        SET @Pos = CHARINDEX(',', @EventIDs, 1)
                  END
                     -- to be sure that last value is inserted
                    IF (LEN(@EventIDs) > 0)
                           INSERT INTO @ParsedEventIDs (EventID) VALUES (CAST(@EventIDs AS int)) 
END

-- delete entries older than 10 days
    delete from [dbo].[yaf_EventLog] where EventTime+@MaxDays<@UTCTIMESTAMP 

    -- or if there are more then 1000	
    if ((select count(1) from [dbo].[yaf_eventlog]) >= @MaxRows + 50)
    begin		
        delete from [dbo].[yaf_EventLog] WHERE EventLogID IN (SELECT TOP 100 EventLogID FROM [dbo].[yaf_EventLog] ORDER BY EventTime)
    end	

    set nocount on
     set @PageIndex = @PageIndex + 1
    if (exists (select top 1 1 from [dbo].[yaf_User] where ((Flags & 1) = 1 and UserID = @PageUserID)))		
    begin
      set @FirstSelectRowNumber = 0
      set @FirstSelectRowID = 0
      set @TotalRows = 0

        select @TotalRows = count(1) from
        [dbo].[yaf_EventLog] a		
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
        where	   
        (b.UserID IS NULL or b.BoardID = @BoardID)	and ((@EventIDs IS NULL )  OR  a.[Type] IN (select * from @ParsedEventIDs))  and EventTime between @SinceDate and @ToDate
    
        select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1

    if (@FirstSelectRowNumber <= @TotalRows)
        begin
           -- find first selectedrowid 
  
    set rowcount @FirstSelectRowNumber
   end
   else
   begin   
   set rowcount 1
   end
       
        select @FirstSelectRowID = EventLogID 
       from
        [dbo].[yaf_EventLog] a		
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
        where	   
        (b.UserID IS NULL or b.BoardID = @BoardID) and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs))  and a.EventTime between @SinceDate and @ToDate
        order by a.EventLogID desc

      set rowcount @PageSize
      select
        a.*,		
        ISNULL(b.[Name],'System') as [Name],
        TotalRows = @TotalRows
    from
        [dbo].[yaf_EventLog] a		
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
      where EventLogID <= @FirstSelectRowID  and (b.UserID IS NULL or b.BoardID = @BoardID)	and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs)) -- and a.EventTime between @SinceDate and @ToDate
      order by a.EventLogID   desc   
   end  
else
begin
        select @TotalRows = count(1)  from
        [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type]
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
    where	 
        (b.UserID IS NULL or b.BoardID = @BoardID)		and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs))	 and a.EventTime between @SinceDate and @ToDate
    
        select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1
                   -- find first selectedrowid 
   if (@TotalRows > 0)
   begin
    set rowcount @FirstSelectRowNumber
   end
   else
   begin   
   set rowcount 1
   end

        select @FirstSelectRowID = EventLogID 
      from
        [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type]
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
    where	   
        (b.UserID IS NULL or b.BoardID = @BoardID)	and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs))	 and a.EventTime between @SinceDate and @ToDate
        order by  a.EventLogID   desc

      set rowcount @PageSize
      select
      a.*,		
        ISNULL(b.[Name],'System') as [Name],
        TotalRows = @TotalRows
         from
        [dbo].[yaf_EventLog] a
        left join [dbo].[yaf_EventLogGroupAccess] e on e.EventTypeID = a.[Type]
        join [dbo].[yaf_UserGroup] ug on (ug.UserID =  @PageUserID and ug.GroupID = e.GroupID)
        left join [dbo].[yaf_User] b on b.UserID=a.UserID
    where	  EventLogID <= @FirstSelectRowID and (b.UserID IS NULL or b.BoardID = @BoardID) and (@EventIDs IS NULL OR  a.[Type] IN (select * from @ParsedEventIDs)) and a.EventTime between @SinceDate and @ToDate	
      order by a.EventLogID  desc   
   end  
   set rowcount 0
 set nocount off

end
GO

CREATE procedure [dbo].[yaf_extension_list] (@BoardID int, @Extension nvarchar(10)) as
BEGIN
    
    -- If an extension is passed, then we want to check for THAT extension
    IF LEN(@Extension) > 0
        BEGIN
            SELECT
                a.*
            FROM
                [dbo].[yaf_Extension] a
            WHERE
                a.BoardId = @BoardID AND a.Extension=@Extension
            ORDER BY
                a.Extension
        END

    ELSE
        -- Otherwise, just get a list for the given @BoardId
        BEGIN
            SELECT
                a.*
            FROM
                [dbo].[yaf_Extension] a
            WHERE
                a.BoardId = @BoardID	
            ORDER BY
                a.Extension
        END
END
GO

CREATE procedure [dbo].[yaf_forum_delete](@ForumID int) as
begin
        -- Maybe an idea to use cascading foreign keys instead? Too bad they don't work on MS SQL 7.0...
    update [dbo].[yaf_Forum] set LastMessageID=null,LastTopicID=null where ForumID=@ForumID
    update [dbo].[yaf_Topic] set LastMessageID=null where ForumID=@ForumID
    update [dbo].[yaf_Active] set ForumID=null where ForumID=@ForumID
    delete from [dbo].[yaf_WatchTopic] from [dbo].[yaf_Topic] where [dbo].[yaf_Topic].ForumID = @ForumID and [dbo].[yaf_WatchTopic].TopicID = [dbo].[yaf_Topic].TopicID
    delete from [dbo].[yaf_Active] from [dbo].[yaf_Topic] where [dbo].[yaf_Topic].ForumID = @ForumID and [dbo].[yaf_Active].TopicID = [dbo].[yaf_Topic].TopicID
    delete from [dbo].[yaf_NntpTopic] from [dbo].[yaf_NntpForum] where [dbo].[yaf_NntpForum].ForumID = @ForumID and [dbo].[yaf_NntpTopic].NntpForumID = [dbo].[yaf_NntpForum].NntpForumID
    delete from [dbo].[yaf_NntpForum] where ForumID=@ForumID	
    delete from [dbo].[yaf_WatchForum] where ForumID = @ForumID
    delete from [dbo].[yaf_ForumReadTracking] where ForumID = @ForumID

    -- BAI CHANGED 02.02.2004
    -- Delete topics, messages and attachments

    declare @tmpTopicID int;
    declare topic_cursor cursor for
        select TopicID from [dbo].[yaf_Topic]
        where ForumID = @ForumID
        order by TopicID desc
    
    open topic_cursor
    
    fetch next from topic_cursor
    into @tmpTopicID
    
    -- Check @@FETCH_STATUS to see if there are any more rows to fetch.
    while @@FETCH_STATUS = 0
    begin
        exec [dbo].[yaf_topic_delete] @tmpTopicID,1,1;
    
       -- This is executed as long as the previous fetch succeeds.
        fetch next from topic_cursor
        into @tmpTopicID
    end
    
    close topic_cursor
    deallocate topic_cursor

    -- TopicDelete finished
    -- END BAI CHANGED 02.02.2004

    delete from [dbo].[yaf_ForumAccess] where ForumID = @ForumID
    --ABOT CHANGED
    --Delete UserForums Too 
    delete from [dbo].[yaf_UserForum] where ForumID = @ForumID
    --END ABOT CHANGED 09.04.2004
    delete from [dbo].[yaf_Forum] where ForumID = @ForumID
end

GO

create procedure [dbo].[yaf_forum_list](@BoardID int,@ForumID int=null) as
begin
    if @ForumID = 0 set @ForumID = null
    if @ForumID is null
        select a.* from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID order by a.SortOrder
    else
        select a.* from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID and a.ForumID = @ForumID
end
GO

create procedure [dbo].[yaf_forum_maxid](@BoardID int) as
begin	
    select top 1 a.ForumID from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID order by a.ForumID desc	
end
GO

CREATE procedure [dbo].[yaf_forum_listall] (@BoardID int,@UserID int,@root int = 0) as
begin
    if @root = 0
begin
      select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        Indent = 0,
        a.ParentID,
        a.PollGroupID
    from
        [dbo].[yaf_Forum] a
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c   on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ReadAccess) > 0
    order by
        b.SortOrder,
        a.SortOrder,
        b.CategoryID,
        a.ForumID
end
else if  @root > 0
begin
    select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        Indent = 0,
        a.ParentID
    from
        [dbo].[yaf_Forum] a
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c   on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ReadAccess) > 0 and
        a.ForumID = @root

    order by
        b.SortOrder,
        a.SortOrder,
        b.CategoryID,
        a.ForumID
end
else
begin
    select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        Indent = 0,
        a.ParentID
    from
        [dbo].[yaf_Forum] a
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c   on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ReadAccess) > 0 and
        b.CategoryID = -@root

    order by
        b.SortOrder,
        a.SortOrder,
        b.CategoryID,
        a.ForumID
end
end
GO

CREATE PROCEDURE [dbo].[yaf_forum_listall_fromcat](@BoardID int,@CategoryID int) AS
BEGIN
        SELECT     b.CategoryID, b.Name AS Category, a.ForumID, a.Name AS Forum, a.ParentID, a.PollGroupID 
    FROM         [dbo].[yaf_Forum] a INNER JOIN
                          [dbo].[yaf_Category] b ON b.CategoryID = a.CategoryID
        WHERE
            b.CategoryID=@CategoryID and
            b.BoardID=@BoardID
        ORDER BY
            b.SortOrder,
            a.SortOrder
END
GO

create procedure [dbo].[yaf_forum_listallmymoderated](@BoardID int,@UserID int) as
begin
        select
        b.CategoryID,
        Category = b.Name,
        a.ForumID,
        Forum = a.Name,
        x.Indent
    from
        (select
            b.ForumID,
            Indent = 0
        from
            [dbo].[yaf_Category] a
            join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
        where
            a.BoardID=@BoardID and
            b.ParentID is null
    
        union
    
        select
            c.ForumID,
            Indent = 1
        from
            [dbo].[yaf_Category] a
            join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
            join [dbo].[yaf_Forum] c on c.ParentID=b.ForumID
        where
            a.BoardID=@BoardID and
            b.ParentID is null
    
        union
    
        select
            d.ForumID,
            Indent = 2
        from
            [dbo].[yaf_Category] a
            join [dbo].[yaf_Forum] b on b.CategoryID=a.CategoryID
            join [dbo].[yaf_Forum] c on c.ParentID=b.ForumID
            join [dbo].[yaf_Forum] d on d.ParentID=c.ForumID
        where
            a.BoardID=@BoardID and
            b.ParentID is null
        ) as x
        join [dbo].[yaf_Forum] a on a.ForumID=x.ForumID
        join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] c   on c.ForumID=a.ForumID
    where
        c.UserID=@UserID and
        b.BoardID=@BoardID and
        CONVERT(int,c.ModeratorAccess)>0
    order by
        b.SortOrder,
        a.SortOrder
end
GO

create procedure [dbo].[yaf_forum_listpath](@ForumID int) as
begin
declare @tbllpath TABLE (ForumID int, Name nvarchar(255), Indent int);
declare @Indent int;
declare @CurrentParentID int;
declare @CurrentForumID int;
declare @CurrentForumName nvarchar(255);

-- Flag if a record was selected
declare @Selectcount int;

-- Forum 1000 is a legal value... always use -1 instead
SET @CurrentParentID = -1;

SET @Indent = 0;
	while (@CurrentParentID IS NOT NULL and @Indent < 1000)
      begin                
	   set @Selectcount = 0;
       select
			@Selectcount = 1,
            @CurrentForumID =  a.ForumID,
            @CurrentParentID = a.ParentID,
            @CurrentForumName = a.Name			                      
        from
             [dbo].[yaf_Forum] a
        where
            a.ForumID=@ForumID;

		if @Selectcount = 0
		begin
			break;
		end
            Insert into @tbllpath(ForumID, Name,Indent)
            values (@CurrentForumID,@CurrentForumName,@Indent)
            SET @ForumID = @CurrentParentID; 
            SET @Indent = @Indent + 1;
     end     
     select ForumID, Name from  @tbllpath order by Indent Desc; 
end
GO

create procedure [dbo].[yaf_forum_listread](@BoardID int,@UserID int,@CategoryID int=null,@ParentID int=null, @StyledNicks bit=null,	@FindLastRead bit = 0) as
begin
declare @tbl1 table
( ForumID int, ParentID int)
declare @tbl table
( ForumID int, ParentID int)
-- get parent forums list first
insert into @tbl1(ForumID,ParentID)
select 	
        b.ForumID,
        b.ParentID		
    from 
        [dbo].[yaf_Category] a  
        join [dbo].[yaf_Forum] b   on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=b.ForumID	
    where 
        a.BoardID = @BoardID and
        ((b.Flags & 2)=0 or x.ReadAccess<>0) and
        (@CategoryID is null or a.CategoryID=@CategoryID) and
        ((@ParentID is null and b.ParentID is null) or b.ParentID=@ParentID) and
        x.UserID = @UserID
            order by
        a.SortOrder,
        b.SortOrder
            
-- child forums
insert into @tbl(ForumID,ParentID)
select 	
        b.ForumID,
        b.ParentID		
    from 
        [dbo].[yaf_Category] a  
        join [dbo].[yaf_Forum] b   on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=b.ForumID		
    where 
        a.BoardID = @BoardID and
        ((b.Flags & 2)=0 or x.ReadAccess<>0) and
        (@CategoryID is null or a.CategoryID=@CategoryID) and
        (b.ParentID IN (SELECT ForumID FROM @tbl1)) and
        x.UserID = @UserID
        order by
        a.SortOrder,
        b.SortOrder

 insert into @tbl(ForumID,ParentID)
 select * FROM @tbl1
 -- more childrens can be added to display as a tree

        select 
        a.CategoryID, 
        Category		= a.Name, 
        ForumID			= b.ForumID,
        Forum			= b.Name, 
        b.[Description],
        b.ImageURL,
        b.Styles,
        b.ParentID,
        b.PollGroupID,
        Topics			= [dbo].[yaf_forum_topics](b.ForumID),
        Posts			= [dbo].[yaf_forum_posts](b.ForumID),		
        LastPosted		= t.LastPosted,
        LastMessageID	= t.LastMessageID,
        LastMessageFlags = t.LastMessageFlags,
        LastUserID		= t.LastUserID,
        LastUser		= IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x  where x.UserID=t.LastUserID)),
        LastUserDisplayName	= IsNull(t.LastUserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x  where x.UserID=t.LastUserID)),
        LastTopicID		= t.TopicID,
        TopicMovedID    = t.TopicMovedID,
        LastTopicName	= t.Topic,
        LastTopicStatus = t.Status,
        LastTopicStyles = t.Styles,
        b.Flags,
        Viewing			= (select count(1) from [dbo].[yaf_Active] x  JOIN [dbo].[yaf_User] usr  ON x.UserID = usr.UserID where x.ForumID=b.ForumID AND usr.IsActiveExcluded = 0),
        b.RemoteURL,		
        ReadAccess = CONVERT(int,x.ReadAccess),
        Style = case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = t.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x  WHERE x.ForumID=b.ForumID AND x.UserID = @UserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y  WHERE y.TopicID=t.TopicID AND y.UserID = @UserID)
             else ''	 end 					
    from 
        [dbo].[yaf_Category] a 
        join [dbo].[yaf_Forum] b  on b.CategoryID=a.CategoryID
        join [dbo].[yaf_ActiveAccess] x  on x.ForumID=b.ForumID
        left outer join [dbo].[yaf_Topic] t  ON t.TopicID = [dbo].[yaf_forum_lasttopic](b.ForumID,@UserID,b.LastTopicID,b.LastPosted)
    where 		
        (@CategoryID is null or a.CategoryID=@CategoryID) and		
         x.UserID = @UserID and		
        (b.ForumID IN (SELECT ForumID FROM @tbl) )
    order by
        a.SortOrder,
        b.SortOrder
end
GO

create procedure [dbo].[yaf_forum_listSubForums](@ForumID int) as
begin
        select Sum(1) from [dbo].[yaf_Forum] where ParentID = @ForumID
end
GO

create procedure [dbo].[yaf_forum_listtopics](@ForumID int) as
begin
        select * from [dbo].[yaf_Topic]
    Where ForumID = @ForumID
end
GO

CREATE PROCEDURE [dbo].[yaf_forum_moderatelist](@BoardID int,@UserID int) AS
BEGIN
    
SELECT
        b.*,
        MessageCount  = 
        (SELECT     count([dbo].[yaf_Message].MessageID)
        FROM         [dbo].[yaf_Message] INNER JOIN
                              [dbo].[yaf_Topic] ON [dbo].[yaf_Message].TopicID = [dbo].[yaf_Topic].TopicID
        WHERE ([dbo].[yaf_Message].IsApproved=0) and ([dbo].[yaf_Message].IsDeleted=0) and ([dbo].[yaf_Topic].IsDeleted  = 0) AND ([dbo].[yaf_Topic].ForumID=b.ForumID)),

        ReportedCount	= 
        (SELECT     count([dbo].[yaf_Message].MessageID)
        FROM         [dbo].[yaf_Message] INNER JOIN
                              [dbo].[yaf_Topic] ON [dbo].[yaf_Message].TopicID = [dbo].[yaf_Topic].TopicID
        WHERE (([dbo].[yaf_Message].Flags & 128)=128) and ([dbo].[yaf_Message].IsDeleted=0) and ([dbo].[yaf_Topic].IsDeleted = 0) AND ([dbo].[yaf_Topic].ForumID=b.ForumID))
        FROM
        [dbo].[yaf_Category] a

    JOIN [dbo].[yaf_Forum] b ON b.CategoryID=a.CategoryID
    JOIN [dbo].[yaf_ActiveAccess] c   ON c.ForumID=b.ForumID

    WHERE
        a.BoardID=@BoardID AND
        CONVERT(int,c.ModeratorAccess)>0 AND
        c.UserID=@UserID
    ORDER BY
        a.SortOrder,
        b.SortOrder
END
GO

create procedure [dbo].[yaf_forum_moderators] (@BoardID int, @StyledNicks bit) as
BEGIN
        select
        ForumID = a.ForumID, 
        ForumName = f.Name,
        ModeratorID = a.GroupID, 
        ModeratorName = b.Name,	
        ModeratorEmail = '',
        ModeratorAvatar = '',
        ModeratorAvatarImage = CAST(0 as bit),
        ModeratorDisplayName = b.Name,
        Style = case(@StyledNicks)
            when 1 then b.Style  
            else ''	 end,						
        IsGroup=1
    from
        [dbo].[yaf_Forum] f  
        INNER JOIN [dbo].[yaf_ForumAccess] a  ON a.ForumID = f.ForumID
        INNER JOIN [dbo].[yaf_Group] b  ON b.GroupID = a.GroupID
        INNER JOIN [dbo].[yaf_AccessMask] c  ON c.AccessMaskID = a.AccessMaskID
    where
        b.BoardID = @BoardID and
		(c.Flags & 64)<>0
    union all
    select 
        ForumID = access.ForumID,
        ForumName = f.Name,
        ModeratorID = usr.UserID, 
        ModeratorName = usr.Name,
        ModeratorEmail = usr.Email,
        ModeratorAvatar = ISNULL(usr.Avatar, ''),
        ModeratorAvatarImage = CAST((select count(1) from [dbo].[yaf_User] x where x.UserID=usr.UserID and AvatarImage is not null)as bit),
        ModeratorDisplayName = usr.DisplayName,
        Style = case(@StyledNicks)
            when 1 then  usr.UserStyle
            else ''	 end,						
        IsGroup=0
    from
        [dbo].[yaf_User] usr 
        INNER JOIN (
            select
                UserID				= a.UserID,
                ForumID				= x.ForumID,
                ModeratorAccess		= MAX(ModeratorAccess)						
            from
                [dbo].[yaf_vaccessfull] as x 		       				
                INNER JOIN [dbo].[yaf_UserGroup] a  on a.UserID=x.UserID
                INNER JOIN [dbo].[yaf_Group] b  on b.GroupID=a.GroupID
            WHERE 
                b.BoardID = @BoardID and
		        ModeratorAccess <> 0 AND x.AdminGroup = 0
            GROUP BY a.UserID, x.ForumID
        ) access ON usr.UserID = access.UserID
        JOIN    [dbo].[yaf_Forum] f  
        ON f.ForumID = access.ForumID
                   
        JOIN [dbo].[yaf_Rank] r
        ON r.RankID = usr.RankID
    where
        access.ModeratorAccess<>0
    order by
        IsGroup desc,
        ModeratorName asc
END
GO

CREATE procedure [dbo].[yaf_forum_save](
    @ForumID 		int=null,
    @CategoryID		int,
    @ParentID		int=null,
    @Name			nvarchar(50),
    @Description	nvarchar(255),
    @SortOrder		smallint,
    @Locked			bit,
    @Hidden			bit,
    @IsTest			bit,
    @Moderated		bit,
	@ModeratedPostCount int = null,
	@IsModeratedNewTopicOnly bit,
    @RemoteURL		nvarchar(100)=null,
    @ThemeURL		nvarchar(100)=null,
    @ImageURL       nvarchar(128)=null,
    @Styles         nvarchar(255)=null,
    @AccessMaskID	int = null
) as
begin
    declare @BoardID	int
    declare @Flags		int	
    
    set @Flags = 0
    if @Locked<>0 set @Flags = @Flags | 1
    if @Hidden<>0 set @Flags = @Flags | 2
    if @IsTest<>0 set @Flags = @Flags | 4
    if @Moderated<>0 set @Flags = @Flags | 8
    
    if @ForumID = 0 set @ForumID = null
    if @ParentID = 0 set @ParentID = null
    
    if @ForumID is not null begin	
        update [dbo].[yaf_Forum] set 
            ParentID=@ParentID,
            Name=@Name,
            [Description]=@Description,
            SortOrder=@SortOrder,
            CategoryID=@CategoryID,
            RemoteURL = @RemoteURL,
            ThemeURL = @ThemeURL,
            ImageURL = @ImageURL,
            Styles = @Styles,
            Flags = @Flags,
			ModeratedPostCount = @ModeratedPostCount,
			IsModeratedNewTopicOnly = @IsModeratedNewTopicOnly
        where ForumID=@ForumID
    end
    else begin		
    
        insert into [dbo].[yaf_Forum](ParentID,Name,Description,SortOrder,CategoryID,NumTopics,NumPosts,RemoteURL,ThemeURL,Flags,ImageURL,Styles,ModeratedPostCount,IsModeratedNewTopicOnly)
        values(@ParentID,@Name,@Description,@SortOrder,@CategoryID,0,0,@RemoteURL,@ThemeURL,@Flags,@ImageURL,@Styles,@ModeratedPostCount,@IsModeratedNewTopicOnly)
        select @ForumID = SCOPE_IDENTITY()

        insert into [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID) 
        select GroupID,@ForumID,@AccessMaskID
        from [dbo].[yaf_Group]
        where BoardID IN (select BoardID from [dbo].[yaf_Category] where CategoryID=@CategoryID)
    end
    select ForumID = @ForumID
end
GO

create procedure [dbo].[yaf_forum_updatelastpost](@ForumID int) as
begin
        update [dbo].[yaf_Forum] set
        LastPosted = (select top 1 y.Posted from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0 order by y.Posted desc),
        LastTopicID = (select top 1 y.TopicID from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastMessageID = (select top 1 y.MessageID from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastUserID = (select top 1 y.UserID from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastUserName = (select top 1 y.UserName from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0order by y.Posted desc),
        LastUserDisplayName = (select top 1 y.UserDisplayName from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID = @ForumID and (y.Flags & 24)=16 and x.IsDeleted = 0 order by y.Posted desc)
    where ForumID = @ForumID
end
GO

create procedure [dbo].[yaf_forum_updatestats]
@ForumID int
as
begin
    --update Forum with forum and subforum topic values
    update  f
        set NumPosts  = isnull(t.Numposts, 0),
            NumTopics = isnull(t.Numtopics, 0)
    from    [dbo].[yaf_Forum] as f cross apply (select sum(t.NumPosts) as Numposts,
                                                                                count(t.TopicID) as Numtopics
                                                                         from   [dbo].[yaf_Topic] as t
                                                                                inner join
                                                                                [dbo].[yaf_Forum] as ff
                                                                                on ff.ForumID = t.ForumID
                                                                         where  (ff.ForumID = f.ForumID
                                                                                 or ff.ParentID = f.ForumID)
                                                                                and t.IsDeleted <> 1) as t
    where   f.ForumID = isnull(@ForumID, f.ForumID);
end
go


CREATE procedure [dbo].[yaf_forumaccess_group](@GroupID int) as
begin
        select 
        a.*,
        ForumName = b.Name,
        CategoryName = c.Name ,
        CategoryID = b.CategoryID,
        ParentID = b.ParentID,
        BoardName = brd.Name 
    from 
        [dbo].[yaf_ForumAccess] a
        inner join [dbo].[yaf_Forum] b on b.ForumID=a.ForumID
        inner join [dbo].[yaf_Category] c on c.CategoryID=b.CategoryID
        inner join [dbo].[yaf_Board] brd on brd.BoardID=c.BoardID
    where 
        a.GroupID = @GroupID
    order by
        brd.Name,
        c.SortOrder,
        b.SortOrder
end
GO

create procedure [dbo].[yaf_forumaccess_list](@ForumID int) as
begin
        select 
        a.*,
        GroupName=b.Name 
    from 
        [dbo].[yaf_ForumAccess] a 
        inner join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
    where 
        a.ForumID = @ForumID
end
GO

create procedure [dbo].[yaf_forumaccess_save](
    @ForumID			int,
    @GroupID			int,
    @AccessMaskID		int
) as
begin
        update [dbo].[yaf_ForumAccess]
        set AccessMaskID=@AccessMaskID
    where 
        ForumID = @ForumID and 
        GroupID = @GroupID
end
GO

create procedure [dbo].[yaf_group_delete](@GroupID int) as
begin
    delete from [dbo].[yaf_EventLogGroupAccess] where GroupID = @GroupID
    delete from [dbo].[yaf_ForumAccess] where GroupID = @GroupID
    delete from [dbo].[yaf_UserGroup] where GroupID = @GroupID
    delete from [dbo].[yaf_Group] where GroupID = @GroupID
end
GO

create procedure [dbo].[yaf_group_list](@BoardID int,@GroupID int=null) as
begin
        if @GroupID is null
        select * from [dbo].[yaf_Group] where BoardID=@BoardID order by SortOrder 
    else
        select * from [dbo].[yaf_Group] where BoardID=@BoardID and GroupID=@GroupID
end
GO

create procedure [dbo].[yaf_group_eventlogaccesslist](@BoardID int = null) as
begin
        if @BoardID is null
        select g.*,b.Name as BoardName from [dbo].[yaf_Group] g
        join [dbo].[yaf_Board] b on b.BoardID = g.BoardID order by g.SortOrder 
    else
        select g.*,b.Name as BoardName from [dbo].[yaf_Group] g
        join [dbo].[yaf_Board] b on b.BoardID = g.BoardID where g.BoardID=@BoardID  order by g.SortOrder
end
GO

create procedure [dbo].[yaf_group_member](@BoardID int,@UserID int) as
begin
        select 
        a.GroupID,
        a.Name,
        Member = (select count(1) from [dbo].[yaf_UserGroup] x where x.UserID=@UserID and x.GroupID=a.GroupID)
    from
        [dbo].[yaf_Group] a
    where
        a.BoardID=@BoardID  
    order by
        a.Name
end
GO

CREATE procedure [dbo].[yaf_group_save](
    @GroupID		int,
    @BoardID		int,
    @Name			nvarchar(255),
    @IsAdmin		bit,
    @IsGuest		bit,
    @IsStart		bit,
    @IsModerator	bit,   
    @AccessMaskID	int=null,
    @PMLimit int=null,
    @Style nvarchar(255)=null,
    @SortOrder smallint,
    @Description nvarchar(128)=null,
    @UsrSigChars int=null,
    @UsrSigBBCodes	nvarchar(255)=null,
    @UsrSigHTMLTags nvarchar(255)=null,
    @UsrAlbums int=null,
    @UsrAlbumImages int=null
) as
begin
        declare @Flags	int
    
    set @Flags = 0
    if @IsAdmin<>0 set @Flags = @Flags | 1
    if @IsGuest<>0 set @Flags = @Flags | 2
    if @IsStart<>0 set @Flags = @Flags | 4
    if @IsModerator<>0 set @Flags = @Flags | 8
    if @Style IS NOT NULL AND LEN(@Style) <=2 set @Style = NULL

    if @GroupID>0 begin
        update [dbo].[yaf_Group] set
            Name = @Name,
            Flags = @Flags,
            PMLimit = @PMLimit,
            Style = @Style,
            SortOrder = @SortOrder,
            Description = @Description,
            UsrSigChars = @UsrSigChars,
            UsrSigBBCodes = @UsrSigBBCodes,
            UsrSigHTMLTags = @UsrSigHTMLTags,
            UsrAlbums = @UsrAlbums,
            UsrAlbumImages = @UsrAlbumImages 
        where GroupID = @GroupID
    end
    else begin
        insert into [dbo].[yaf_Group](Name,BoardID,Flags,PMLimit,Style, SortOrder,Description,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages)
        values(@Name,@BoardID,@Flags,@PMLimit,@Style,@SortOrder,@Description,@UsrSigChars,@UsrSigBBCodes,@UsrSigHTMLTags,@UsrAlbums,@UsrAlbumImages);
        set @GroupID = SCOPE_IDENTITY()
        insert into [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID)
        select @GroupID,a.ForumID,@AccessMaskID from [dbo].[yaf_Forum] a join [dbo].[yaf_Category] b on b.CategoryID=a.CategoryID where b.BoardID=@BoardID
    end	 
    -- group styles override rank styles
    IF @Style IS NOT NULL AND len(@Style) > 2
      BEGIN
      EXEC [dbo].[yaf_user_savestyle] @GroupID,null
      END	
 
    
          
    select GroupID = @GroupID
end
GO

CREATE procedure [dbo].[yaf_group_rank_style]( @BoardID int) as
begin
-- added fields to get overall info about groups and ranks
SELECT 1 AS LegendID,[Name],Style, PMLimit,[Description],UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages FROM [dbo].[yaf_Group]
WHERE BoardID = @BoardID GROUP BY SortOrder,[Name],Style,[Description],PMLimit,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages
UNION
SELECT 2  AS LegendID,[Name],Style,PMLimit, [Description],UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages FROM [dbo].[yaf_Rank]
WHERE BoardID = @BoardID GROUP BY SortOrder,[Name],Style,[Description],PMLimit,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages
end
GO

create procedure [dbo].[yaf_mail_create]
(
    @From nvarchar(255),
    @FromName nvarchar(255) = NULL,
    @To nvarchar(255),
    @ToName nvarchar(255) = NULL,
    @Subject nvarchar(100),
    @Body ntext,
    @BodyHtml ntext = NULL,
	@SendTries int,
	@SendAttempt datetime,
    @UTCTIMESTAMP datetime
)
AS 
BEGIN
        insert into [dbo].[yaf_Mail]
        (FromUser,FromUserName,ToUser,ToUserName,Created,Subject,Body,BodyHtml,SendTries,SendAttempt)
    values
        (@From,@FromName,@To,@ToName,@UTCTIMESTAMP ,@Subject,@Body,@BodyHtml,@SendTries,@SendAttempt)	
END
GO

create procedure [dbo].[yaf_mail_save]
(
    @MailID int,
    @SendTries int,
    @SendAttempt datetime
)
AS 
BEGIN
    update [dbo].[yaf_Mail] set 
    SendAttempt = @SendAttempt,
    SendTries = @SendTries
    where MailID = @MailID
END
GO

create procedure [dbo].[yaf_mail_createwatch]
(
    @TopicID int,
    @From nvarchar(255),
    @FromName nvarchar(255) = NULL,
    @Subject nvarchar(100),
    @Body ntext,
    @BodyHtml ntext = null,
    @UserID int,
    @UTCTIMESTAMP datetime
)
AS
BEGIN
    insert into [dbo].[yaf_Mail](FromUser,FromUserName,ToUser,ToUserName,Created,[Subject],Body,BodyHtml)
    select
        @From,
        @FromName,
        b.Email,
        b.Name,
        @UTCTIMESTAMP ,
        @Subject,
        @Body,
        @BodyHtml
    from
        [dbo].[yaf_WatchTopic] a
        inner join [dbo].[yaf_User] b on b.UserID=a.UserID
    where
        b.UserID <> @UserID and
        b.NotificationType NOT IN (10, 20) AND
        a.TopicID = @TopicID and
        (a.LastMail is null or a.LastMail < b.LastVisit)
    
    insert into [dbo].[yaf_Mail](FromUser,FromUserName,ToUser,ToUserName,Created,Subject,Body,BodyHtml)
    select
        @From,
        @FromName,
        b.Email,
        b.Name,
        @UTCTIMESTAMP,
        @Subject,
        @Body,
        @BodyHtml
    from
        [dbo].[yaf_WatchForum] a
        inner join [dbo].[yaf_User] b on b.UserID=a.UserID
        inner join [dbo].[yaf_Topic] c on c.ForumID=a.ForumID
    where
        b.UserID <> @UserID and
        b.NotificationType NOT IN (10, 20) AND
        c.TopicID = @TopicID and
        (a.LastMail is null or a.LastMail < b.LastVisit) and
        not exists(select 1 from [dbo].[yaf_WatchTopic] x where x.UserID=b.UserID and x.TopicID=c.TopicID)

    update [dbo].[yaf_WatchTopic] set LastMail = @UTCTIMESTAMP
    where TopicID = @TopicID
    and UserID <> @UserID
    
    update [dbo].[yaf_WatchForum] set LastMail = @UTCTIMESTAMP  
    where ForumID = (select ForumID from [dbo].[yaf_Topic] where TopicID = @TopicID)
    and UserID <> @UserID
end
GO

CREATE PROCEDURE [dbo].[yaf_mail_delete](@MailID int) as
BEGIN
        DELETE FROM [dbo].[yaf_Mail] WHERE MailID = @MailID
END
GO

create procedure [dbo].[yaf_mail_list]
(
    @ProcessID int,
    @UTCTIMESTAMP datetime
)
AS
begin
	declare @count int

	set @count = (select (count(*)/100) 
	              from [dbo].[yaf_Mail] 
				  where SendAttempt is null or SendAttempt < @UTCTIMESTAMP
				 )
	set @count = (select Case When @count < 10 Then 10 Else @count End)

	update [dbo].[yaf_Mail]
	set 
		SendTries = SendTries + 1,
		SendAttempt = DATEADD(n,5,@UTCTIMESTAMP),
		ProcessID = @ProcessID
	where
		MailID in (select top (@count) MailID 
		           from [dbo].[yaf_Mail] 
				   where SendAttempt is null or SendAttempt < @UTCTIMESTAMP)

	select top (@count) * 
	from [dbo].[yaf_Mail] 
	where ProcessID = @ProcessID 
	order by SendAttempt, Created desc

	delete from [dbo].[yaf_Mail] where ProcessID = @ProcessID
end
go

create procedure [dbo].[yaf_message_approve](@MessageID int) as begin
    
    declare	@UserID		int
    declare	@ForumID	int
    declare	@TopicID	int
    declare	@Flags	    int
    declare @Posted		datetime
    declare	@UserName	nvarchar(255)
    declare	@UserDisplayName	nvarchar(255)
    select 
        @UserID = a.UserID,
        @TopicID = a.TopicID,
        @ForumID = b.ForumID,
        @Posted = a.Posted,
        @UserName = a.UserName,
        @UserDisplayName = a.UserDisplayName,
        @Flags	= a.Flags
    from
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
    where
        a.MessageID = @MessageID

    -- update Message table, set meesage flag to approved
    update [dbo].[yaf_Message] set Flags = Flags | 16 where MessageID = @MessageID

    -- update User table to increase postcount
    if exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
    begin
        update [dbo].[yaf_User] set NumPosts = NumPosts + 1 where UserID = @UserID
        -- upgrade user, i.e. promote rank if conditions allow it
        exec [dbo].[yaf_user_upgrade] @UserID
    end

    -- update Forum table with last topic/post info
    update [dbo].[yaf_Forum] set
        LastPosted = @Posted,
        LastTopicID = @TopicID,
        LastMessageID = @MessageID,
        LastUserID = @UserID,
        LastUserName = @UserName,
        LastUserDisplayName = @UserDisplayName
    where ForumID = @ForumID

    -- update Topic table with info about last post in topic
    update [dbo].[yaf_Topic] set
        LastPosted = @Posted,
        LastMessageID = @MessageID,
        LastUserID = @UserID,
        LastUserName = @UserName,
        LastUserDisplayName = @UserDisplayName,		
        LastMessageFlags = @Flags | 16,
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @TopicID
    
    -- update forum stats
    exec [dbo].[yaf_forum_updatestats] @ForumID	
end
GO

create procedure [dbo].[yaf_message_delete](@MessageID int, @EraseMessage bit = 0) as
begin
    
    declare @TopicID		int
    declare @ForumID		int
    declare @MessageCount	int
    declare @LastMessageID	int
    declare @UserID			int
	declare @ReplyToID      int

    -- Find TopicID and ForumID
    select @TopicID=b.TopicID,@ForumID=b.ForumID,@UserID = a.UserID 
        from 
            [dbo].[yaf_Message] a
            inner join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
        where
            a.MessageID=@MessageID
   

    -- Update LastMessageID in Topic
    update [dbo].[yaf_Topic] set 
        LastPosted = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null,
        LastMessageFlags = null
    where LastMessageID = @MessageID

    -- Update LastMessageID in Forum
    update [dbo].[yaf_Forum] set 
        LastPosted = null,
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

    -- should it be physically deleter or not?
    if (@EraseMessage = 1) begin
        delete [dbo].[yaf_Attachment] where MessageID = @MessageID
        delete [dbo].[yaf_MessageReportedAudit] where MessageID = @MessageID
        delete [dbo].[yaf_MessageReported] where MessageID = @MessageID        
        --delete thanks related to this message
        delete [dbo].[yaf_Thanks] where MessageID = @MessageID
        delete [dbo].[yaf_MessageHistory] where MessageID = @MessageID

		-- update message positions inside the topic
		declare @Posted datetime = (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID)
		
		update [dbo].[yaf_Message] 
		    set Position = Position-1
		where    
		    TopicID = @TopicID and Posted > @Posted and MessageID != @MessageID

		-- update ReplyTo
		set	@ReplyToID = (select 
		                      MessageID
						  from
						      [dbo].[yaf_Message]
                          where     
						      TopicID = @TopicID and Position = 0 and MessageID != @MessageID
					     )

		update 
		    [dbo].[yaf_Message] 
	        set ReplyTo = @ReplyToID
        where
		    TopicID = @TopicID and ReplyTo = @MessageID

	    -- fix Reply To if equal with MessageID
		update 
		    [dbo].[yaf_Message] 
	        set ReplyTo = NULL
        where
		    TopicID = @TopicID and MessageID = @ReplyToID

	    -- finally delete the message we want to delete
        delete 
		    [dbo].[yaf_Message] 
		where 
		    MessageID = @MessageID
        
    end
    else begin
        -- "Delete" it only by setting deleted flag message
        update [dbo].[yaf_Message] set Flags = Flags | 8 where MessageID = @MessageID
    end
    
    -- update user post count
    if exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
    begin
	     UPDATE [dbo].[yaf_User] SET NumPosts = (SELECT count(MessageID) FROM [dbo].[yaf_Message] WHERE UserID = @UserID AND IsDeleted = 0 AND IsApproved = 1) WHERE UserID = @UserID
    end
    
    -- Delete topic if there are no more messages
    select @MessageCount = count(1) from [dbo].[yaf_Message] where TopicID = @TopicID and IsDeleted=0
    if @MessageCount=0 exec [dbo].[yaf_topic_delete] @TopicID, 1, @EraseMessage

    -- update lastpost
    exec [dbo].[yaf_topic_updatelastpost] @ForumID,@TopicID
    exec [dbo].[yaf_forum_updatestats] @ForumID

    -- update topic numposts
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @TopicID
end
GO

create procedure [dbo].[yaf_message_findunread](
@TopicID int,
@MessageID int,
@LastRead datetime,
@MinDateTime datetime,
@ShowDeleted bit = 0,
@AuthorUserID int) as
begin
   declare @MessagePosition int

   if (@MessageID > 0)
   begin
   select top 1 @MessagePosition = CONVERT(int,RowNum), @MessageID = tbl.MessageID  from 
   (
   select ROW_NUMBER() OVER ( order by Posted desc) as RowNum, m.MessageID
   from [dbo].[yaf_Message] m  
   where m.TopicID = @TopicID			
        AND m.IsApproved = 1
        AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))        
   ) as tbl
   where tbl.MessageID = @MessageID
   order by tbl.RowNum ASC;
   end
-- a message with the id was not found or we are looking for first unread or last post 
  if (@MessageID <= 0)
   begin  
   -- if value > yaf db min value (1-1-1903) we are looking for first unread 
   if (@LastRead > @MinDateTime)  
   begin
   select top 1 @MessagePosition = CONVERT(int,RowNum), @MessageID = tbl.MessageID  from 
   (
   select ROW_NUMBER() OVER ( order by m.Posted asc) as RowNum, m.MessageID, m.Posted
   from [dbo].[yaf_Message] m  
   where m.TopicID = @TopicID			
        AND m.IsApproved = 1
        AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))		     
   ) as tbl
   where tbl.Posted > @LastRead 
   order by tbl.RowNum ASC;
   end
   -- if first unread was not found or we looking for last posted 
   if (@LastRead < @MinDateTime OR @MessagePosition IS NULL) 
   begin    
        select top 1 @MessageID = m.MessageID, @MessagePosition = 1
    from
        [dbo].[yaf_Message] m	
    where
        m.TopicID = @TopicID			
        AND m.IsApproved = 1
       AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))
    order by		
        m.Posted DESC;    
    end

	 select top 1 @MessagePosition = CONVERT(int,RowNum), @MessageID = tbl.MessageID  from 
   (
   select ROW_NUMBER() OVER ( order by Posted desc) as RowNum, m.MessageID
   from [dbo].[yaf_Message] m  
   where m.TopicID = @TopicID			
        AND m.IsApproved = 1
        AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))        
   ) as tbl
   where tbl.MessageID = @MessageID
   order by tbl.RowNum ASC;
end
  
select @MessageID as MessageID, @MessagePosition as MessagePosition;
end
GO
CREATE PROCEDURE [dbo].[yaf_message_getReplies](@MessageID int) as
BEGIN
    SELECT MessageID FROM [dbo].[yaf_Message] WHERE ReplyTo = @MessageID
END
GO

CREATE PROCEDURE [dbo].[yaf_message_list](@MessageID int) AS
BEGIN
        SELECT
        a.MessageID,
        a.UserID,
        UserName = b.Name,
        UserDisplayName = b.DisplayName,
        a.[Message],
        c.TopicID,
        c.ForumID,
        c.Topic,
        c.Priority,
        c.Description,
        c.Status,
        c.Styles,
        a.Flags,
        c.UserID AS TopicOwnerID,
        Edited = IsNull(a.Edited,a.Posted),
        TopicFlags = c.Flags,
        ForumFlags = d.Flags,
        a.EditReason,
        a.Position,
        a.IsModeratorChanged,
        a.DeleteReason,
        a.BlogPostID,
        c.PollID,
        a.IP,
        a.ReplyTo,
        a.ExternalMessageId,
        a.ReferenceMessageId,
        HasAttachments	= convert(bit,ISNULL((select top 1 1 from [dbo].[yaf_Attachment] x where x.MessageID=a.MessageID),0))
    FROM
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] c on c.TopicID = a.TopicID
        inner join [dbo].[yaf_Forum] d on c.ForumID = d.ForumID
    WHERE
        a.MessageID = @MessageID
END
GO

CREATE PROCEDURE [dbo].[yaf_message_secdata]( @PageUserID int, @MessageID int ) AS
BEGIN
-- BoardID=@BoardID and
if (@PageUserID is null)
select top 1 @PageUserID = UserID from [dbo].[yaf_User] where  (Flags & 4)<>0 ORDER BY Joined DESC
SELECT
        m.MessageID,
        m.UserID,
        IsNull(t.UserName, u.Name) as Name,
        IsNull(t.UserDisplayName, u.DisplayName) as DisplayName,
        m.[Message],
        m.Posted,
        t.TopicID,
        t.ForumID,
        t.Topic,
        t.Priority,
        m.Flags,
        t.UserID,
        Edited = IsNull(m.Edited,m.Posted),
        EditedBy = IsNull(m.EditedBy,m.UserID), 
        TopicFlags = t.Flags,		
        m.EditReason,
        m.Position,
        m.IsModeratorChanged,
        m.DeleteReason,
        m.BlogPostID,
        t.PollID,
        m.IP
    FROM		
        [dbo].[yaf_Topic] t 
        join  [dbo].[yaf_Message] m ON m.TopicID = t.TopicID
        join  [dbo].[yaf_User] u ON u.UserID = t.UserID
        left join [dbo].[yaf_ActiveAccess] x   on x.ForumID=IsNull(t.ForumID,0)
    WHERE
        m.MessageID = @MessageID AND x.UserID=@PageUserID  AND  CONVERT(int,x.ReadAccess) > 0
END
GO

CREATE PROCEDURE [dbo].[yaf_message_listreported](@ForumID int) AS
BEGIN
        SELECT
        a.*,
        OriginalMessage = b.[Message],
        b.[Flags],
        b.[IsModeratorChanged],	
        UserName	= IsNull(b.UserName,d.Name),
        UserDisplayName	= IsNull(b.UserDisplayName,d.DisplayName),
        UserID = b.UserID,
        Posted		= b.Posted,
        TopicID = b.TopicID,
        Topic		= c.Topic,		
        NumberOfReports = (SELECT count(LogID) FROM [dbo].[yaf_MessageReportedAudit] WHERE [dbo].[yaf_MessageReportedAudit].MessageID = a.MessageID)
    FROM
        [dbo].[yaf_MessageReported] a
    INNER JOIN
        [dbo].[yaf_Message] b ON a.MessageID = b.MessageID
    INNER JOIN
        [dbo].[yaf_Topic] c ON b.TopicID = c.TopicID
    INNER JOIN
        [dbo].[yaf_User] d ON b.UserID = d.UserID
    WHERE
        c.ForumID = @ForumID and
        (c.Flags & 16)=0 and
        b.IsDeleted=0 and
        c.IsDeleted=0 and
        (b.Flags & 128)=128
    ORDER BY
        b.TopicID DESC, b.Posted DESC
END
GO

CREATE PROCEDURE [dbo].[yaf_message_listreporters](@MessageID int, @UserID int = null) AS
BEGIN
    IF ( @UserID > 0 )
    BEGIN
    SELECT b.UserID, UserName = a.Name,UserDisplayName = a.DisplayName, b.ReportedNumber, b.ReportText  
    FROM [dbo].[yaf_User] a,			
    [dbo].[yaf_MessageReportedAudit] b		
    WHERE   a.UserID = b.UserID  AND b.MessageID = @MessageID AND b.UserID = @UserID 
    END
    ELSE
    BEGIN
    SELECT b.UserID, UserName = a.Name,UserDisplayName = a.DisplayName, b.ReportedNumber, b.ReportText  
    FROM [dbo].[yaf_User] a,			
    [dbo].[yaf_MessageReportedAudit] b		
    WHERE   a.UserID = b.UserID  AND b.MessageID = @MessageID
    END
    
    
END
GO

CREATE PROCEDURE [dbo].[yaf_message_report](@MessageID int, @ReporterID int, @ReportedDate datetime, @ReportText nvarchar(4000),@UTCTIMESTAMP datetime) AS
BEGIN
    IF @ReportText IS NULL SET @ReportText = '';
    IF NOT exists(SELECT MessageID FROM [dbo].[yaf_MessageReported] WHERE MessageID=@MessageID)
    BEGIN
        INSERT INTO [dbo].[yaf_MessageReported](MessageID, [Message])
        SELECT 
            a.MessageID,
            a.[Message]
        FROM
            [dbo].[yaf_Message] a
        WHERE
            a.MessageID = @MessageID
    END	
    IF NOT exists(SELECT MessageID from [dbo].[yaf_MessageReportedAudit] WHERE MessageID=@MessageID AND UserID=@ReporterID)
        INSERT INTO [dbo].[yaf_MessageReportedAudit](MessageID,UserID,Reported,ReportText) VALUES (@MessageID,@ReporterID,@ReportedDate, CONVERT(varchar,@UTCTIMESTAMP )+ '??' + @ReportText)
    ELSE 
        UPDATE [dbo].[yaf_MessageReportedAudit] SET ReportedNumber = ( CASE WHEN ReportedNumber < 2147483647 THEN  ReportedNumber  + 1 ELSE ReportedNumber END ), Reported = @ReportedDate, ReportText = (CASE WHEN (LEN(ReportText) + LEN(@ReportText) + 255 < 4000)  THEN  ReportText + '|' + CONVERT(varchar(36),@UTCTIMESTAMP )+ '??' +  @ReportText ELSE ReportText END) WHERE MessageID=@MessageID AND UserID=@ReporterID 
    

    -- update Message table to set message with flag Reported
    UPDATE [dbo].[yaf_Message] SET Flags = Flags | 128 WHERE MessageID = @MessageID

END
GO

CREATE PROCEDURE [dbo].[yaf_message_reportresolve](@MessageFlag int, @MessageID int, @UserID int,@UTCTIMESTAMP datetime) AS
BEGIN
    
    UPDATE [dbo].[yaf_MessageReported]
    SET Resolved = 1, ResolvedBy = @UserID, ResolvedDate = @UTCTIMESTAMP 
    WHERE MessageID = @MessageID;
    
    /* Remove Flag */
    UPDATE [dbo].[yaf_Message]
    SET Flags = Flags & (~POWER(2, @MessageFlag))
    WHERE MessageID = @MessageID;
END
GO

CREATE PROCEDURE [dbo].[yaf_message_reportcopyover](@MessageID int) AS
BEGIN
        UPDATE [dbo].[yaf_MessageReported]
    SET [dbo].[yaf_MessageReported].[Message] = m.[Message]
    FROM [dbo].[yaf_MessageReported] mr
    JOIN [dbo].[yaf_Message] m ON m.MessageID = mr.MessageID
    WHERE mr.MessageID = @MessageID;
END
GO

CREATE PROCEDURE [dbo].[yaf_message_save](
    @TopicID		int,
    @UserID			int,
    @Message		ntext,	
    @UserName		nvarchar(255)=null,
    @IP				varchar(39),
    @Posted			datetime=null,
    @ReplyTo		int,
    @BlogPostID		nvarchar(50) = null,
    @ExternalMessageId nvarchar(255) = null,
    @ReferenceMessageId nvarchar(255) = null,
    @Flags			int,
    @UTCTIMESTAMP datetime,	
    @MessageID		int output
)
AS
BEGIN
        DECLARE @ForumID INT, @ForumFlags INT, @Position INT, @Indent INT, @OverrideDisplayName BIT, @ReplaceName nvarchar(255) 

    IF @Posted IS NULL
        SET @Posted = @UTCTIMESTAMP 

    SELECT @ForumID = x.ForumID, @ForumFlags = y.Flags
    FROM 
        [dbo].[yaf_Topic] x
    INNER JOIN 
        [dbo].[yaf_Forum] y ON y.ForumID=x.ForumID
    WHERE x.TopicID = @TopicID 

    IF @ReplyTo IS NULL
            SELECT @Position = 0, @Indent = 0 -- New thread

    ELSE IF @ReplyTo<0
        -- Find post to reply to AND indent of this post
        SELECT TOP 1 @ReplyTo = MessageID, @Indent = Indent+1
        FROM [dbo].[yaf_Message]
        WHERE TopicID = @TopicID AND ReplyTo IS NULL
        ORDER BY Posted

    ELSE
        -- Got reply, find indent of this post
            SELECT @Indent=Indent+1
            FROM [dbo].[yaf_Message]
            WHERE MessageID=@ReplyTo

    -- Find position
    IF @ReplyTo IS NOT NULL
    BEGIN
        DECLARE @temp INT
        
        SELECT @temp=ReplyTo,@Position=Position FROM [dbo].[yaf_Message] WHERE MessageID=@ReplyTo

        IF @temp IS NULL
            -- We are replying to first post
            SELECT @Position=MAX(Position)+1 FROM [dbo].[yaf_Message] WHERE TopicID=@TopicID

        ELSE
            -- Last position of replies to parent post
            SELECT @Position=MIN(Position) FROM [dbo].[yaf_Message] WHERE ReplyTo=@temp AND Position>@Position

        -- No replies, THEN USE parent post's position+1
        IF @Position IS NULL
            SELECT @Position=Position+1 FROM [dbo].[yaf_Message] WHERE MessageID=@ReplyTo
        -- Increase position of posts after this

        UPDATE [dbo].[yaf_Message] SET Position=Position+1 WHERE TopicID=@TopicID AND Position>=@Position
    END

	-- Add points to Users total reputation points
 	UPDATE [dbo].[yaf_User] SET Points = Points + 3 WHERE UserID = @UserID
    
	-- this check is for guest user only to not override replace name 
    if (SELECT Name FROM [dbo].[yaf_User] WHERE UserID = @UserID) != @UserName
    begin
    SET @OverrideDisplayName = 1
    end
    SET @ReplaceName = (CASE WHEN @OverrideDisplayName = 1 THEN @UserName ELSE (SELECT DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID) END);
    INSERT [dbo].[yaf_Message] ( UserID, [Message], TopicID, Posted, UserName, UserDisplayName, IP, ReplyTo, Position, Indent, Flags, BlogPostID, ExternalMessageId, ReferenceMessageId)
    VALUES ( @UserID, @Message, @TopicID, @Posted, @UserName,@ReplaceName, @IP, @ReplyTo, @Position, @Indent, @Flags & ~16, @BlogPostID, @ExternalMessageId, @ReferenceMessageId)	
    
    SET @MessageID = SCOPE_IDENTITY()

    IF ((@Flags & 16) = 16)
        EXEC [dbo].[yaf_message_approve] @MessageID	
END
    
GO

CREATE procedure [dbo].[yaf_message_unapproved](@ForumID int) as begin
        select
        MessageID	= b.MessageID,
        UserID		= b.UserID,
        UserName	= IsNull(b.UserName,c.Name),
        UserDisplayName = IsNull(b.UserDisplayName, c.DisplayName),		
        Posted		= b.Posted,
        TopicID		= a.TopicID,
        Topic		= a.Topic,
        MessageCount = a.NumPosts,
        [Message]	= b.[Message],
        [Flags]		= b.Flags,
        [IsModeratorChanged] = b.IsModeratorChanged
    from
        [dbo].[yaf_Topic] a
        inner join [dbo].[yaf_Message] b on b.TopicID = a.TopicID
        inner join [dbo].[yaf_User] c on c.UserID = b.UserID
    where
        a.ForumID = @ForumID and
        b.IsApproved=0 and
        a.IsDeleted =0 and
        b.IsDeleted=0
    order by
        a.Posted
end

GO

CREATE procedure [dbo].[yaf_message_update](
@MessageID int,
@Priority int,
@Subject nvarchar(100),
@Description nvarchar(255),
@Status nvarchar(255),
@Styles nvarchar(255),
@Flags int, 
@Message ntext, 
@Reason nvarchar(100), 
@EditedBy int,
@IsModeratorChanged bit, 
@OverrideApproval bit = null,
@OriginalMessage ntext,
@CurrentUtcTimestamp datetime) as
begin
        declare @TopicID	int
    declare	@ForumFlags	int

    set @Flags = @Flags & ~16	
    
    select 
        @TopicID	= a.TopicID,
        @ForumFlags	= c.Flags
    from 
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
        inner join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
    where 
        a.MessageID = @MessageID

    if (@OverrideApproval = 1 OR (@ForumFlags & 8)=0) set @Flags = @Flags | 16

	-- save original message in the history if this is the first edit
	if not exists(select 1 from [dbo].[yaf_MessageHistory] where MessageID=@MessageID)
	  begin
	    insert into [dbo].[yaf_MessageHistory] (MessageID,		
            [Message],
            IP,
            Edited,
            EditedBy,		
            EditReason,
            IsModeratorChanged,
            Flags)
            select MessageID, 
			       OriginalMessage=@OriginalMessage, 
				   IP,
				   Posted,
				   UserID,
				   NULL, 
				   IsModeratorChanged, 
				   Flags
		    from [dbo].[yaf_Message] where MessageID = @MessageID
	  end
	else
	 begin
	     -- insert current message variant - use OriginalMessage in future 	
        insert into [dbo].[yaf_MessageHistory]
        (MessageID,		
            [Message],
            IP,
            Edited,
            EditedBy,		
            EditReason,
            IsModeratorChanged,
            Flags)
        select 
        MessageID, OriginalMessage=@OriginalMessage, IP , @CurrentUtcTimestamp, IsNull(EditedBy,UserID), EditReason, IsModeratorChanged, Flags
        from [dbo].[yaf_Message] where MessageID = @MessageID
	 end
    
    
    
    
    update [dbo].[yaf_Message] set
        [Message] = @Message,
        Edited = @CurrentUtcTimestamp,
        EditedBy = @EditedBy,
        Flags = @Flags,
        IsModeratorChanged  = @IsModeratorChanged,
                EditReason = @Reason
    where
        MessageID = @MessageID

    if @Priority is not null begin
        update [dbo].[yaf_Topic] set
            Priority = @Priority
        where
            TopicID = @TopicID
    end

    if not @Subject = '' and @Subject is not null begin
        update [dbo].[yaf_Topic] set
            Topic = @Subject, 
            [Description] = @Description,
            [Status] = @Status,
            [Styles] = @Styles
        where
            TopicID = @TopicID
    end 
    
    -- If forum is moderated, make sure last post pointers are correct
    if (@ForumFlags & 8)<>0 exec [dbo].[yaf_topic_updatelastpost]
end
GO

create procedure [dbo].[yaf_nntpforum_delete](@NntpForumID int) as
begin
        delete from [dbo].[yaf_NntpTopic] where NntpForumID = @NntpForumID
    delete from [dbo].[yaf_NntpForum] where NntpForumID = @NntpForumID
end
GO

create procedure [dbo].[yaf_nntpforum_list](@BoardID int,@Minutes int=null,@NntpForumID int=null,@Active bit=null,@UTCTIMESTAMP datetime) as
begin
        select
        a.Name,
        a.[Address],
        Port = IsNull(a.Port,119),
        a.UserName,
        a.UserPass,		
        a.NntpServerID,
        b.NntpForumID,		
        b.GroupName,
        b.ForumID,
        b.LastMessageNo,
        b.LastUpdate,
        b.Active,
        b.DateCutOff,
        ForumName = c.Name
    from
        [dbo].[yaf_NntpServer] a
        join [dbo].[yaf_NntpForum] b on b.NntpServerID = a.NntpServerID
        join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
    where
        (@Minutes is null or datediff(n,b.LastUpdate,@UTCTIMESTAMP )>@Minutes) and
        (@NntpForumID is null or b.NntpForumID=@NntpForumID) and
        a.BoardID=@BoardID and
        (@Active is null or b.Active=@Active)
    order by
        a.Name,
        b.GroupName
end
GO

create procedure [dbo].[yaf_nntpforum_save](@NntpForumID int=null,@NntpServerID int,@GroupName nvarchar(100),@ForumID int,@Active bit,@DateCutOff datetime = null,@UTCTIMESTAMP datetime) as
begin
        if @NntpForumID is null
        insert into [dbo].[yaf_NntpForum](NntpServerID,GroupName,ForumID,LastMessageNo,LastUpdate,Active,DateCutOff)
        values(@NntpServerID,@GroupName,@ForumID,0,DATEADD(d,-1,@UTCTIMESTAMP),@Active,@DateCutOff)
    else
        update [dbo].[yaf_NntpForum] set
            NntpServerID = @NntpServerID,
            GroupName = @GroupName,
            ForumID = @ForumID,
            Active = @Active,
            DateCutOff = @DateCutOff
        where NntpForumID = @NntpForumID
end
GO

create procedure [dbo].[yaf_nntpforum_update](@NntpForumID int,@LastMessageNo int,@UserID int,@UTCTIMESTAMP datetime) as
begin
        declare	@ForumID	int
    
    select @ForumID=ForumID from [dbo].[yaf_NntpForum] where NntpForumID=@NntpForumID

    update [dbo].[yaf_NntpForum] set
        LastMessageNo = @LastMessageNo,
        LastUpdate = @UTCTIMESTAMP 
    where NntpForumID = @NntpForumID

    update [dbo].[yaf_Topic] set 
        NumPosts = (select count(1) from [dbo].[yaf_message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where ForumID=@ForumID

    --exec [dbo].[yaf_user_upgrade] @UserID
    exec [dbo].[yaf_forum_updatestats] @ForumID
    -- exec [dbo].[yaf_topic_updatelastpost] @ForumID,null
end
GO

create procedure [dbo].[yaf_nntpserver_delete](@NntpServerID int) as
begin
        delete from [dbo].[yaf_NntpTopic] where NntpForumID in (select NntpForumID from [dbo].[yaf_NntpForum] where NntpServerID = @NntpServerID)
    delete from [dbo].[yaf_NntpForum] where NntpServerID = @NntpServerID
    delete from [dbo].[yaf_NntpServer] where NntpServerID = @NntpServerID
end
GO

create procedure [dbo].[yaf_nntpserver_list](@BoardID int=null,@NntpServerID int=null) as
begin
        if @NntpServerID is null
        select * from [dbo].[yaf_NntpServer] where BoardID=@BoardID order by Name
    else
        select * from [dbo].[yaf_NntpServer] where NntpServerID=@NntpServerID
end
GO

create procedure [dbo].[yaf_nntpserver_save](
    @NntpServerID 	int=null,
    @BoardID	int,
    @Name		nvarchar(50),
    @Address	nvarchar(100),
    @Port		int,
    @UserName	nvarchar(255)=null,
    @UserPass	nvarchar(50)=null
) as begin
        if @NntpServerID is null
        insert into [dbo].[yaf_NntpServer](Name,BoardID,Address,Port,UserName,UserPass)
        values(@Name,@BoardID,@Address,@Port,@UserName,@UserPass)
    else
        update [dbo].[yaf_NntpServer] set
            Name = @Name,
            [Address] = @Address,
            Port = @Port,
            UserName = @UserName,
            UserPass = @UserPass
        where NntpServerID = @NntpServerID
end
GO

create procedure [dbo].[yaf_nntptopic_list](@Thread nvarchar(64)) as
begin
        select
        a.*
    from
        [dbo].[yaf_NntpTopic] a
    where
        a.Thread = @Thread
end
GO

create procedure [dbo].[yaf_nntptopic_savemessage](
    @NntpForumID	int,
    @Topic 			nvarchar(100),
    @Body 			ntext,
    @UserID 		int,
    @UserName		nvarchar(255),
    @IP				varchar(39),
    @Posted			datetime,
    @ExternalMessageId	nvarchar(255),
    @ReferenceMessageId nvarchar(255) = null,
    @UTCTIMESTAMP datetime
) as 
begin
    declare	@ForumID	int
    declare @TopicID	int
    declare	@MessageID	int
    declare @ReplyTo	int
    
    SET @TopicID = NULL
    SET @ReplyTo = NULL

    select @ForumID = ForumID from [dbo].[yaf_NntpForum] where NntpForumID=@NntpForumID

    if exists(select 1 from [dbo].[yaf_Message] where ExternalMessageId = @ReferenceMessageId)
    begin
        -- referenced message exists
        select @TopicID = TopicID, @ReplyTo = MessageID from [dbo].[yaf_Message] where ExternalMessageId = @ReferenceMessageId
    end else
    if not exists(select 1 from [dbo].[yaf_Message] where ExternalMessageId = @ExternalMessageId)
    begin
        if (@ReferenceMessageId IS NULL)
        begin
            -- thread doesn't exists
            insert into [dbo].[yaf_Topic](ForumID,UserID,UserName, UserDisplayName,Posted,Topic,[Views],Priority,NumPosts)
            values (@ForumID,@UserID,@UserName, @UserName,@Posted,@Topic,0,0,0)
            set @TopicID=SCOPE_IDENTITY()

            insert into [dbo].[yaf_NntpTopic](NntpForumID,Thread,TopicID)
            values (@NntpForumID,'',@TopicID)
        end
    end
    
    IF @TopicID IS NOT NULL
    BEGIN
        exec [dbo].[yaf_message_save]  @TopicID, @UserID, @Body, @UserName, @IP, @Posted, @ReplyTo, NULL, @ExternalMessageId, @ReferenceMessageId, 17,@UTCTIMESTAMP, @MessageID OUTPUT
    END	
end
GO

CREATE procedure [dbo].[yaf_pageaccess](
    @BoardID int,
    @UserID	int,
    @IsGuest bit,
    @UTCTIMESTAMP datetime
) as
begin
    -- ensure that access right are in place		
        if not exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess]  
            where UserID = @UserID )		
            begin
            insert into [dbo].[yaf_ActiveAccess](
            UserID,
            BoardID,
            ForumID,
            IsAdmin, 
            IsForumModerator,
            IsModerator,
            IsGuestX,
            LastActive, 
            ReadAccess,
            PostAccess,
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,	
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess)
            select 
            UserID, 
            @BoardID, 
            ForumID, 
            IsAdmin,
            IsForumModerator,
            IsModerator,
            @IsGuest,
            @UTCTIMESTAMP,
            ReadAccess,
            (CONVERT([bit],sign([PostAccess]&(2)),(0))),
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess			
            from [dbo].[yaf_vaccess] 
            where UserID = @UserID 
            end
    -- return information
    select   
        x.*
    from
     [dbo].[yaf_ActiveAccess] x  
    where
        x.UserID = @UserID
end
GO

CREATE procedure [dbo].[yaf_pageaccess_path](
    @SessionID	nvarchar(24),
    @BoardID	int,
    @UserKey	nvarchar(64),
    @IP			varchar(39),
    @Location	nvarchar(255),
    @ForumPage  nvarchar(255) = null,
    @Browser	nvarchar(50),
    @Platform	nvarchar(50),
    @CategoryID	int = null,
    @ForumID	int = null,
    @TopicID	int = null,
    @MessageID	int = null,
    @IsCrawler	bit = 0,
    @IsMobileDevice	bit = 0,
    @DontTrack	bit = 0,
    @UTCTIMESTAMP datetime
) as
begin
    declare @UserID			int
    declare @UserBoardID	int
    declare @IsGuest		tinyint	
    declare @rowcount		int
    declare @PreviousVisit	datetime
    declare @ActiveUpdate   tinyint	
    declare @ActiveFlags	int
    declare @GuestID        int
    
    set implicit_transactions off	
    -- set IsActiveNow ActiveFlag - it's a default
    set @ActiveFlags = 1;


    -- f a guest id should do it every time to be sure that guest access rights are in ActiveAccess table
    select top 1 @GuestID = UserID from [dbo].[yaf_User] where BoardID=@BoardID and (Flags & 4)=4 ORDER BY Joined DESC
        set @rowcount=@@rowcount
        if (@rowcount > 1)
        begin
            raiserror('Found %d possible guest users. There should be one and only one user marked as guest.',16,1,@rowcount)
            end	
        if (@rowcount = 0)
        begin
            raiserror('No candidates for a guest were found for the board %d.',16,1,@BoardID)
            end
     -- verify that there's not the sane session for other board and drop it if required. Test code for portals with many boards
     delete from [dbo].[yaf_Active] where (SessionID=@SessionID  and BoardID <> @BoardID)
             
    if @UserKey is null
    begin
    -- this is a guest
        SET @UserID = @GuestID
        set @IsGuest = 1
        -- set IsGuest ActiveFlag  1 | 2
        set @ActiveFlags = 3
        set @UserBoardID = @BoardID
        -- crawlers are always guests 
        if	@IsCrawler = 1
            begin
                -- set IsCrawler ActiveFlag
                set @ActiveFlags =  @ActiveFlags | 8
            end 
    end 
    else	
    begin
        select @UserID = UserID, @UserBoardID = BoardID from [dbo].[yaf_User]  where BoardID=@BoardID and ProviderUserKey=@UserKey
        set @IsGuest = 0
        -- make sure that registered users are not crawlers
        set @IsCrawler = 0
        -- set IsRegistered ActiveFlag
        set @ActiveFlags = @ActiveFlags | 4
    end

    
    -- Check valid ForumID
    if @ForumID is not null and not exists(select 1 from [dbo].[yaf_Forum] where ForumID=@ForumID) begin
        set @ForumID = null
    end
    -- Check valid CategoryID
    if @CategoryID is not null and not exists(select 1 from [dbo].[yaf_Category] where CategoryID=@CategoryID) begin
        set @CategoryID = null
    end
    -- Check valid MessageID
    if @MessageID is not null and not exists(select 1 from [dbo].[yaf_Message] where MessageID=@MessageID) begin
        set @MessageID = null
    end
    -- Check valid TopicID
    if @TopicID is not null and not exists(select 1 from [dbo].[yaf_Topic] where TopicID=@TopicID) begin
        set @TopicID = null
    end	
    
    -- get previous visit
    if  @IsGuest = 0	 begin
        select @PreviousVisit = LastVisit from [dbo].[yaf_User] where UserID = @UserID
    end
    
    -- update last visit
    update [dbo].[yaf_User] set 
        LastVisit = @UTCTIMESTAMP,
        IP = @IP
    where UserID = @UserID

    -- find missing ForumID/TopicID
    if @MessageID is not null begin
        select
            @CategoryID = c.CategoryID,
            @ForumID = b.ForumID,
            @TopicID = b.TopicID
        from
            [dbo].[yaf_Message] a
            inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
            inner join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
            inner join [dbo].[yaf_Category] d on d.CategoryID = c.CategoryID
        where
            a.MessageID = @MessageID and
            d.BoardID = @BoardID
    end
    else if @TopicID is not null begin
        select 
            @CategoryID = b.CategoryID,
            @ForumID = a.ForumID 
        from 
            [dbo].[yaf_Topic] a
            inner join [dbo].[yaf_Forum] b on b.ForumID = a.ForumID
            inner join [dbo].[yaf_Category] c on c.CategoryID = b.CategoryID
        where 
            a.TopicID = @TopicID and
            c.BoardID = @BoardID
    end
    else if @ForumID is not null begin
        select
            @CategoryID = a.CategoryID
        from
            [dbo].[yaf_Forum] a
            inner join [dbo].[yaf_Category] b on b.CategoryID = a.CategoryID
        where
            a.ForumID = @ForumID and
            b.BoardID = @BoardID
    end
    
    if @DontTrack != 1 and @UserID is not null and @UserBoardID=@BoardID begin
      if exists(select 1 from [dbo].[yaf_Active] where (SessionID=@SessionID OR ( Browser = @Browser AND (Flags & 8) = 8 )) and BoardID=@BoardID)
        begin
          -- user is not a crawler - use his session id
          if @IsCrawler <> 1
          begin		   
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage		
            where SessionID = @SessionID AND BoardID=@BoardID			
            end
            else
            begin
            -- search crawler by other parameters then session id
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage	
            where Browser = @Browser AND IP = @IP AND BoardID=@BoardID
            -- trace crawler: the cache is reset every time crawler moves to next page ? Disabled as cache reset will overload server 
            -- set @ActiveUpdate = 1			
            end
        end
        else 
        begin				
             -- we set @ActiveFlags ready flags 	
            insert into [dbo].[yaf_Active](
            SessionID,
            BoardID,
            UserID,
            IP,
            Login,
            LastActive,
            Location,
            ForumID,
            TopicID,
            Browser,
            [Platform],
            Flags)
            values(
            @SessionID,
            @BoardID,
            @UserID,
            @IP,
            @UTCTIMESTAMP,
            @UTCTIMESTAMP,
            @Location,
            @ForumID,
            @TopicID,
            @Browser,
            @Platform,
            @ActiveFlags)			

            -- update max user stats
            exec [dbo].[yaf_active_updatemaxstats] @BoardID,@UTCTIMESTAMP 
            -- parameter to update active users cache if this is a new user
            if @IsGuest=0
                  begin
                  set @ActiveUpdate = 1
            end
            
        end
        -- remove duplicate users
        if @IsGuest=0
        begin
            -- ensure that no duplicates 
            delete from [dbo].[yaf_Active] where UserID=@UserID and BoardID=@BoardID and SessionID<>@SessionID	    
        
        end
        
    end
    -- return information
    select 
        ActiveUpdate        = ISNULL(@ActiveUpdate,0),
        PreviousVisit		= @PreviousVisit,	
        IsCrawler           = @IsCrawler,
        IsMobileDevice      = @IsMobileDevice,
        CategoryID			= @CategoryID,
        CategoryName		= (select Name from [dbo].[yaf_Category] where CategoryID = @CategoryID),
        ForumName			= (select Name from [dbo].[yaf_Forum] where ForumID = @ForumID),
        TopicID				= @TopicID,
        TopicName			= (select Topic from [dbo].[yaf_Topic] where TopicID = @TopicID),
        ForumTheme			= (select ThemeURL from [dbo].[yaf_Forum] where ForumID = @ForumID)
    
end
GO

CREATE procedure [dbo].[yaf_pageload](
    @SessionID	nvarchar(24),
    @BoardID	int,
    @UserKey	nvarchar(64),
    @IP			varchar(39),
    @Location	nvarchar(255),
    @ForumPage  nvarchar(255) = null,
    @Browser	nvarchar(50),
    @Platform	nvarchar(50),
    @CategoryID	int = null,
    @ForumID	int = null,
    @TopicID	int = null,
    @MessageID	int = null,
    @IsCrawler	bit = 0,
    @IsMobileDevice	bit = 0,
    @DontTrack	bit = 0,
    @UTCTIMESTAMP datetime
) as
begin
    declare @UserID			int
    declare @UserBoardID	int
    declare @IsGuest		tinyint	
    declare @rowcount		int
    declare @PreviousVisit	datetime
    declare @ActiveUpdate   tinyint	
    declare @ActiveFlags	int
    declare @GuestID        int
    
    set implicit_transactions off	
    -- set IsActiveNow ActiveFlag - it's a default
    set @ActiveFlags = 1;

      -- find a guest id should do it every time to be sure that guest access rights are in ActiveAccess table
    select top 1 @GuestID = UserID from [dbo].[yaf_User]  where BoardID=@BoardID and (Flags & 4)=4 ORDER BY Joined DESC
        set @rowcount=@@rowcount
        if (@rowcount > 1)
        begin
            raiserror('Found %d possible guest users. There should be one and only one user marked as guest.',16,1,@rowcount)
            end	
        if (@rowcount = 0)
        begin
            raiserror('No candidates for a guest were found for the board %d.',16,1,@BoardID)
            end
  
    
             
    if @UserKey is null
    begin
    -- this is a guest	
        SET @UserID = @GuestID
        set @IsGuest = 1
        -- set IsGuest ActiveFlag  1 | 2
        set @ActiveFlags = 3
        set @UserBoardID = @BoardID
        -- crawlers are always guests 
        if	@IsCrawler = 1
            begin
                -- set IsCrawler ActiveFlag
                set @ActiveFlags =  @ActiveFlags | 8
            end 
    end 
    else	
    begin
        select @UserID = UserID, @UserBoardID = BoardID from [dbo].[yaf_User]  where BoardID=@BoardID and ProviderUserKey=@UserKey
        set @IsGuest = 0
        -- make sure that registered users are not crawlers
        set @IsCrawler = 0
        -- set IsRegistered ActiveFlag
        set @ActiveFlags = @ActiveFlags | 4
    end    

    -- Check valid ForumID
    if @ForumID is not null and not exists(select 1 from [dbo].[yaf_Forum] where ForumID=@ForumID) begin
        set @ForumID = null
    end
    -- Check valid CategoryID
    if @CategoryID is not null and not exists(select 1 from [dbo].[yaf_Category] where CategoryID=@CategoryID) begin
        set @CategoryID = null
    end
    -- Check valid MessageID
    if @MessageID is not null and not exists(select 1 from [dbo].[yaf_Message] where MessageID=@MessageID) begin
        set @MessageID = null
    end
    -- Check valid TopicID
    if @TopicID is not null and not exists(select 1 from [dbo].[yaf_Topic] where TopicID=@TopicID) begin
        set @TopicID = null
    end	

    -- find missing ForumID/TopicID
    if @MessageID is not null begin
        select
            @CategoryID = c.CategoryID,
            @ForumID = b.ForumID,
            @TopicID = b.TopicID
        from
            [dbo].[yaf_Message] a
            inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
            inner join [dbo].[yaf_Forum] c on c.ForumID = b.ForumID
            inner join [dbo].[yaf_Category] d on d.CategoryID = c.CategoryID
        where
            a.MessageID = @MessageID and
            d.BoardID = @BoardID
    end
    else if @TopicID is not null begin
        select 
            @CategoryID = b.CategoryID,
            @ForumID = a.ForumID 
        from 
            [dbo].[yaf_Topic] a
            inner join [dbo].[yaf_Forum] b on b.ForumID = a.ForumID
            inner join [dbo].[yaf_Category] c on c.CategoryID = b.CategoryID
        where 
            a.TopicID = @TopicID and
            c.BoardID = @BoardID
    end
    else if @ForumID is not null begin
        select
            @CategoryID = a.CategoryID
        from
            [dbo].[yaf_Forum] a
            inner join [dbo].[yaf_Category] b on b.CategoryID = a.CategoryID
        where
            a.ForumID = @ForumID and
            b.BoardID = @BoardID
    end

        
    
    -- update active access
    -- ensure that access right are in place		
        if not exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess]  
            where UserID = @UserID )		
            begin
            insert into [dbo].[yaf_ActiveAccess](
            UserID,
            BoardID,
            ForumID,
            IsAdmin, 
            IsForumModerator,
            IsModerator,
            IsGuestX,
            LastActive, 
            ReadAccess,
            PostAccess,
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,	
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess)
            select 
            UserID, 
            @BoardID, 
            ForumID, 
            IsAdmin,
            IsForumModerator,
            IsModerator,
            @IsGuest,
            @UTCTIMESTAMP,
            ReadAccess,
            (CONVERT([bit],sign([PostAccess]&(2)),(0))),
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess			
            from [dbo].[yaf_vaccess] 
            where UserID = @UserID 
            end

                -- ensure that guest access right are in place		
        if @UserID != @GuestID and not exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess]  
            where UserID = @GuestID )		
            begin
            insert into [dbo].[yaf_ActiveAccess](
            UserID,
            BoardID,
            ForumID,
            IsAdmin, 
            IsForumModerator,
            IsModerator,
            IsGuestX,
            LastActive, 
            ReadAccess,
            PostAccess,
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,	
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess)
            select 
            UserID, 
            @BoardID, 
            ForumID, 
            IsAdmin,
            IsForumModerator,
            IsModerator,
            @IsGuest,
            @UTCTIMESTAMP,
            ReadAccess,
            (CONVERT([bit],sign([PostAccess]&(2)),(0))),
            ReplyAccess,
            PriorityAccess,
            PollAccess,
            VoteAccess,
            ModeratorAccess,
            EditAccess,
            DeleteAccess,
            UploadAccess,
            DownloadAccess			
            from [dbo].[yaf_vaccess] 
            where UserID = @GuestID 
            end

        if exists (select top 1
            UserID	
            from [dbo].[yaf_ActiveAccess]  
            where UserID = @UserID and ForumID= ISNULL(@ForumID,0) and (ISNULL(@ForumID,0) = 0 OR ReadAccess = 1))		
            begin
                 -- verify that there's not the sane session for other board and drop it if required. Test code for portals with many boards
     delete from [dbo].[yaf_Active] where (SessionID=@SessionID  and (BoardID <> @BoardID or UserID <> @UserID))
    -- get previous visit
    if  @IsGuest = 0	 begin
        select @PreviousVisit = LastVisit from [dbo].[yaf_User] where UserID = @UserID
    end
    
    -- update last visit
    update [dbo].[yaf_User] set 
        LastVisit = @UTCTIMESTAMP,
        IP = @IP
    where UserID = @UserID
    
    if @DontTrack != 1 and @UserID is not null and @UserBoardID=@BoardID begin
      if exists(select 1 from [dbo].[yaf_Active] where (SessionID=@SessionID OR ( Browser = @Browser AND (Flags & 8) = 8 )) and BoardID=@BoardID)
        begin
          -- user is not a crawler - use his session id
          if @IsCrawler <> 1
          begin		   
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage,
                Flags = @ActiveFlags		
            where SessionID = @SessionID AND BoardID=@BoardID			
                -- cache will be updated every time set @ActiveUpdate = 1		
            end
            else
            begin
            -- search crawler by other parameters then session id
            update [dbo].[yaf_Active] set
                UserID = @UserID,
                IP = @IP,
                LastActive = @UTCTIMESTAMP ,
                Location = @Location,
                ForumID = @ForumID,
                TopicID = @TopicID,
                Browser = @Browser,
                [Platform] = @Platform,
                ForumPage = @ForumPage,
                Flags = @ActiveFlags		
            where Browser = @Browser AND IP = @IP AND BoardID=@BoardID
            -- trace crawler: the cache is reset every time crawler moves to next page ? Disabled as cache reset will overload server 
                -- set @ActiveUpdate = 1				 
            end
        end
        else 
        begin				
             -- we set @ActiveFlags ready flags 	
            insert into [dbo].[yaf_Active](
            SessionID,
            BoardID,
            UserID,
            IP,
            Login,
            LastActive,
            Location,
            ForumID,
            TopicID,
            Browser,
            [Platform],
            Flags)
            values(
            @SessionID,
            @BoardID,
            @UserID,
            @IP,
            @UTCTIMESTAMP,
            @UTCTIMESTAMP,
            @Location,
            @ForumID,
            @TopicID,
            @Browser,
            @Platform,
            @ActiveFlags)			
            
            -- update max user stats
            exec [dbo].[yaf_active_updatemaxstats] @BoardID, @UTCTIMESTAMP
            -- parameter to update active users cache if this is a new user
            if @IsGuest=0
                  begin
                  set @ActiveUpdate = 1
            end
            
        end
        -- remove duplicate users
        if @IsGuest=0
        begin
            -- ensure that no duplicates 
            delete from [dbo].[yaf_Active] where UserID=@UserID and BoardID=@BoardID and SessionID<>@SessionID	    
        
        end
        
    end
    end
    -- return information
    select top 1
        ActiveUpdate        = ISNULL(@ActiveUpdate,0),
        PreviousVisit		= @PreviousVisit,	   
        x.*,	
        IsModeratorAny      = ISNULL((select top 1 aa.ModeratorAccess from [dbo].[yaf_ActiveAccess] aa where aa.UserID = @UserID and aa.ModeratorAccess = 1),0),
        IsCrawler           = @IsCrawler,
        IsMobileDevice      = @IsMobileDevice,
        CategoryID			= @CategoryID,
        CategoryName		= (select Name from [dbo].[yaf_Category] where CategoryID = @CategoryID),
        ForumName			= (select Name from [dbo].[yaf_Forum] where ForumID = @ForumID),
        TopicID				= @TopicID,
        TopicName			= (select Topic from [dbo].[yaf_Topic] where TopicID = @TopicID),
        ForumTheme			= (select ThemeURL from [dbo].[yaf_Forum] where ForumID = @ForumID)	 
    from
     [dbo].[yaf_ActiveAccess] x  
    where
        x.UserID = @UserID and x.ForumID=IsNull(@ForumID,0)
end
GO

CREATE PROCEDURE [dbo].[yaf_pmessage_delete](@UserPMessageID int, @FromOutbox bit = 0) as
BEGIN
        DECLARE @PMessageID int

    SET @PMessageID = (SELECT TOP 1 PMessageID FROM [dbo].[yaf_UserPMessage] where UserPMessageID = @UserPMessageID);
        
    IF ( @FromOutbox = 1 AND EXISTS(SELECT (1) FROM [dbo].[yaf_UserPMessage] WHERE UserPMessageID = @UserPMessageID AND IsInOutbox = 1 ) )
    BEGIN
        -- remove IsInOutbox bit which will remove it from the senders outbox
        UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = ([Flags] ^ 2) WHERE UserPMessageID = @UserPMessageID
    END
    
    IF ( @FromOutbox = 0 )
    BEGIN
            -- The pmessage is in archive but still is in sender outbox  
    IF ( EXISTS(SELECT (1) FROM [dbo].[yaf_UserPMessage] WHERE UserPMessageID = @UserPMessageID AND IsInOutbox = 1 AND IsArchived = 1 AND IsDeleted = 0) )
    BEGIN
    -- Remove archive flag and set IsDeleted flag
    UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = [Flags] ^ 4  WHERE UserPMessageID = @UserPMessageID AND IsArchived = 1	
    END
        -- set is deleted...
        UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = ([Flags] ^ 8) WHERE UserPMessageID = @UserPMessageID
    END	
    
    -- see if there are no longer references to this PM.
    IF ( EXISTS(SELECT (1) FROM [dbo].[yaf_UserPMessage] WHERE UserPMessageID = @UserPMessageID AND IsInOutbox = 0 AND IsDeleted = 1 ) )
    BEGIN
        -- delete
        DELETE FROM [dbo].[yaf_UserPMessage] WHERE [PMessageID] = @PMessageID
        DELETE FROM [dbo].[yaf_PMessage] WHERE [PMessageID] = @PMessageID
    END	

END
GO

CREATE PROCEDURE [dbo].[yaf_pmessage_info] as
begin
        select
        NumRead	= (select count(1) from [dbo].[yaf_UserPMessage] WHERE IsRead<>0  AND IsDeleted<>1),
        NumUnread = (select count(1) from [dbo].[yaf_UserPMessage] WHERE IsRead=0  AND IsDeleted<>1),
        NumTotal = (select count(1) from [dbo].[yaf_UserPMessage] WHERE IsDeleted<>1)
end
GO

CREATE PROCEDURE [dbo].[yaf_pmessage_list](@FromUserID int=null,@ToUserID int=null,@UserPMessageID int=null) AS
BEGIN				
        SELECT
    a.ReplyTo, a.PMessageID, b.UserPMessageID, a.FromUserID, d.[Name] AS FromUser, 
    b.[UserID] AS ToUserId, c.[Name] AS ToUser, a.Created, a.[Subject], 
    a.Body, a.Flags, b.IsRead,b.IsReply, b.IsInOutbox, b.IsArchived, b.IsDeleted
FROM
    [dbo].[yaf_PMessage] a
INNER JOIN
    [dbo].[yaf_UserPMessage] b ON a.PMessageID = b.PMessageID
INNER JOIN
    [dbo].[yaf_User] c ON b.UserID = c.UserID
INNER JOIN
    [dbo].[yaf_User] d ON a.FromUserID = d.UserID	
        WHERE	((@UserPMessageID IS NOT NULL AND b.UserPMessageID=@UserPMessageID) OR 
                 (@ToUserID   IS NOT NULL AND b.[UserID]  = @ToUserID) OR (@FromUserID IS NOT NULL AND a.FromUserID = @FromUserID))		
        ORDER BY Created DESC
END
GO

CREATE PROCEDURE [dbo].[yaf_pmessage_markread](@UserPMessageID int=null)
AS
BEGIN
        UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = [Flags] | 1 WHERE UserPMessageID = @UserPMessageID AND IsRead = 0
END
GO

create procedure [dbo].[yaf_pmessage_prune](@DaysRead int,@DaysUnread int,@UTCTIMESTAMP datetime) as
begin
        delete from [dbo].[yaf_UserPMessage]
    where IsRead<>0
    and datediff(dd,(select Created from [dbo].[yaf_PMessage] x where x.PMessageID=[dbo].[yaf_UserPMessage].PMessageID),@UTCTIMESTAMP )>@DaysRead

    delete from [dbo].[yaf_UserPMessage]
    where IsRead=0
    and datediff(dd,(select Created from [dbo].[yaf_PMessage] x where x.PMessageID=[dbo].[yaf_UserPMessage].PMessageID),@UTCTIMESTAMP )>@DaysUnread

    delete from [dbo].[yaf_PMessage]
    where not exists(select 1 from [dbo].[yaf_UserPMessage] x where x.PMessageID=[dbo].[yaf_PMessage].PMessageID)
end
GO

create procedure [dbo].[yaf_pmessage_save](
    @FromUserID	int,
    @ToUserID	int,
    @Subject	nvarchar(100),
    @Body		ntext,
    @Flags		int,
    @ReplyTo    int,
    @UTCTIMESTAMP datetime
) as
begin
    declare @PMessageID int
    declare @UserID int     
    
    IF @ReplyTo<0
    begin
        insert into [dbo].[yaf_PMessage](FromUserID,Created,Subject,Body,Flags)
        values(@FromUserID,@UTCTIMESTAMP ,@Subject,@Body,@Flags)
    end
    else
    begin
        insert into [dbo].[yaf_PMessage](FromUserID,Created,Subject,Body,Flags,ReplyTo)
        values(@FromUserID,@UTCTIMESTAMP ,@Subject,@Body,@Flags,@ReplyTo)

        UPDATE [dbo].[yaf_UserPMessage] SET [IsReply] = (1) WHERE PMessageID = @ReplyTo
    end

    set @PMessageID = SCOPE_IDENTITY()
    if (@ToUserID = 0)
    begin
        insert into [dbo].[yaf_UserPMessage](UserID,PMessageID,Flags)
        select
                a.UserID,@PMessageID,2
        from
                [dbo].[yaf_User] a
                join [dbo].[yaf_UserGroup] b on b.UserID=a.UserID
                join [dbo].[yaf_Group] c on c.GroupID=b.GroupID where
                (c.Flags & 2)=0 and
                c.BoardID=(select BoardID from [dbo].[yaf_User] x where x.UserID=@FromUserID) and a.UserID<>@FromUserID
        group by
                a.UserID
    end
    else
    begin
        insert into [dbo].[yaf_UserPMessage](UserID,PMessageID,Flags) values(@ToUserID,@PMessageID,2)
    end	
end
GO


CREATE PROCEDURE [dbo].[yaf_pmessage_archive](@UserPMessageID int = NULL) AS
BEGIN
        -- set IsArchived bit
    UPDATE [dbo].[yaf_UserPMessage] SET [Flags] = ([Flags] | 4) WHERE UserPMessageID = @UserPMessageID AND IsArchived = 0
END
GO


CREATE PROCEDURE [dbo].[yaf_poll_stats](@PollID int = null) AS
BEGIN

    SELECT
            
        a.PollID,
        b.Question,
        b.Closes,
        b.UserID,		
        a.[ObjectPath],
        a.[MimeType],
        QuestionObjectPath = b.[ObjectPath],
        QuestionMimeType = b.[MimeType],
        a.ChoiceID,
        a.Choice,
        a.Votes,
        pg.IsBound, 
        b.IsClosedBound, 	
        b.AllowMultipleChoices,
        b.ShowVoters,
        b.AllowSkipVote,
        (select sum(x.Votes) from [dbo].[yaf_Choice] x where  x.PollID = a.PollID) as [Total],
        [Stats] = (select 100 * a.Votes / case sum(x.Votes) when 0 then 1 else sum(x.Votes) end from [dbo].[yaf_Choice] x where x.PollID=a.PollID)
    FROM
        [dbo].[yaf_Choice] a		
    INNER JOIN 
        [dbo].[yaf_Poll] b ON b.PollID = a.PollID
    INNER JOIN  
        [dbo].[yaf_PollGroupCluster] pg ON pg.PollGroupID = b.PollGroupID	
        WHERE
        b.PollID = @PollID

END
GO

CREATE PROCEDURE [dbo].[yaf_pollgroup_stats](@PollGroupID int) AS
BEGIN
        SELECT		
        GroupUserID = pg.UserID,	
        a.PollID,
        b.PollGroupID,
        b.Question,
        b.Closes,
        a.ChoiceID,		
        a.Choice,
        a.Votes,
        a.ObjectPath,
        a.MimeType,
        QuestionObjectPath = b.[ObjectPath],
        QuestionMimeType = b.[MimeType],
        pg.IsBound,
        b.IsClosedBound,		
        b.AllowMultipleChoices,
        b.ShowVoters,
        b.AllowSkipVote,
        (select sum(x.Votes) from [dbo].[yaf_Choice] x where  x.PollID = a.PollID) as [Total],
        [Stats] = (select 100 * a.Votes / case sum(x.Votes) when 0 then 1 else sum(x.Votes) end from [dbo].[yaf_Choice] x where x.PollID=a.PollID)
    FROM
        [dbo].[yaf_Choice] a		
    INNER JOIN 
        [dbo].[yaf_Poll] b ON b.PollID = a.PollID
    INNER JOIN  
        [dbo].[yaf_PollGroupCluster] pg ON pg.PollGroupID = b.PollGroupID	  
    WHERE
        pg.PollGroupID = @PollGroupID
        ORDER BY b.PollGroupID
    --	GROUP BY a.PollID, b.Question, b.Closes, a.ChoiceID, a.Choice,a.Votes
        END
GO

CREATE PROCEDURE [dbo].[yaf_pollvote_check](@PollID int, @UserID int = NULL,@RemoteIP varchar(39) = NULL) AS
        IF @UserID IS NULL
    BEGIN
        IF @RemoteIP IS NOT NULL
        BEGIN
            -- check by remote IP
            SELECT PollVoteID FROM [dbo].[yaf_PollVote] WHERE PollID = @PollID AND RemoteIP = @RemoteIP
        END
    END
    ELSE
    BEGIN
        -- check by userid or remote IP
        SELECT PollVoteID FROM [dbo].[yaf_PollVote] WHERE PollID = @PollID AND (UserID = @UserID OR RemoteIP = @RemoteIP)
    END
GO

CREATE PROCEDURE [dbo].[yaf_pollgroup_votecheck](@PollGroupID int, @UserID int = NULL,@RemoteIP varchar(39) = NULL) AS
    IF @UserID IS NULL
      BEGIN
        IF @RemoteIP IS NOT NULL
        BEGIN
            -- check by remote IP
            SELECT PollID, ChoiceID FROM [dbo].[yaf_PollVote] WHERE PollID IN ( SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID) AND RemoteIP = @RemoteIP
        END
        ELSE
        BEGIN
        -- to get structure
            SELECT pv.PollID, pv.ChoiceID, usr.Name as UserName 
            FROM [dbo].[yaf_PollVote] pv 
            JOIN [dbo].[yaf_User] usr ON usr.UserID = pv.UserID
            WHERE pv.PollID IN ( SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID)
        END
      END
    ELSE
      BEGIN
        -- check by userid or remote IP
        SELECT PollID, ChoiceID FROM [dbo].[yaf_PollVote] WHERE PollID IN ( SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID) AND (UserID = @UserID OR RemoteIP = @RemoteIP)
       END
GO

create procedure [dbo].[yaf_post_alluser](@BoardID int,@UserID int,@PageUserID int,@topCount int = 0) as
begin
        IF (@topCount IS NULL) SET @topCount = 0;		
        SET NOCOUNT ON
        SET ROWCOUNT @topCount

    select
        a.MessageID,
        a.Posted,
        [Subject] = c.Topic,
        a.[Message],		
        a.IP,
        a.UserID,
        a.Flags,
        UserName = IsNull(a.UserName,b.Name),
        UserDisplayName = IsNull(a.UserDisplayName, b.DisplayName),
        b.[Signature],
        c.TopicID
    from
        [dbo].[yaf_Message] a
        join [dbo].[yaf_User] b on b.UserID=a.UserID
        join [dbo].[yaf_Topic] c on c.TopicID=a.TopicID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_Category] e on e.CategoryID=d.CategoryID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
    where
        a.UserID = @UserID and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        e.BoardID = @BoardID and
        (a.Flags & 24)=16 and
        c.IsDeleted=0
    order by
        a.Posted desc
        
    SET ROWCOUNT 0;
     SET NOCOUNT OFF
end
GO

create procedure [dbo].[yaf_post_alluser_simple](@BoardID int,@UserID int) as
begin
    select
        a.MessageID,	
        a.IP
    from
        [dbo].[yaf_Message] a
    where
        a.UserID = @UserID
    order by
        a.Posted desc
end
GO

create procedure [dbo].[yaf_post_list](
                 @TopicID int,
                 @PageUserID int,
                 @AuthorUserID int,
                 @UpdateViewCount smallint=1, 
                 @ShowDeleted bit = 1, 
                 @StyledNicks bit = 0,
                 @ShowReputation bit = 0,
                 @SincePostedDate datetime, 
                 @ToPostedDate datetime, 
                 @SinceEditedDate datetime, 
                 @ToEditedDate datetime, 
                 @PageIndex int = 1, 
                 @PageSize int = 0, 
                 @SortPosted int = 2, 
                 @SortEdited int = 0,
                 @SortPosition int = 0,				
                 @ShowThanks bit = 0,
                 @MessagePosition int = 0,
                 @UTCTIMESTAMP datetime) as
begin
   declare @TotalPages int
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
  
   declare @firstselectrownum int 

   declare @floor decimal
   declare @ceiling decimal
  
   declare @offset int   
 
   declare @pageshift int;

    if @UpdateViewCount>0
        update [dbo].[yaf_Topic] set [Views] = [Views] + 1 where TopicID = @TopicID
    -- find total returned count
        select
        @TotalRows = COUNT(m.MessageID)
    from
        [dbo].[yaf_Message] m
    where
        m.TopicID = @TopicID
        AND m.IsApproved = 1
         -- is deleted
       AND (@ShowDeleted = 1 OR m.IsDeleted = 0 OR (@AuthorUserID > 0 AND m.UserID = @AuthorUserID))
        AND m.Posted BETWEEN
        @SincePostedDate AND @ToPostedDate
         /*
        AND 
        m.Edited >= SinceEditedDate
        */ 

    select @TotalPages = CEILING(CONVERT(decimal,@TotalRows)/@PageSize);
    
	-- check if page index is bigger then Total pages
    if (@PageIndex > @TotalPages -1)
    begin
      set @PageIndex = @TotalPages -1
    end

 if (@MessagePosition > 0)
 begin

       -- round to ceiling - total number of pages  
       SELECT @ceiling = CEILING(CONVERT(decimal,@TotalRows)/@PageSize) 
       -- round to floor - a number of full pages
       SELECT @floor = FLOOR(CONVERT(decimal,@TotalRows)/@PageSize)

       SET @pageshift = @MessagePosition - (@TotalRows - @floor*@PageSize)
            if  @pageshift < 0
               begin
                  SET @pageshift = 0
                     end   
   -- here pageshift converts to full pages 
   if (@pageshift <= 0)
   begin    
   set @pageshift = 0
   end
   else 
   begin
   set @pageshift = CEILING(CONVERT(decimal,@pageshift)/@PageSize) 
   end   
   
   SET @PageIndex = @ceiling - @pageshift 
   if @ceiling != @floor
   SET @PageIndex = @PageIndex - 1	 
  
   select @FirstSelectRowNumber = @PageIndex * @PageSize + 1;
   select @LastSelectRowNumber = @FirstSelectRowNumber + @PageSize - 1;  
 end  
 else
 begin
   select @PageIndex = @PageIndex+1;
   select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
   select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
 end; 	
    with MessageIds  as
     (
     select ROW_NUMBER() over (order by (case 
        when @SortPosition = 1 then tt.Position end) ASC,	
        (case 
        when @SortPosted = 2 then tt.Posted end) DESC,
        (case 
        when @SortPosted = 1 then tt.Posted end) ASC, 
        (case 
        when @SortEdited = 2 then tt.Edited end) DESC,
        (case 
        when @SortEdited = 1 then tt.Edited end) ASC) as RowNum, tt.MessageID, tt.Position, tt.Posted, tt.Edited
     from  [dbo].[yaf_Message] tt
     where    tt.TopicID = @TopicID
        AND tt.IsApproved = 1
       AND (@ShowDeleted = 1 OR tt.IsDeleted = 0 OR (@AuthorUserID > 0 AND tt.UserID = @AuthorUserID))
        AND (tt.Posted is null OR (tt.Posted is not null AND
        tt.Posted between @SincePostedDate and @ToPostedDate)) 
        /*
        AND (m.Edited is null OR (m.Edited is not null AND
        (m.Edited >= (case 
        when @SortEdited = 1 then @firstselectedited end) 
        OR m.Edited <= (case 
        when @SortEdited = 2 then @firstselectedited end) OR
        m.Edited >= (case 
        when @SortEdited = 0 then 0
        end)))) 
        */	
      )	  
         select
        d.TopicID,
        d.Topic,
        d.Priority,
        d.Description,
        d.Status,
        d.Styles,
        d.PollID,
        d.UserID AS TopicOwnerID,
        TopicFlags	= d.Flags,
        ForumFlags	= g.Flags,
        m.MessageID,
        m.Posted,		
        [Message] = m.Message, 
        m.UserID,
        m.Position,
        m.Indent,
        m.IP,		
        m.Flags,
        m.EditReason,
        m.IsModeratorChanged,
        m.IsDeleted,
        m.DeleteReason,
        m.BlogPostID,
        m.ExternalMessageId,
        m.ReferenceMessageId,
        UserName = IsNull(m.UserName,b.Name),
        DisplayName =IsNull(m.UserDisplayName,b.DisplayName),
        b.Suspended,
        b.Joined,
        b.Avatar,
        b.[Signature],
        Posts		= b.NumPosts,
        b.Points,
        ReputationVoteDate = (CASE WHEN @ShowReputation = 1 THEN CAST(ISNULL((select top 1 VoteDate from [dbo].[yaf_ReputationVote] repVote where repVote.ReputationToUserID=b.UserID and repVote.ReputationFromUserID=@PageUserID), null) as datetime) ELSE @UTCTIMESTAMP END),
        IsGuest	= CONVERT(bit,IsNull(SIGN(b.Flags & 4),0)),
        d.[Views],
        d.ForumID,
        RankName = c.Name,		
        c.RankImage,
        c.Style as RankStyle,
        Style = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end, 
        Edited = IsNull(m.Edited,m.Posted),
        HasAttachments	= CONVERT(bit,ISNULL((select top 1 1 from [dbo].[yaf_Attachment] x where x.MessageID=m.MessageID),0)),
        HasAvatarImage = ISNULL((select top 1 1 from [dbo].[yaf_User] x where x.UserID=b.UserID and AvatarImage is not null),0),
        TotalRows = @TotalRows,
        PageIndex = @PageIndex,
        up.*
    from
        MessageIds ti
        inner join [dbo].[yaf_Message] m
        ON m.MessageID = ti.MessageID
        join [dbo].[yaf_User] b on b.UserID=m.UserID
        left join [dbo].[yaf_UserProfile] up on up.UserID=b.UserID
        join [dbo].[yaf_Topic] d on d.TopicID=m.TopicID
        join [dbo].[yaf_Forum] g on g.ForumID=d.ForumID
        join [dbo].[yaf_Category] h on h.CategoryID=g.CategoryID
        join [dbo].[yaf_Rank] c on c.RankID=b.RankID        

        WHERE ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC  
end
GO

create procedure [dbo].[yaf_post_list_reverse10](@TopicID int) as
begin
        set nocount on

    select top 10
        a.Posted,
        [Subject] = d.Topic,
        a.[Message],
        a.UserID,
        a.Flags,
        UserName = IsNull(a.UserName,b.Name),
        DisplayName = IsNull(a.UserDisplayName,b.DisplayName),
        Style = b.UserStyle,
        b.[Signature]
    from
        [dbo].[yaf_Message] a 
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] d on d.TopicID = a.TopicID
    where
        (a.Flags & 24)=16 and
        a.TopicID = @TopicID
    order by
        a.Posted desc
end
GO

create procedure [dbo].[yaf_rank_delete](@RankID int) as begin
        delete from [dbo].[yaf_Rank] where RankID = @RankID
end
GO

create procedure [dbo].[yaf_rank_list](@BoardID int,@RankID int=null) as begin
        if @RankID is null
        select
            a.*
        from
            [dbo].[yaf_Rank] a
        where
            a.BoardID=@BoardID
        order by
            a.SortOrder,
            a.Name
    else
        select
            a.*
        from
            [dbo].[yaf_Rank] a
        where
            a.RankID = @RankID
end
GO

create procedure [dbo].[yaf_rank_save](
    @RankID		int,
    @BoardID	int,
    @Name		nvarchar(50),
    @IsStart	bit,
    @IsLadder	bit,
    @MinPosts	int,
    @RankImage	nvarchar(50)=null,
    @PMLimit    int,
    @Style      nvarchar(255)=null,
    @SortOrder  smallint,
    @Description nvarchar(128)=null,
    @UsrSigChars int=null,
    @UsrSigBBCodes	nvarchar(255)=null,
    @UsrSigHTMLTags nvarchar(255)=null,
    @UsrAlbums int=null,
    @UsrAlbumImages int=null  
) as
begin
        declare @Flags int

    if @IsLadder=0 set @MinPosts = null
    if @IsLadder=1 and @MinPosts is null set @MinPosts = 0
    
    set @Flags = 0
    if @IsStart<>0 set @Flags = @Flags | 1
    if @IsLadder<>0 set @Flags = @Flags | 2

    if @Style IS NOT NULL AND LEN(@Style) <=2 set @Style = NULL

    if @RankID>0 begin
        update [dbo].[yaf_Rank] set
            Name = @Name,
            Flags = @Flags,
            MinPosts = @MinPosts,
            RankImage = @RankImage,
            PMLimit = @PMLimit,
            Style = @Style,
            SortOrder = @SortOrder,
            [Description] = @Description,
            UsrSigChars = @UsrSigChars,
            UsrSigBBCodes = @UsrSigBBCodes,
            UsrSigHTMLTags = @UsrSigHTMLTags,
            UsrAlbums = @UsrAlbums,
            UsrAlbumImages = @UsrAlbumImages
        where RankID = @RankID
    end
    else begin
        insert into [dbo].[yaf_Rank](BoardID,Name,Flags,MinPosts,RankImage, PMLimit,Style,SortOrder,Description,UsrSigChars,UsrSigBBCodes,UsrSigHTMLTags,UsrAlbums,UsrAlbumImages)
        values(@BoardID,@Name,@Flags,@MinPosts,@RankImage,@PMLimit,@Style,@SortOrder,@Description,@UsrSigChars,@UsrSigBBCodes,@UsrSigHTMLTags,@UsrAlbums,@UsrAlbumImages);
        set @RankID = SCOPE_IDENTITY()
        -- select @RankID = RankID from [dbo].[yaf_Rank] where RankID = @@Identity;
    end	
        -- group styles override rank styles
 IF @Style IS NOT NULL AND len(@Style) > 2
      BEGIN
      EXEC [dbo].[yaf_user_savestyle] null,@RankID
      END	
        
end
GO

create procedure [dbo].[yaf_registry_list](@Name nvarchar(50) = null,@BoardID int = null) as
BEGIN
        if @BoardID is null
    begin
        IF @Name IS NULL OR @Name = ''
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] where BoardID is null
        END ELSE
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] WHERE LOWER(Name) = LOWER(@Name) and BoardID is null
        END
    end else 
    begin
        IF @Name IS NULL OR @Name = ''
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] where BoardID=@BoardID
        END ELSE
        BEGIN
            SELECT * FROM [dbo].[yaf_Registry] WHERE LOWER(Name) = LOWER(@Name) and BoardID=@BoardID
        END
    end
END
GO

create procedure [dbo].[yaf_registry_save](
    @Name nvarchar(50),
    @Value ntext = NULL,
    @BoardID int = null
) AS
BEGIN
        if @BoardID is null
    begin
        if exists(select 1 from [dbo].[yaf_Registry] where lower(Name)=lower(@Name))
            update [dbo].[yaf_Registry] set Value = @Value where lower(Name)=lower(@Name) and BoardID is null
        else
        begin
            insert into [dbo].[yaf_Registry](Name,Value) values(lower(@Name),@Value)
        end
    end else
    begin
        if exists(select 1 from [dbo].[yaf_Registry] where lower(Name)=lower(@Name) and BoardID=@BoardID)
            update [dbo].[yaf_Registry] set Value = @Value where lower(Name)=lower(@Name) and BoardID=@BoardID
        else
        begin
            insert into [dbo].[yaf_Registry](Name,Value,BoardID) values(lower(@Name),@Value,@BoardID)
        end
    end
END
GO

CREATE PROCEDURE [dbo].[yaf_replace_words_delete](@ID int) AS
BEGIN
        DELETE FROM [dbo].[yaf_Replace_Words] WHERE ID = @ID
END
GO

CREATE PROCEDURE [dbo].[yaf_replace_words_list]
(
    @BoardID int,
    @ID int = null
)
AS BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
        SELECT * FROM [dbo].[yaf_Replace_Words] WHERE BoardId = @BoardID AND ID = @ID
    ELSE
        SELECT * FROM [dbo].[yaf_Replace_Words] WHERE BoardId = @BoardID
END
GO

CREATE PROCEDURE [dbo].[yaf_replace_words_save]
(
    @BoardID int,
    @ID int = null,
    @BadWord nvarchar(255),
    @GoodWord nvarchar(255)
)
AS
BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
    BEGIN
        UPDATE [dbo].[yaf_Replace_Words] SET BadWord = @BadWord, GoodWord = @GoodWord WHERE ID = @ID		
    END
    ELSE BEGIN
        INSERT INTO [dbo].[yaf_Replace_Words]
            (BoardId,BadWord,GoodWord)
        VALUES
            (@BoardID,@BadWord,@GoodWord)
    END
END
GO

CREATE PROCEDURE [dbo].[yaf_spam_words_delete](@ID int) AS
BEGIN
        DELETE FROM [dbo].[yaf_Spam_Words] WHERE ID = @ID
END
GO

CREATE PROCEDURE [dbo].[yaf_spam_words_list]
(
    @BoardID int,
    @ID int = null
)
AS BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
        SELECT * FROM [dbo].[yaf_Spam_Words] WHERE BoardId = @BoardID AND ID = @ID
    ELSE
        SELECT * FROM [dbo].[yaf_Spam_Words] WHERE BoardId = @BoardID
END
GO

CREATE PROCEDURE [dbo].[yaf_spam_words_save]
(
    @BoardID int,
    @ID int = null,
    @SpamWord nvarchar(255)
)
AS
BEGIN
        IF (@ID IS NOT NULL AND @ID <> 0)
    BEGIN
        UPDATE [dbo].[yaf_Spam_Words] SET SpamWord = @SpamWord WHERE ID = @ID		
    END
    ELSE BEGIN
        INSERT INTO [dbo].[yaf_Spam_Words]
            (BoardId,SpamWord)
        VALUES
            (@BoardID,@SpamWord)
    END
END
GO

create procedure [dbo].[yaf_smiley_delete](@SmileyID int=null) as begin
        if @SmileyID is not null
        delete from [dbo].[yaf_Smiley] where SmileyID=@SmileyID
    else
        delete from [dbo].[yaf_Smiley]
end
GO

create procedure [dbo].[yaf_smiley_list](@BoardID int,@SmileyID int=null) as
begin
        if @SmileyID is null
        select
        SmileyID,
        BoardID,
        Code,
        Icon,
        Emoticon,
        SortOrder = CONVERT(int,SortOrder)	 
        from [dbo].[yaf_Smiley] where BoardID=@BoardID order by SortOrder, LEN(Code) desc
    else
        select 	
        SmileyID,
        BoardID,
        Code,
        Icon,
        Emoticon,
        SortOrder = CONVERT(int,SortOrder)	 
        from [dbo].[yaf_Smiley] where SmileyID=@SmileyID order by SortOrder
end
GO

create procedure [dbo].[yaf_smiley_listunique](@BoardID int) as
begin
        select 
        Icon, 
        Emoticon,
        Code = (select top 1 Code from [dbo].[yaf_Smiley] x where x.Icon=[dbo].[yaf_Smiley].Icon),
        SortOrder = (select top 1 SortOrder from [dbo].[yaf_Smiley] x where x.Icon=[dbo].[yaf_Smiley].Icon order by x.SortOrder asc)
    from 
        [dbo].[yaf_Smiley]
    where
        BoardID=@BoardID
    group by
        Icon,
        Emoticon
    order by
        SortOrder,
        Code
end
GO

create procedure [dbo].[yaf_smiley_save](@SmileyID int=null,@BoardID int,@Code nvarchar(10),@Icon nvarchar(50),@Emoticon nvarchar(50),@SortOrder tinyint,@Replace smallint=0) as begin
        if @SmileyID is not null begin
        update [dbo].[yaf_Smiley] set Code = @Code, Icon = @Icon, Emoticon = @Emoticon, SortOrder = @SortOrder where SmileyID = @SmileyID
    end
    else begin
        if @Replace>0
            delete from [dbo].[yaf_Smiley] where Code=@Code

        if not exists(select 1 from [dbo].[yaf_Smiley] where BoardID=@BoardID and Code=@Code)
            insert into [dbo].[yaf_Smiley](BoardID,Code,Icon,Emoticon,SortOrder) values(@BoardID,@Code,@Icon,@Emoticon,@SortOrder)
    end
end
GO

create procedure [dbo].[yaf_smiley_resort](@BoardID int,@SmileyID int,@Move int) as
begin
        declare @Position int

    SELECT @Position=SortOrder FROM [dbo].[yaf_Smiley] WHERE BoardID=@BoardID and SmileyID=@SmileyID

    if (@Position is null) return

    if (@Move > 0) begin
        update [dbo].[yaf_Smiley]
            set SortOrder=SortOrder-1
            where BoardID=@BoardID and 
                SortOrder between @Position and (@Position + @Move) and
                SortOrder between 1 and 255
    end
    else if (@Move < 0) begin
        update [dbo].[yaf_Smiley]
            set SortOrder=SortOrder+1
            where BoardID=@BoardID and 
                SortOrder between (@Position+@Move) and @Position and
                SortOrder between 0 and 254
    end

    SET @Position = @Position + @Move

    if (@Position>255) SET @Position = 255
    else if (@Position<0) SET @Position = 0

    update [dbo].[yaf_Smiley]
        set SortOrder=@Position
        where BoardID=@BoardID and 
            SmileyID=@SmileyID
end
GO

create procedure [dbo].[yaf_system_initialize](
    @Name		nvarchar(50),
    @TimeZone	int,
    @Culture	varchar(10),
    @LanguageFile nvarchar(50),
    @ForumEmail	nvarchar(50),
	@ForumBaseUrlMask	nvarchar(255),
    @SmtpServer	nvarchar(50),
    @User		nvarchar(255),
    @UserEmail	nvarchar(255),
    @UserKey	nvarchar(64),
    @RolePrefix nvarchar(255),
    @UTCTIMESTAMP datetime
    
) as 
begin
        DECLARE @tmpValue AS nvarchar(100)

    -- initalize required 'registry' settings
    EXEC [dbo].[yaf_registry_save] 'version','1'
    EXEC [dbo].[yaf_registry_save] 'versionname','1.0.0'
    SET @tmpValue = CAST(@TimeZone AS nvarchar(100))
    EXEC [dbo].[yaf_registry_save] 'timezone', @tmpValue
    EXEC [dbo].[yaf_registry_save] 'culture', @Culture
    EXEC [dbo].[yaf_registry_save] 'language', @LanguageFile
    EXEC [dbo].[yaf_registry_save] 'smtpserver', @SmtpServer
    EXEC [dbo].[yaf_registry_save] 'forumemail', @ForumEmail
	EXEC [dbo].[yaf_registry_save] 'baseurlmask', @ForumBaseUrlMask
    
    -- initalize new board
    EXEC [dbo].[yaf_board_create] @Name, @Culture, @LanguageFile, '','',@User,@UserEmail,@UserKey,1,@RolePrefix,@UTCTIMESTAMP
end
GO

CREATE PROCEDURE [dbo].[yaf_system_updateversion]
(
    @Version		int,
    @VersionName	nvarchar(50)
) 
AS
BEGIN
        DECLARE @tmpValue AS nvarchar(100)
    SET @tmpValue = CAST(@Version AS nvarchar(100))
    EXEC [dbo].[yaf_registry_save] 'version', @tmpValue
    EXEC [dbo].[yaf_registry_save] 'versionname',@VersionName

END
GO

CREATE procedure [dbo].[yaf_topic_unread]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
   declare @post_totalrowsnumber int 
   declare @firstselectrownum int   
   declare @firstselectposted datetime
  -- declare @ceiling decimal  
  -- declare @offset int 

    set nocount on	

    -- find total returned count
        select
        @post_totalrowsnumber = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	

      select @PageIndex = @PageIndex+1;
      select @firstselectrownum = (@PageIndex - 1) * @PageSize + 1 
        -- find first selectedrowid 
   if (@firstselectrownum > 0)   
   set rowcount @firstselectrownum
   else
   -- should not be 0
   set rowcount 1
    
   select		
        @firstselectposted = c.LastPosted		
    from
            [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	
    order by
        c.LastPosted desc,
        cat.SortOrder asc,
        d.SortOrder asc,
        d.Name asc,
        c.Priority desc		
    
    set rowcount @PageSize	
            select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),		
        StarterDisplay = IsNull(c.UserDisplayName,b.DisplayName),		
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,
        TotalRows = @post_totalrowsnumber,
        PageIndex = @PageIndex
    from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        c.LastPosted <= @firstselectposted and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null
    order by
        c.LastPosted desc,
        cat.SortOrder asc,
        d.SortOrder asc,
        d.Name asc,
        c.Priority desc	

        SET ROWCOUNT 0		
end
GO

CREATE procedure [dbo].[yaf_topic_active]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   
   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
     where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null	
      )	  
      select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID       
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC   	
    
end
GO

CREATE PROCEDURE [dbo].[yaf_topic_delete] (@TopicID int,@UpdateLastPost bit=1,@EraseTopic bit=0) 
AS
BEGIN
        SET NOCOUNT ON
    DECLARE @ForumID int
    DECLARE @pollID int
    
    SELECT @ForumID=ForumID FROM  [dbo].[yaf_Topic] WHERE TopicID=@TopicID
    
    UPDATE [dbo].[yaf_Topic] SET LastMessageID = null WHERE TopicID = @TopicID
    
    UPDATE [dbo].[yaf_Forum] SET 
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null,
        LastPosted = null
    WHERE LastMessageID IN (SELECT MessageID FROM  [dbo].[yaf_Message] WHERE TopicID = @TopicID)
    
    UPDATE  [dbo].[yaf_Active] SET TopicID = null WHERE TopicID = @TopicID
    
    --delete messages and topics
    DELETE FROM  [dbo].[yaf_nntptopic] WHERE TopicID = @TopicID
    
    IF @EraseTopic = 0
    BEGIN
        UPDATE  [dbo].[yaf_topic] set Flags = Flags | 8 where TopicMovedID = @TopicID
        UPDATE  [dbo].[yaf_topic] set Flags = Flags | 8 where TopicID = @TopicID
        UPDATE  [dbo].[yaf_Message] set Flags = Flags | 8 where TopicID = @TopicID
    END
    ELSE
    BEGIN
        --remove polls	
        SELECT @pollID = pollID FROM  [dbo].[yaf_topic] WHERE TopicID = @TopicID
        IF (@pollID is not null)
        BEGIN
             exec [dbo].[yaf_pollgroup_remove] @pollID, @TopicID, null, null, null, 1, 1
        END	
    
        DELETE FROM  [dbo].[yaf_topic] WHERE TopicMovedID = @TopicID
        
        DELETE  [dbo].[yaf_Attachment] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID) 
        DELETE  [dbo].[yaf_MessageHistory] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID) 
		
		update [dbo].[yaf_Message] SET ReplyTo = null WHERE TopicID = @TopicID

		-- update user post count
		if not exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
          -- delete messages
		  DELETE  [dbo].[yaf_Message] WHERE TopicID = @TopicID
        else 
		   begin
		   declare @tmpUserID int;
		   declare message_cursor cursor for
		   select UserID from [dbo].[yaf_Message]
		   where TopicID=@TopicID
    
           -- delete messages
		   open message_cursor
    
		   fetch next from message_cursor
		   into @tmpUserID
    
		   -- Check @@FETCH_STATUS to see if there are any more rows to fetch.
		   while @@FETCH_STATUS = 0
    		   begin
		   UPDATE [dbo].[yaf_User] SET NumPosts = (SELECT count(MessageID) FROM [dbo].[yaf_Message] WHERE UserID = @tmpUserID AND IsDeleted = 0 AND IsApproved = 1) WHERE UserID = @tmpUserID

		   

		   DELETE  [dbo].[yaf_Message] WHERE TopicID = @TopicID and UserID = @tmpUserID
    
		   -- This is executed as long as the previous fetch succeeds.
		   fetch next from message_cursor
		   into @tmpUserID
		   end
    
		   close message_cursor
		   deallocate message_cursor

		end

		EXEC [dbo].[yaf_pollgroup_remove] @pollID, @TopicID, null, null, null, 0, 0 	
        
        DELETE  [dbo].[yaf_WatchTopic] WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_TopicReadTracking] WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_FavoriteTopic]  WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_Topic] WHERE TopicMovedID = @TopicID
        DELETE  [dbo].[yaf_Topic] WHERE TopicID = @TopicID
        DELETE  [dbo].[yaf_MessageReportedAudit] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID) 
        DELETE  [dbo].[yaf_MessageReported] WHERE MessageID IN (SELECT MessageID FROM  [dbo].[yaf_message] WHERE TopicID = @TopicID)

		END
        
    --commit
    IF @UpdateLastPost<>0
        EXEC  [dbo].[yaf_forum_updatelastpost] @ForumID
    
    IF @ForumID is not null
        EXEC  [dbo].[yaf_forum_updatestats] @ForumID
END
GO

create procedure [dbo].[yaf_pollgroup_remove](@PollGroupID int, @TopicID int =null, @ForumID int= null, @CategoryID int = null, @BoardID int = null, @RemoveCompletely bit, @RemoveEverywhere bit)
 as
  begin   
    declare @polllist table( PollID int)
    declare @tmp int

    
    
             -- we delete poll from the place only it persists in other places 
         if @RemoveEverywhere <> 1
             begin
                   if @TopicID > 0
                   Update [dbo].[yaf_Topic] set PollID = NULL where TopicID = @TopicID                 
                  
                   if @ForumID > 0
                   Update [dbo].[yaf_Forum] set PollGroupID = NULL where ForumID = @ForumID
              
                   if @CategoryID > 0
                   Update [dbo].[yaf_Category] set PollGroupID = NULL where CategoryID = @CategoryID
                
             end        
            
          -- we remove poll group links from all places where they are
         if ( @RemoveEverywhere = 1 OR @RemoveCompletely = 1)
         begin
                   Update [dbo].[yaf_Topic] set PollID = NULL where PollID = @PollGroupID 
                   Update [dbo].[yaf_Forum] set PollGroupID = NULL where PollGroupID = @PollGroupID
                   Update [dbo].[yaf_Category] set PollGroupID = NULL where PollGroupID = @PollGroupID				 
         end

         -- simply remove all polls
    if @RemoveCompletely = 1 
    begin	
    insert into @polllist (PollID)
    select PollID from [dbo].[yaf_Poll] where PollGroupID = @PollGroupID   
            DELETE FROM  [dbo].[yaf_PollVote] WHERE PollID IN (SELECT PollID FROM @polllist)
            DELETE FROM  [dbo].[yaf_Choice] WHERE PollID IN (SELECT PollID FROM @polllist)	
            DELETE FROM  [dbo].[yaf_Poll] WHERE PollGroupID = @PollGroupID 
            DELETE FROM  [dbo].[yaf_PollGroupCluster] WHERE PollGroupID = @PollGroupID		
    end

    -- don't remove cluster if the polls are not removed from db 
    end
GO

create procedure [dbo].[yaf_pollgroup_attach](@PollGroupID int, @TopicID int = null, @ForumID int = null, @CategoryID int = null, @BoardID int = null) as
begin
                   -- this deletes possible polls without choices it should not normally happen
                   DECLARE @tablett table (PollID int) 
                   INSERT INTO @tablett(PollID)
                   SELECT PollID FROM [dbo].[yaf_Poll] WHERE PollGroupID = NULL
                  
                   DELETE FROM [dbo].[yaf_PollVote] WHERE PollID IN (select PollID FROM @tablett)
                   DELETE FROM [dbo].[yaf_Choice] WHERE PollID IN (select PollID FROM @tablett)
                   DELETE FROM [dbo].[yaf_Poll] WHERE PollID IN (select PollID FROM @tablett)
                                   
                   if NOT EXISTS (SELECT top 1 1 FROM @tablett)
                   begin
                   if @TopicID > 0
                   begin
                   if exists (select top 1 1 from [dbo].[yaf_Topic] where TopicID = @TopicID  and PollID is not null)
                   begin
                   SELECT 1
                   end
                   else
                   begin
                   Update [dbo].[yaf_Topic] set PollID = @PollGroupID where TopicID = @TopicID 
                   SELECT 0
                   end
                   end              
                  
                   if @ForumID > 0
                   begin
                   if exists (select top 1 1 from [dbo].[yaf_Forum] where ForumID = @ForumID and PollGroupID is not null)
                   begin
                   SELECT 1
                   end
                   else
                   begin
                   Update [dbo].[yaf_Forum] set PollGroupID = @PollGroupID where ForumID = @ForumID
                   SELECT 0
                   end
                   end

                   if @CategoryID > 0
                   begin
                   if exists (select top 1 1 from [dbo].[yaf_Category] where CategoryID = @CategoryID and PollGroupID is null)
                   begin
                   SELECT 1
                   end
                   else
                   begin
                   Update [dbo].[yaf_Category] set PollGroupID = @PollGroupID where CategoryID = @CategoryID
                   SELECT 0
                   end
                   end
                   end
                   SELECT 1
                       

end
GO

create procedure [dbo].[yaf_pollgroup_list](@UserID int, @ForumID int = null, @BoardID int) as
begin
    select distinct(p.Question), p.PollGroupID from [dbo].[yaf_Poll] p
    LEFT JOIN 	[dbo].[yaf_PollGroupCluster] pgc ON pgc.PollGroupID = p.PollGroupID
    WHERE p.PollGroupID is not null
    -- WHERE p.Closes IS NULL OR p.Closes > @UTCTIMESTAMP
    order by Question asc
end
GO


create procedure [dbo].[yaf_topic_findnext](@TopicID int) as
begin
        declare @LastPosted datetime
    declare @ForumID int
    select @LastPosted = LastPosted, @ForumID = ForumID from [dbo].[yaf_Topic] where TopicID = @TopicID AND TopicMovedID IS NULL
    select top 1 TopicID from [dbo].[yaf_Topic] where LastPosted>@LastPosted and ForumID = @ForumID AND IsDeleted=0 AND TopicMovedID IS NULL order by LastPosted asc
end
GO

create procedure [dbo].[yaf_topic_findprev](@TopicID int) AS 
BEGIN
        DECLARE @LastPosted datetime
    DECLARE @ForumID int
    SELECT @LastPosted = LastPosted, @ForumID = ForumID FROM [dbo].[yaf_Topic] WHERE TopicID = @TopicID AND TopicMovedID IS NULL
    SELECT TOP 1 TopicID from [dbo].[yaf_Topic] where LastPosted<@LastPosted AND ForumID = @ForumID AND IsDeleted=0 AND TopicMovedID IS NULL ORDER BY LastPosted DESC
END
GO

CREATE PROCEDURE [dbo].[yaf_topic_info]
(
    @TopicID int = null,
    @ShowDeleted bit = 0
)
AS
BEGIN
        IF @TopicID = 0 SET @TopicID = NULL

    IF @TopicID IS NULL
    BEGIN
        IF @ShowDeleted = 1 
            SELECT * FROM [dbo].[yaf_Topic]
        ELSE
            SELECT * FROM [dbo].[yaf_Topic] WHERE IsDeleted=0
    END
    ELSE
    BEGIN
        IF @ShowDeleted = 1 
            SELECT * FROM [dbo].[yaf_Topic] WHERE TopicID = @TopicID
        ELSE
            SELECT * FROM [dbo].[yaf_Topic] WHERE TopicID = @TopicID AND IsDeleted=0		
    END
END
GO

CREATE PROCEDURE [dbo].[yaf_topic_findduplicate]
(
    @TopicName nvarchar(255)
)
AS
BEGIN
    IF @TopicName IS NOT NULL
    BEGIN	
        IF EXISTS (SELECT TOP 1 1 FROM [dbo].[yaf_Topic] WHERE [Topic] LIKE  @TopicName AND TopicMovedID IS NULL)
        SELECT 1
        ELSE
        SELECT 0
    END
    ELSE
    BEGIN
        SELECT 0
    END	
END
GO


CREATE PROCEDURE [dbo].[yaf_topic_announcements]
(
    @BoardID int,
    @NumPosts int,
    @PageUserID int
)
AS
BEGIN
    SELECT DISTINCT TOP (@NumPosts) 
	t.Topic, 
	t.LastPosted, 
	t.Posted,
	t.UserID,
	t.LastUserID, 
	t.TopicID,
	t.TopicMovedID, 
	Message = (select  CONVERT(VARCHAR(MAX), m.Message) from [dbo].[yaf_Message] m where t.LastMessageID = m.MessageID),
	t.LastMessageID, 
	t.LastMessageFlags 
	FROM
    [dbo].[yaf_Topic] t 
    INNER JOIN [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID
    INNER JOIN [dbo].[yaf_Category] c 
    ON c.CategoryID = f.CategoryID 
    join [dbo].[yaf_ActiveAccess] v   on v.ForumID=f.ForumID
    WHERE c.BoardID = @BoardID AND v.UserID=@PageUserID AND (CONVERT(int,v.ReadAccess) <> 0 or (f.Flags & 2) = 0) AND t.IsDeleted=0 AND t.TopicMovedID IS NULL AND (t.Priority = 2) ORDER BY t.LastPosted DESC;
END
GO

CREATE PROCEDURE [dbo].[yaf_rss_topic_latest]
(
    @BoardID int,
    @NumPosts int,
    @PageUserID int,
    @StyledNicks bit = 0,
    @ShowNoCountPosts  bit = 0
)
AS
BEGIN 
    SELECT TOP(@NumPosts)
        LastMessage = m.[Message],
        t.LastPosted,
        t.ForumID,
        f.Name as Forum,
        t.Topic,
        t.TopicID,
        t.TopicMovedID,
        t.UserID,
        t.UserName,
        t.UserDisplayName,
        StarterIsGuest = (select x.IsGuest from [dbo].[yaf_User] x where x.UserID=t.UserID),		
        t.LastMessageID,
        t.LastMessageFlags,
        t.LastUserID,			
        LastUserName = IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserDisplayName = IsNull(t.LastUserName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserIsGuest = (select x.IsGuest from [dbo].[yaf_User] x where x.UserID=t.LastUserID),	
        t.Posted					
    FROM
        [dbo].[yaf_Message] m 
    INNER JOIN	
        [dbo].[yaf_Topic] t  ON t.LastMessageID = m.MessageID
    INNER JOIN
        [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID	
    INNER JOIN
        [dbo].[yaf_Category] c ON c.CategoryID = f.CategoryID
    JOIN
        [dbo].[yaf_ActiveAccess] v   ON v.ForumID=f.ForumID
    WHERE	
        c.BoardID = @BoardID
        AND t.TopicMovedID is NULL
        AND v.UserID=@PageUserID
        AND (CONVERT(int,v.ReadAccess) <> 0)
        AND t.IsDeleted != 1
        AND t.LastPosted IS NOT NULL
        AND
        f.Flags & 4 <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 4 END)
    ORDER BY
        t.LastPosted DESC;
END
GO

CREATE PROCEDURE [dbo].[yaf_topic_latest]
(
    @BoardID int,
    @NumPosts int,
    @PageUserID int,
    @StyledNicks bit = 0,
    @ShowNoCountPosts  bit = 0,
    @FindLastRead bit = 0
)
AS
BEGIN  
  
    SELECT TOP(@NumPosts)
        t.LastPosted,
        t.ForumID,
        f.Name as Forum,
        t.Topic,
        t.Status,
        t.Styles,
        t.TopicID,
        t.TopicMovedID,
        t.UserID,
        UserName = IsNull(t.UserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.UserID)),
        UserDisplayName = IsNull(t.UserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.UserID)),		
        t.LastMessageID,
        t.LastMessageFlags,
        t.LastUserID,
        t.NumPosts,
		t.Views,
        t.Posted,	
		LastMessage = (select m.Message from [dbo].[yaf_Message] m where m.MessageID = t.LastMessageID),
        LastUserName = IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserDisplayName = IsNull(t.LastUserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserStyle = case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = t.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=f.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=t.TopicID AND y.UserID = @PageUserID)
             else ''	 end
            
    FROM	
        [dbo].[yaf_Topic] t 
    INNER JOIN
        [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID	
    INNER JOIN
        [dbo].[yaf_Category] c ON c.CategoryID = f.CategoryID
    JOIN
        [dbo].[yaf_ActiveAccess] v   ON v.ForumID=f.ForumID
    WHERE	
        c.BoardID = @BoardID
        AND t.TopicMovedID is NULL
        AND v.UserID=@PageUserID
        AND (CONVERT(int,v.ReadAccess) <> 0)
        AND t.IsDeleted != 1
        AND t.LastPosted IS NOT NULL
        AND
        f.Flags & 4 <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 4 END)
    ORDER BY
        t.LastPosted DESC;
END
GO

CREATE PROCEDURE [dbo].[yaf_rsstopic_list]
(
    @ForumID int,
    @TopicLimit int
)
as
begin
  
    select top(@TopicLimit)
	Topic = a.Topic,
	TopicID = a.TopicID, 
	Name = b.Name, 
	LastPosted = IsNull(a.LastPosted,a.Posted), 
	LastUserID = IsNull(a.LastUserID, a.UserID), 
	LastMessageID= IsNull(a.LastMessageID,
	(select top 1 m.MessageID 
	from [dbo].[yaf_Message] m where m.TopicID = a.TopicID order by m.Posted desc)), 
	LastMessageFlags = IsNull(a.LastMessageFlags,22) , 
	LastMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(a.TopicMovedID,a.TopicID) AND mes2.IsApproved = 1 AND mes2.IsDeleted = 0 ORDER BY mes2.Posted DESC) 

from [dbo].[yaf_Topic] a, 
     [dbo].[yaf_Forum] b 

where a.ForumID = @ForumID and 
      b.ForumID = a.ForumID and 
	  a.TopicMovedID is null and 
	  a.IsDeleted = 0 and
	  a.NumPosts > 0

order by LastPosted desc
end
go

CREATE PROCEDURE [dbo].[yaf_topic_latest_in_category]
(
    @BoardID int,
    @CategoryID int,
	@NumPosts int,
    @PageUserID int,
    @StyledNicks bit = 0,
    @ShowNoCountPosts  bit = 0,
    @FindLastRead bit = 0
)
AS
BEGIN  
  
    SELECT TOP(@NumPosts)
        t.LastPosted,
        t.ForumID,
        f.Name as Forum,
        t.Topic,
        t.Status,
        t.Styles,
        t.TopicID,
        t.TopicMovedID,
        t.UserID,
        UserName = IsNull(t.UserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.UserID)),
        UserDisplayName = IsNull(t.UserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.UserID)),		
        t.LastMessageID,
        t.LastMessageFlags,
        t.LastUserID,
        t.NumPosts,
		t.Views,
        t.Posted,	
		LastMessage = (select m.Message from [dbo].[yaf_Message] m where m.MessageID = t.LastMessageID),
        LastUserName = IsNull(t.LastUserName,(select x.[Name] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserDisplayName = IsNull(t.LastUserDisplayName,(select x.[DisplayName] from [dbo].[yaf_User] x where x.UserID = t.LastUserID)),
        LastUserStyle = case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = t.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=f.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=t.TopicID AND y.UserID = @PageUserID)
             else ''	 end
            
    FROM	
        [dbo].[yaf_Topic] t 
    INNER JOIN
        [dbo].[yaf_Forum] f ON t.ForumID = f.ForumID	
    INNER JOIN
        [dbo].[yaf_Category] c ON c.CategoryID = f.CategoryID
    JOIN
        [dbo].[yaf_ActiveAccess] v   ON v.ForumID=f.ForumID
    WHERE	
	    c.BoardID = @BoardID
        AND c.CategoryID = @CategoryID
        AND t.TopicMovedID is NULL
        AND v.UserID=@PageUserID
        AND (CONVERT(int,v.ReadAccess) <> 0)
        AND t.IsDeleted != 1
        AND t.LastPosted IS NOT NULL
        AND
        f.Flags & 4 <> (CASE WHEN @ShowNoCountPosts > 0 THEN -1 ELSE 4 END)
    ORDER BY
        t.LastPosted DESC;
END
GO


CREATE procedure [dbo].[yaf_announcements_list]
(
    @ForumID int,
    @UserID int = null,
    @Date datetime=null,
    @ToDate datetime=null,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,
    @ShowMoved  bit = 0,
    @FindLastRead bit = 0
)
AS
begin
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   
   -- find total returned count
   select  @TotalRows = COUNT(c.TopicID)
   FROM [dbo].[yaf_Topic] c 
   WHERE c.ForumID = @ForumID
   AND	c.[Priority] = 2
   AND	c.IsDeleted = 0
    AND	(c.TopicMovedID IS NOT NULL OR c.NumPosts > 0) 
    AND
    (@ShowMoved = 1 or (@ShowMoved <> 1 AND  c.TopicMovedID IS NULL))
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by tt.[Priority] desc,tt.LastPosted desc) as RowNum, tt.TopicID
     from  [dbo].[yaf_Topic] tt
     where tt.ForumID = @ForumID and tt.[Priority] = 2
      AND	tt.IsDeleted = 0
      AND	((tt.TopicMovedID IS NOT NULL) OR (tt.NumPosts > 0))
      AND
      (@ShowMoved = 1 or (@ShowMoved <> 1 AND  TopicMovedID IS NULL))
      )	  
      select
            c.ForumID,
            c.TopicID,
            c.Posted,
            LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
            c.TopicMovedID,
            FavoriteCount = (SELECT COUNT(1) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
            [Subject] = c.Topic,
            c.[Description],
            c.[Status],
            c.[Styles],
            c.UserID,
            Starter = IsNull(c.UserName,b.Name),
            StarterDisplay = IsNull(c.UserDisplayName,b.DisplayName),
            Replies = c.NumPosts - 1,
            NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@UserID IS NOT NULL AND mes.UserID = @UserID) OR (@UserID IS NULL)) ),			
            [Views] = c.[Views],
            LastPosted = c.LastPosted,
            LastUserID = c.LastUserID,
            LastUserName = IsNull(c.LastUserName,(SELECT x.Name FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastUserDisplayName = IsNull(c.LastUserDisplayName,(SELECT x.DisplayName FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastMessageID = c.LastMessageID,
            LastTopicID = c.TopicID,
            LinkDate = c.LinkDate,
            TopicFlags = c.Flags,
            c.Priority,
            c.PollID,
            ForumFlags = d.Flags,
            FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
            StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
            LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = c.LastUserID)
            else ''	 end,
            LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=c.ForumID AND x.UserID = @UserID)
             else ''	 end,
            LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @UserID)
             else ''	 end,         
             c.TopicImage,           
             0 as HasAttachments,           
            PageIndex = @PageIndex,   	
            @TotalRows as TotalRows			       
            from
            TopicIds ti
            inner join [dbo].[yaf_Topic] c	
            ON c.TopicID = ti.TopicID
            JOIN [dbo].[yaf_User] b 
            ON b.UserID=c.UserID
            join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
            WHERE ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC 
    
end
GO

CREATE procedure [dbo].[yaf_topic_list]
(
    @ForumID int,
    @UserID int = null,
    @Date datetime=null,
    @ToDate datetime=null,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,
    @ShowMoved  bit = 0,
    @FindLastRead bit = 0
)
AS
begin   
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   
   -- find total returned count
   select  @TotalRows = COUNT(c.TopicID)
   FROM [dbo].[yaf_Topic] c 
   WHERE c.ForumID = @ForumID
   AND	((c.Priority = 1) OR (c.Priority <=0 AND c.LastPosted>=@Date )) 
   AND	c.IsDeleted = 0
    AND	(c.TopicMovedID IS NOT NULL OR c.NumPosts > 0) 
    AND
    (@ShowMoved = 1 or (@ShowMoved <> 1 AND  c.TopicMovedID IS NULL))
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by tt.[Priority] desc,tt.LastPosted desc) as RowNum, tt.TopicID
     from  [dbo].[yaf_Topic] tt
     where tt.ForumID = @ForumID and (tt.[Priority] = 1 OR (tt.[Priority] <=0 AND tt.LastPosted >=@Date))
      AND	tt.IsDeleted = 0
      AND	((tt.TopicMovedID IS NOT NULL) OR (tt.NumPosts > 0))
      AND
      (@ShowMoved = 1 or (@ShowMoved <> 1 AND  TopicMovedID IS NULL))
      )	  
      select
            c.ForumID,
            c.TopicID,
            c.Posted,
            LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
            c.TopicMovedID,
            FavoriteCount = (SELECT COUNT(1) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
            [Subject] = c.Topic,
            c.[Description],
            c.[Status],
            c.[Styles],
            c.UserID,
            Starter = IsNull(c.UserName,b.Name),
            StarterDisplay = IsNull(c.UserDisplayName,b.DisplayName),
            Replies = c.NumPosts - 1,
            NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@UserID IS NOT NULL AND mes.UserID = @UserID) OR (@UserID IS NULL)) ),			
            [Views] = c.[Views],
            LastPosted = c.LastPosted,
            LastUserID = c.LastUserID,
            LastUserName = IsNull(c.LastUserName,(SELECT x.Name FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastUserDisplayName = IsNull(c.LastUserDisplayName,(SELECT x.DisplayName FROM [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
            LastMessageID = c.LastMessageID,
            LastTopicID = c.TopicID,
            LinkDate = c.LinkDate,
            TopicFlags = c.Flags,
            c.Priority,
            c.PollID,
            ForumFlags = d.Flags,
            FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
            StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
            LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = c.LastUserID)
            else ''	 end,
            LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=c.ForumID AND x.UserID = @UserID)
             else ''	 end,
            LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @UserID)
             else ''	 end,
             c.TopicImage,         
            0 as HasAttachments,          
            PageIndex = @PageIndex,   	
            @TotalRows as TotalRows			       
            from
            TopicIds ti
            inner join [dbo].[yaf_Topic] c	
            ON c.TopicID = ti.TopicID
            JOIN [dbo].[yaf_User] b 
            ON b.UserID=c.UserID
            join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
            WHERE ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC    
end
GO

create procedure [dbo].[yaf_topic_listmessages](@TopicID int) as
begin
   select 
        a.MessageID,
        a.UserID,
        UserName = b.Name,
        UserDisplayName = b.DisplayName,
        a.[Message],
        c.TopicID,
        c.ForumID,
        c.Topic,
        c.Priority,
        c.Description,
        c.Status,
        c.Styles,
        a.Flags,
        c.UserID AS TopicOwnerID,
        Edited = IsNull(a.Edited,a.Posted),
        TopicFlags = c.Flags,
        ForumFlags = d.Flags,
        a.EditReason,
        a.Position,
        a.IsModeratorChanged,
        a.DeleteReason,
        a.BlogPostID,
        c.PollID,
        a.IP,
        a.ReplyTo,
        a.ExternalMessageId,
        a.ReferenceMessageId  
    from 
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] c on a.TopicID = c.TopicID
        inner join [dbo].[yaf_Forum] d on c.ForumID = d.ForumID
    where a.TopicID = @TopicID
end
GO
create procedure [dbo].[yaf_topic_lock](@TopicID int,@Locked bit) as
begin
        if @Locked<>0
        update [dbo].[yaf_Topic] set Flags = Flags | 1 where TopicID = @TopicID
    else
        update [dbo].[yaf_Topic] set Flags = Flags & ~1 where TopicID = @TopicID
end
GO

CREATE procedure [dbo].[yaf_topic_move](@TopicID int,@ForumID int,@ShowMoved bit, @LinkDays int, @UTCTIMESTAMP datetime) AS
begin
        declare @OldForumID int		
        declare @newTimestamp datetime
        if @LinkDays > -1
        begin
        SET @newTimestamp = DATEADD(d,@LinkDays,@UTCTIMESTAMP);
        end
    select @OldForumID = ForumID from [dbo].[yaf_Topic] where TopicID = @TopicID

    if @ShowMoved <> 0 begin
        -- delete an old link if exists
        delete from [dbo].[yaf_Topic] where TopicMovedID = @TopicID
        -- create a moved message
        insert into [dbo].[yaf_Topic](ForumID,UserID,UserName,UserDisplayName,Posted,Topic,[Views],Flags,Priority,PollID,TopicMovedID,LastPosted,NumPosts,LinkDate)
        select ForumID,UserID,UserName,UserDisplayName,Posted,Topic,0,Flags,Priority,PollID,@TopicID,LastPosted,0,@newTimestamp
        from [dbo].[yaf_Topic] where TopicID = @TopicID
    end

    -- move the topic
    update [dbo].[yaf_Topic] set ForumID = @ForumID where TopicID = @TopicID

    -- update last posts
    exec [dbo].[yaf_forum_updatelastpost] @OldForumID
    exec [dbo].[yaf_forum_updatelastpost] @ForumID
    
    -- update stats
    exec [dbo].[yaf_forum_updatestats] @OldForumID
    exec [dbo].[yaf_forum_updatestats] @ForumID
    
end
GO

CREATE PROCEDURE [dbo].[yaf_topic_prune](@BoardID int, @ForumID int=null,@Days int, @PermDelete bit, @UTCTIMESTAMP datetime) as
BEGIN
        DECLARE @c cursor
    DECLARE @TopicID int
    DECLARE @Count int
    SET @Count = 0
    IF @ForumID = 0 SET @ForumID = NULL
    IF @ForumID IS NOT NULL
    BEGIN
        SET @c = cursor for
        SELECT 
            TopicID
        FROM [dbo].[yaf_topic] yt
        INNER JOIN
        [dbo].[yaf_Forum] yf
        ON
        yt.ForumID = yf.ForumID
        INNER JOIN
        [dbo].[yaf_Category] yc
        ON
        yf.CategoryID = yc.CategoryID
        WHERE
            yc.BoardID = @BoardID AND
            yt.ForumID = @ForumID AND
            Priority = 0 AND
            (yt.Flags & 512) = 0 AND /* not flagged as persistent */
            datediff(dd,yt.LastPosted,@UTCTIMESTAMP )>@Days
    END
    ELSE BEGIN
        SET @c = CURSOR FOR
        SELECT 
            TopicID
        FROM 
            [dbo].[yaf_Topic]
        WHERE 
            Priority = 0 and
            (Flags & 512) = 0 and					/* not flagged as persistent */
            datediff(dd,LastPosted,@UTCTIMESTAMP )>@Days
    END
    OPEN @c
    FETCH @c into @TopicID
    WHILE @@FETCH_STATUS=0 BEGIN
        IF (@Count % 100 = 1) WAITFOR DELAY '000:00:05'
        EXEC [dbo].[yaf_topic_delete] @TopicID, @PermDelete
        SET @Count = @Count + 1
        FETCH @c INTO @TopicID
    END
    CLOSE @c
    DEALLOCATE @c

    -- This takes forever with many posts...
    --exec [dbo].[yaf_topic_updatelastpost]

    SELECT Count = @Count
END
GO

create procedure [dbo].[yaf_topic_save](
    @ForumID	int,
    @Subject	nvarchar(100),
    @UserID		int,
    @Message	ntext,
    @Description	nvarchar(255)=null,
    @Status 	nvarchar(255)=null,
    @Styles 	nvarchar(255)=null,
    @Priority	smallint,
    @UserName	nvarchar(255)=null,
    @IP			varchar(39),
    @Posted		datetime=null,
    @BlogPostID	nvarchar(50),
    @Flags		int, 
    @UTCTIMESTAMP datetime
) as
begin
        declare @TopicID int
    declare @MessageID int, @OverrideDisplayName BIT, @ReplaceName nvarchar(255)

    if @Posted is null set @Posted = @UTCTIMESTAMP 
        -- this check is for guest user only to not override replace name 
    if (SELECT Name FROM [dbo].[yaf_User] WHERE UserID = @UserID) != @UserName
    begin
    SET @OverrideDisplayName = 1
    end	
    SET @ReplaceName = (CASE WHEN @OverrideDisplayName = 1 THEN @UserName ELSE (SELECT DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID) END);
    -- create the topic
    insert into [dbo].[yaf_Topic](ForumID,Topic,UserID,Posted,[Views],[Priority],UserName,UserDisplayName,NumPosts, [Description], [Status], [Styles])
    values(@ForumID,@Subject,@UserID,@Posted,0,@Priority,@UserName,@ReplaceName, 0,@Description, @Status, @Styles)

    -- get its id
    set @TopicID = SCOPE_IDENTITY()
    
    -- add message to the topic
    exec [dbo].[yaf_message_save] @TopicID,@UserID,@Message,@UserName,@IP,@Posted,null,@BlogPostID,null,null,@Flags,@UTCTIMESTAMP,@MessageID output

    select TopicID = @TopicID, MessageID = @MessageID
end
GO

CREATE procedure [dbo].[yaf_topic_updatelastpost]
(@ForumID int=null,@TopicID int=null) as
begin
        if @TopicID is not null
        update [dbo].[yaf_Topic] set
            LastPosted = (select top 1 x.Posted from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageID = (select top 1 x.MessageID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserID = (select top 1 x.UserID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserName = (select top 1 x.UserName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserDisplayName = (select top 1 x.UserDisplayName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageFlags = (select top 1 x.Flags from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc)
        where TopicID = @TopicID
    else
        update [dbo].[yaf_Topic] set
            LastPosted = (select top 1 x.Posted from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageID = (select top 1 x.MessageID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserID = (select top 1 x.UserID from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserName = (select top 1 x.UserName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastUserDisplayName = (select top 1 x.UserDisplayName from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc),
            LastMessageFlags = (select top 1 x.Flags from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and (x.Flags & 24)=16 order by Posted desc)
        where TopicMovedID is null
        and (@ForumID is null or ForumID=@ForumID)

    exec [dbo].[yaf_forum_updatelastpost] @ForumID
end
GO

CREATE procedure [dbo].[yaf_topic_updatetopic]
(@TopicID int,@Topic nvarchar (100)) as
begin
        if @TopicID is not null
        update [dbo].[yaf_Topic] set
            Topic = @Topic
        where TopicID = @TopicID
end
GO

create procedure [dbo].[yaf_user_accessmasks](@BoardID int,@UserID int) as
begin
        
    select * from(
        select
            AccessMaskID	= e.AccessMaskID,
            AccessMaskName	= e.Name,
            ForumID			= f.ForumID,
            ForumName		= f.Name,
            CategoryID		= f.CategoryID,
            ParentID		= f.ParentID
        from
            [dbo].[yaf_User] a 
            join [dbo].[yaf_UserGroup] b on b.UserID=a.UserID
            join [dbo].[yaf_Group] c on c.GroupID=b.GroupID
            join [dbo].[yaf_ForumAccess] d on d.GroupID=c.GroupID
            join [dbo].[yaf_AccessMask] e on e.AccessMaskID=d.AccessMaskID
            join [dbo].[yaf_Forum] f on f.ForumID=d.ForumID
        where
            a.UserID=@UserID and
            c.BoardID=@BoardID
        group by
            e.AccessMaskID,
            e.Name,
            f.ForumID,
            f.ParentID,
            f.CategoryID,
            f.Name
        
        union
            
        select
            AccessMaskID	= c.AccessMaskID,
            AccessMaskName	= c.Name,
            ForumID			= d.ForumID,
            ForumName		= d.Name,
            CategoryID		= d.CategoryID,
            ParentID		= d.ParentID
        from
            [dbo].[yaf_User] a 
            join [dbo].[yaf_UserForum] b on b.UserID=a.UserID
            join [dbo].[yaf_AccessMask] c on c.AccessMaskID=b.AccessMaskID
            join [dbo].[yaf_Forum] d on d.ForumID=b.ForumID
        where
            a.UserID=@UserID and
            c.BoardID=@BoardID
        group by
            c.AccessMaskID,
            c.Name,
            d.ForumID,
            d.ParentID,
            d.CategoryID,
            d.Name
    ) as x
    order by
        ForumName, AccessMaskName
end
GO

CREATE PROCEDURE [dbo].[yaf_user_activity_rank]
(
    @BoardID AS int,
    @DisplayNumber AS int,
    @StartDate AS datetime
)
AS
BEGIN
        
    DECLARE @GuestUserID int  

    SET @GuestUserID =
    (SELECT top 1
        a.UserID
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Group] c on b.GroupID = c.GroupID
    where
        a.BoardID = @BoardID and
        (c.Flags & 2)<>0
    )

    SELECT TOP(@DisplayNumber)
        counter.[ID],
        u.[Name],
        counter.[NumOfPosts]
    FROM
        [dbo].[yaf_User] u inner join
        (
            SELECT m.UserID as ID, Count(m.UserID) as NumOfPosts FROM [dbo].[yaf_Message] m
            WHERE m.Posted >= @StartDate
            GROUP BY m.UserID
        ) AS counter ON u.UserID = counter.ID
    WHERE
        u.BoardID = @BoardID and u.UserID != @GuestUserID
    ORDER BY
        NumOfPosts DESC  
END
GO

create PROCEDURE [dbo].[yaf_user_addpoints] (@UserID int,@FromUserID int = null, @UTCTIMESTAMP datetime, @Points int) AS
BEGIN
    UPDATE [dbo].[yaf_User] SET Points = Points + @Points WHERE UserID = @UserID

    IF @FromUserID IS NOT NULL 
    BEGIN
        declare	@VoteDate datetime
    set @VoteDate = (select top 1 VoteDate from [dbo].[yaf_ReputationVote] where ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID)
    IF @VoteDate is not null
    begin	     
          update [dbo].[yaf_ReputationVote] set VoteDate=@UTCTIMESTAMP where VoteDate = @VoteDate AND ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID
    end
    ELSE
      begin
          insert into [dbo].[yaf_ReputationVote](ReputationFromUserID,ReputationToUserID,VoteDate)
          values (@FromUserID, @UserID, @UTCTIMESTAMP)
      end
    END
END

GO

create procedure [dbo].[yaf_user_adminsave]
(@BoardID int,@UserID int,@Name nvarchar(255),@DisplayName nvarchar(255), @Email nvarchar(255),@Flags int,@RankID int) as
begin
        
    update [dbo].[yaf_User] set
        Name = @Name,
        DisplayName = @DisplayName,
        Email = @Email,
        RankID = @RankID,
        Flags = @Flags
    where UserID = @UserID
    select UserID = @UserID
end
GO

create procedure [dbo].[yaf_user_approve](@UserID int) as
begin
        
    declare @CheckEmailID int
    declare @Email nvarchar(255)

    select 
        @CheckEmailID = CheckEmailID,
        @Email = Email
    from
        [dbo].[yaf_CheckEmail]
    where
        UserID = @UserID

    -- Update new user email
    update [dbo].[yaf_User] set Email = @Email, Flags = Flags | 2 where UserID = @UserID
    delete [dbo].[yaf_CheckEmail] where CheckEmailID = @CheckEmailID
    select convert(bit,1)
end
GO

CREATE procedure [dbo].[yaf_user_approveall](@BoardID int) as
begin
        
    DECLARE userslist CURSOR FOR 
        SELECT UserID FROM [dbo].[yaf_User] WHERE BoardID=@BoardID AND (Flags & 2)=0
        FOR READ ONLY


    OPEN userslist

    DECLARE @UserID int

    FETCH userslist INTO @UserID

    WHILE @@FETCH_STATUS = 0
    BEGIN
        EXEC [dbo].[yaf_user_approve] @UserID
        FETCH userslist INTO @UserID		
    END

    CLOSE userslist

end
GO

CREATE PROCEDURE [dbo].[yaf_user_aspnet](@BoardID int,@UserName nvarchar(255),@DisplayName nvarchar(255) = null,@Email nvarchar(255),@ProviderUserKey nvarchar(64),@IsApproved bit,@UTCTIMESTAMP datetime) as
BEGIN
        SET NOCOUNT ON

    DECLARE @UserID int, @RankID int, @approvedFlag int, @TimeZone int

    SET @approvedFlag = 0;
    IF (@IsApproved = 1) SET @approvedFlag = 2;	
    
    IF EXISTS(SELECT 1 FROM [dbo].[yaf_User] where BoardID=@BoardID and ([ProviderUserKey]=@ProviderUserKey OR [Name] = @UserName))
    BEGIN
        SELECT TOP 1 @UserID = UserID FROM [dbo].[yaf_User] WHERE [BoardID]=@BoardID and ([ProviderUserKey]=@ProviderUserKey OR [Name] = @UserName)
        
        IF (@DisplayName IS NULL) 
        BEGIN
            SELECT TOP 1 @DisplayName = DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID
        END

        UPDATE [dbo].[yaf_User] SET 
            DisplayName = @DisplayName,
            Email = @Email,
            [ProviderUserKey] = @ProviderUserKey,
            Flags = Flags | @approvedFlag
        WHERE
            UserID = @UserID
    END ELSE
    BEGIN
        SELECT @RankID = RankID from [dbo].[yaf_Rank] where (Flags & 1)<>0 and BoardID=@BoardID
        
        IF (@DisplayName IS NULL) 
        BEGIN
            SET @DisplayName = @UserName
        END		

        SET @TimeZone = (SELECT ISNULL(CAST([dbo].[yaf_registry_value]('TimeZone', @BoardID) as int), 0))

        INSERT INTO [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName,Password,Email,Joined,LastVisit,NumPosts,TimeZone,Flags,ProviderUserKey) 
        VALUES(@BoardID,@RankID,@UserName,@DisplayName,'-',@Email,@UTCTIMESTAMP ,@UTCTIMESTAMP ,0, @TimeZone,@approvedFlag,@ProviderUserKey)
    
        SET @UserID = SCOPE_IDENTITY()	
    END
    
    SELECT UserID=@UserID
END
GO

CREATE PROCEDURE [dbo].[yaf_user_migrate]
(
    @UserID int,
    @ProviderUserKey nvarchar(64),
    @UpdateProvider bit = 0
)
AS
BEGIN
    
    DECLARE @Password nvarchar(255), @IsApproved bit, @LastActivity datetime, @Joined datetime
    
    UPDATE [dbo].[yaf_User] SET ProviderUserKey = @ProviderUserKey where UserID = @UserID

    IF (@UpdateProvider = 1)
    BEGIN
        SELECT
            @Password = [Password],
            @IsApproved = (CASE (Flags & 2) WHEN 2 THEN 1 ELSE 0 END),
            @LastActivity = LastVisit,
            @Joined = Joined
        FROM
            [dbo].[yaf_User]
        WHERE
            UserID = @UserID
        
        UPDATE
            [dbo].[yaf_prov_Membership]
        SET
            [Password] = @Password,
            PasswordFormat = '1',
            LastActivity = @LastActivity,
            IsApproved = @IsApproved,
            Joined = @Joined
        WHERE
            UserID = @ProviderUserKey
    END
END
GO

CREATE PROCEDURE [dbo].[yaf_user_avatarimage]
(
    @UserID int
)
AS
BEGIN
    
    SELECT
        UserID,
        AvatarImage,
        AvatarImageType
    FROM
        [dbo].[yaf_User]
    WHERE
        UserID = @UserID
END
GO

CREATE PROCEDURE [dbo].[yaf_user_changepassword](@UserID int,@OldPassword nvarchar(32),@NewPassword nvarchar(32)) as
begin
    
    declare @CurrentOld nvarchar(32)
    select @CurrentOld = Password from [dbo].[yaf_User] where UserID = @UserID
    if @CurrentOld<>@OldPassword begin
        select Success = convert(bit,0)
        return
    end
    update [dbo].[yaf_User] set Password = @NewPassword where UserID = @UserID
    select Success = convert(bit,1)
end
GO

CREATE PROC [dbo].[yaf_user_pmcount]
    (@UserID int) 
AS
BEGIN
        DECLARE @CountIn int	
        DECLARE @CountOut int
        DECLARE @CountArchivedIn int		
        DECLARE @plimit1 int        
        DECLARE @pcount int
        
      set @plimit1 = (SELECT TOP 1 (c.PMLimit) FROM [dbo].[yaf_User] a 
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID WHERE a.UserID = @UserID ORDER BY c.PMLimit DESC)
      set @pcount = (SELECT TOP 1 c.PMLimit FROM [dbo].[yaf_Rank] c 
                        JOIN [dbo].[yaf_User] d
                           ON c.RankID = d.RankID WHERE d.UserID = @UserID ORDER BY c.PMLimit DESC)
      if (@plimit1 > @pcount) 
      begin
      set @pcount = @plimit1      
      end 
      
    -- get count of pm's in user's sent items
    
    SELECT 
        @CountOut=COUNT(1) 
    FROM 
        [dbo].[yaf_UserPMessage] a
    INNER JOIN [dbo].[yaf_PMessage] b ON a.PMessageID=b.PMessageID
    WHERE 
        (a.Flags & 2)<>0 AND 
        b.FromUserID = @UserID
    -- get count of pm's in user's  received items
    SELECT 
        @CountIn=COUNT(1) 
    FROM 
    [dbo].[yaf_PMessage] a
    INNER JOIN
    [dbo].[yaf_UserPMessage] b ON a.PMessageID = b.PMessageID
    WHERE b.IsDeleted = 0  
         AND b.IsArchived=0  
         -- ToUserID
         AND b.[UserID] = @UserID
    
    SELECT 
        @CountArchivedIn=COUNT(1) 
    FROM 
    [dbo].[yaf_PMessage] a
    INNER JOIN
    [dbo].[yaf_UserPMessage] b ON a.PMessageID = b.PMessageID
        WHERE
        b.IsArchived <>0 AND
        -- ToUserID
        b.[UserID] = @UserID

    -- return all pm data
    SELECT 
        NumberIn = @CountIn,
        NumberOut =  @CountOut,
        NumberTotal = @CountIn + @CountOut + @CountArchivedIn,
        NumberArchived =@CountArchivedIn,
        NumberAllowed = @pcount
            

END
GO

create procedure [dbo].[yaf_user_delete](@UserID int) as
begin
    
    declare @GuestUserID	int
    declare @UserName		nvarchar(255)
    declare @UserDisplayName		nvarchar(255)
    declare @GuestCount		int

    select @UserName = Name, @UserDisplayName = DisplayName from [dbo].[yaf_User] where UserID=@UserID

    select top 1
        @GuestUserID = a.UserID
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Group] c on b.GroupID = c.GroupID
    where
        (c.Flags & 2)<>0

    select 
        @GuestCount = count(1) 
    from 
        [dbo].[yaf_UserGroup] a
        join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
    where
        (b.Flags & 2)<>0

    if @GuestUserID=@UserID and @GuestCount=1 begin
        return
    end

    update [dbo].[yaf_Message] set UserName=@UserName,UserDisplayName=@UserDisplayName,UserID=@GuestUserID where UserID=@UserID
    update [dbo].[yaf_Topic] set UserName=@UserName,UserDisplayName=@UserDisplayName,UserID=@GuestUserID where UserID=@UserID
    update [dbo].[yaf_Topic] set LastUserName=@UserName,LastUserDisplayName=@UserDisplayName,LastUserID=@GuestUserID where LastUserID=@UserID
    update [dbo].[yaf_Forum] set LastUserName=@UserName,LastUserDisplayName=@UserDisplayName,LastUserID=@GuestUserID where LastUserID=@UserID

    delete from [dbo].[yaf_Active] where UserID=@UserID
    delete from [dbo].[yaf_EventLog] where UserID=@UserID	
    delete from [dbo].[yaf_UserPMessage] where UserID=@UserID
    delete from [dbo].[yaf_PMessage] where FromUserID=@UserID AND PMessageID NOT IN (select PMessageID FROM [dbo].[yaf_PMessage])
    -- Delete all the thanks entries associated with this UserID.
    delete from [dbo].[yaf_Thanks] where ThanksFromUserID=@UserID OR ThanksToUserID=@UserID
    -- Delete all the FavoriteTopic entries associated with this UserID.
    delete from [dbo].[yaf_FavoriteTopic] where UserID=@UserID
    -- Delete all the Buddy relations between this user and other users.
    delete from [dbo].[yaf_Buddy] where FromUserID=@UserID   
    delete from [dbo].[yaf_Buddy] where ToUserID=@UserID	 
    -- set messages as from guest so the User can be deleted
    update [dbo].[yaf_PMessage] SET FromUserID = @GuestUserID WHERE FromUserID = @UserID
    delete from [dbo].[yaf_CheckEmail] where UserID = @UserID
    delete from [dbo].[yaf_WatchTopic] where UserID = @UserID
    delete from [dbo].[yaf_WatchForum] where UserID = @UserID
    delete from [dbo].[yaf_TopicReadTracking] where UserID = @UserID
    delete from [dbo].[yaf_ForumReadTracking] where UserID = @UserID
	delete from [dbo].[yaf_UserAlbum] where UserID = @UserID
    delete from [dbo].[yaf_ReputationVote] where ReputationFromUserID = @UserID
	delete from [dbo].[yaf_ReputationVote] where ReputationToUserID = @UserID
    delete from [dbo].[yaf_UserGroup] where UserID = @UserID
    -- ABOT CHANGED
    -- Delete UserForums entries Too 
    delete from [dbo].[yaf_UserForum] where UserID = @UserID
    delete from [dbo].[yaf_IgnoreUser] where UserID = @UserID OR IgnoredUserID = @UserID
    --END ABOT CHANGED 09.04.2004
    delete from [dbo].[yaf_AdminPageUserAccess] where UserID = @UserID
    delete from [dbo].[yaf_User] where UserID = @UserID
end
GO

CREATE procedure [dbo].[yaf_user_deleteavatar](@UserID int) as begin
    
    UPDATE
        [dbo].[yaf_User]
    SET
        AvatarImage = null,
        Avatar = null,
        AvatarImageType = null
    WHERE
        UserID = @UserID
END
GO

create procedure [dbo].[yaf_user_deleteold](@BoardID int, @Days int,@UTCTIMESTAMP datetime) as
begin
    
    declare @Since datetime

    set @Since = @UTCTIMESTAMP 

    delete from [dbo].[yaf_EventLog]  where UserID in(select UserID from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days)
    delete from [dbo].[yaf_CheckEmail] where UserID in(select UserID from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days)
    delete from [dbo].[yaf_UserGroup] where UserID in(select UserID from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days)
    delete from [dbo].[yaf_User] where BoardID=@BoardID and IsApproved=0 and datediff(day,Joined,@Since)>@Days
end
GO

create procedure [dbo].[yaf_user_emails](@BoardID int,@GroupID int=null) as
begin
    
    if @GroupID = 0 set @GroupID = null
    if @GroupID is null
        select 
            a.Email 
        from 
            [dbo].[yaf_User] a
        where 
            a.Email is not null and 
            a.BoardID = @BoardID and
            a.Email is not null and 
            a.Email<>''
    else
        select 
            a.Email 
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_UserGroup] b on b.UserID=a.UserID
            join [dbo].[yaf_Group] c on c.GroupID=b.GroupID
        where 
            b.GroupID = @GroupID and 
            (c.Flags & 2)=0 and
            a.Email is not null and 
            a.Email<>''
end
GO

create procedure [dbo].[yaf_user_find](
    @BoardID int,
    @Filter bit,
    @UserName nvarchar(255)=null,
    @Email nvarchar(255)=null,
    @DisplayName nvarchar(255)=null,
    @NotificationType int = null,
    @DailyDigest bit = null,
	@ForumID int = 0
)
AS
begin
    if @ForumID>0
        begin
	        select 
                a.*,			
                IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0)
	        from 
                [dbo].[yaf_User] a
				join [dbo].[yaf_vaccess] x  on x.ForumID = @ForumID
	        where 
                a.BoardID=@BoardID and
				x.UserID = a.UserID and    
                x.ReadAccess <> 0 and
                ((@UserName is not null and a.Name like @UserName) or
                (@Email is not null and Email like @Email) or
                (@DisplayName is not null and a.DisplayName like @DisplayName) or
                (@NotificationType is not null and a.NotificationType = @NotificationType) or
                (@DailyDigest is not null and a.DailyDigest = @DailyDigest))
        end
	else if @Filter<>0
    begin
        if @UserName is not null
            set @UserName = '%' + @UserName + '%'
            
        if @DisplayName is not null
            set @DisplayName = '%' + @DisplayName + '%'			

        select 
            a.*,			
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0)
        from 
            [dbo].[yaf_User] a
        where 
            a.BoardID=@BoardID and
            ((@UserName is not null and a.Name like @UserName) or
            (@Email is not null and Email like @Email) or
            (@DisplayName is not null and a.DisplayName like @DisplayName) or
            (@NotificationType is not null and a.NotificationType = @NotificationType) or
            (@DailyDigest is not null and a.DailyDigest = @DailyDigest))
        order by
            a.Name
    end else
    begin
        select 
            a.*,			
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0)
        from 
            [dbo].[yaf_User] a
        where 
            a.BoardID=@BoardID and
            ((@UserName is not null and a.Name like @UserName) or
            (@Email is not null and Email like @Email) or
            (@DisplayName is not null and a.DisplayName like @DisplayName) or
            (@NotificationType is not null and a.NotificationType = @NotificationType) or
            (@DailyDigest is not null and a.DailyDigest = @DailyDigest))
    end
end
GO

CREATE PROCEDURE [dbo].[yaf_user_getpoints] (@UserID int) AS
BEGIN
    
    SELECT Points FROM [dbo].[yaf_User] WHERE UserID = @UserID
END
GO

create procedure [dbo].[yaf_user_getsignature](@UserID int) as
begin
    
    select [Signature] from [dbo].[yaf_User] where UserID = @UserID
end
GO

create procedure [dbo].[yaf_user_guest]
(
    @BoardID int,@UTCTIMESTAMP datetime
)
as
begin
    
    select top 1
        a.UserID
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Group] c on b.GroupID = c.GroupID
    where
        a.BoardID = @BoardID and
        (c.Flags & 2)<>0
end
GO

create procedure [dbo].[yaf_user_list](@BoardID int,@UserID int=null,@Approved bit=null,@GroupID int=null,@RankID int=null,@StyledNicks bit = null, @UTCTIMESTAMP datetime) as
begin	
    if @UserID is not null
        select 
        a.UserID,
        a.BoardID,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
		a.SuspendedReason,
		a.SuspendedBy,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],		
            CultureUser = a.Culture,						
            RankName = b.Name,
            Style = case(@StyledNicks)
            when 1 then a.UserStyle
            else ''	 end, 
            NumDays = datediff(d,a.Joined,@UTCTIMESTAMP )+1,
            NumPostsForum = (select count(1) from [dbo].[yaf_Message] x where x.IsApproved = 1 and x.IsDeleted = 0),
            HasAvatarImage = (select count(1) from [dbo].[yaf_User] x where x.UserID=a.UserID and AvatarImage is not null),
            IsAdmin	= IsNull(c.IsAdmin,0),
            IsGuest	= IsNull(a.Flags & 4,0),
            IsHostAdmin	= IsNull(a.Flags & 1,0),
            IsForumModerator	= IsNull(c.IsForumModerator,0),
            IsModerator		= IsNull(c.IsModerator,0)
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_Rank] b on b.RankID=a.RankID			
            left join [dbo].[yaf_vaccess] c on c.UserID=a.UserID
        where 
            a.UserID = @UserID and
            a.BoardID = @BoardID and
            IsNull(c.ForumID,0) = 0 and
            (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2))
        order by 
            a.Name 

    else if @GroupID is null and @RankID is null
        select 
        a.UserID,
        a.BoardID,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],			
            CultureUser = a.Culture,	
            Style = case(@StyledNicks)
            when 1 then a.UserStyle
            else ''	 end, 	
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0),
            IsGuest	= IsNull(a.Flags & 4,0),
            IsHostAdmin	= IsNull(a.Flags & 1,0),		
            RankName = b.Name
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_Rank] b on b.RankID=a.RankID			
        where 
            a.BoardID = @BoardID and
            (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2))
        order by 
            a.Name
    else
        select 
        a.UserID,
        a.BoardID,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],		
            CultureUser = a.Culture,
            IsAdmin = (select count(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0),
            IsGuest	= IsNull(a.Flags & 4,0),
            IsHostAdmin	= IsNull(a.Flags & 1,0),			
            RankName = b.Name,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end 
        from 
            [dbo].[yaf_User] a
            join [dbo].[yaf_Rank] b on b.RankID=a.RankID			
        where 
            a.BoardID = @BoardID and
            (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2)) and
            (@GroupID is null or exists(select 1 from [dbo].[yaf_UserGroup] x where x.UserID=a.UserID and x.GroupID=@GroupID)) and
            (@RankID is null or a.RankID=@RankID)
        order by 
            a.Name
end
GO

create procedure [dbo].[yaf_admin_list](@BoardID int = null, @StyledNicks bit = null,@UTCTIMESTAMP datetime) as
begin
         select 
        a.UserID,
        a.BoardID,
        b.Name AS BoardName,
        a.ProviderUserKey,
        a.[Name],
        a.[DisplayName],
        a.[Password],
        a.[Email],
        a.Joined,
        a.LastVisit,
        a.IP,
        a.NumPosts,
        a.TimeZone,
        a.Avatar,
        a.[Signature],
        a.AvatarImage,
        a.AvatarImageType,
        a.RankID,
        a.Suspended,
        a.LanguageFile,
        a.ThemeFile,
        a.TextEditor,
        a.OverridedefaultThemes,
        a.[PMNotification],
        a.[AutoWatchTopics],
        a.[DailyDigest],
        a.[NotificationType],
        a.[Flags],
        a.[Points],		
        a.[IsApproved],
        a.[IsGuest],
        a.[IsCaptchaExcluded],
        a.[IsActiveExcluded],
        a.[IsDST],
        a.[IsDirty],
        a.[IsFacebookUser],
        a.[IsTwitterUser],
        a.[IsGoogleUser],
        a.[Culture],
            a.NumPosts,
            CultureUser = a.Culture,			
            r.RankID,						
            RankName = r.Name,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end, 
            NumDays = datediff(d,a.Joined,@UTCTIMESTAMP )+1,
            NumPostsForum = (select count(1) from [dbo].[yaf_Message] x where x.IsApproved = 1 and x.IsDeleted = 0),
            HasAvatarImage = (select count(1) from [dbo].[yaf_User] x where x.UserID=a.UserID and AvatarImage is not null),
            IsAdmin	= IsNull(c.IsAdmin,0),			
            IsHostAdmin	= IsNull(a.Flags & 1,0)
        from 
            [dbo].[yaf_User] a
            JOIN
            [dbo].[yaf_Board] b	
            ON b.BoardID = a.BoardID			
            JOIN
            [dbo].[yaf_Rank] r	
            ON r.RankID = a.RankID		
            left join [dbo].[yaf_vaccess] c on c.UserID=a.UserID
        where 			
            (@BoardID IS NULL OR a.BoardID = @BoardID) and
            -- is not guest 
            IsNull(a.Flags & 4,0) = 0 and
            c.ForumID = 0 and
            -- is admin 
            (IsNull(c.IsAdmin,0) <> 0) 
        order by 
            a.DisplayName
end
GO

create procedure [dbo].[yaf_admin_pageaccesslist](@BoardID int = null, @StyledNicks bit = null,@UTCTIMESTAMP datetime) as
begin
         select 
        a.UserID,
        a.BoardID,
        b.Name AS BoardName,
        a.[Name],
        a.[DisplayName],
        a.[Culture],
            a.NumPosts,
            CultureUser = a.Culture,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end
        from 
            [dbo].[yaf_User] a
            JOIN
            [dbo].[yaf_Board] b	
            ON b.BoardID = a.BoardID			
            left join [dbo].[yaf_vaccess] c 
            on c.UserID=a.UserID
        where 			
            (@BoardID IS NULL OR a.BoardID = @BoardID) and
            -- is admin 
            (IsNull(c.IsAdmin,0) <> 0) and
            c.ForumID = 0 and 			
            -- is not host admin 
            IsNull(a.Flags & 1,0) = 0 
        order by 
            a.DisplayName
end
GO

create procedure [dbo].[yaf_user_listmembers](
                @BoardID int,
                @UserID int=null,
                @Approved bit=null,
                @GroupID int=null,
                @RankID int=null,
                @StyledNicks bit = null,
                @Literals nvarchar(255), 
                @Exclude bit = null, 
                @BeginsWith bit = null, 				
                @PageIndex int, 
                @PageSize int,
                @SortName int = 0,
                @SortRank int = 0,
                @SortJoined int = 0,
                @SortPosts int = 0,
                @SortLastVisit int = 0,
                @NumPosts int = 0,
                @NumPostsCompare int = 0) as
begin  
    declare @TotalRows int
    declare @FirstSelectRowNumber int
    declare @LastSelectRowNumber int
    -- find total returned count

    select @TotalRows = count(a.UserID) 
    from [dbo].[yaf_User] a   
      join [dbo].[yaf_Rank] b 
      on b.RankID=a.RankID 
      where
       a.BoardID = @BoardID	   
       and
        (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2)) and
        (@GroupID is null or exists(select 1 from [dbo].[yaf_UserGroup] x where x.UserID=a.UserID and x.GroupID=@GroupID)) and
        (@RankID is null or a.RankID=@RankID) AND
        -- user is not guest
        ISNULL(a.Flags & 4,0) <> 4
            AND
        (LOWER(a.DisplayName) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END  
            or
         LOWER(a.Name) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END) 
        and
        (a.NumPosts >= (case 
        when @NumPostsCompare = 3 then  @NumPosts end) 
        OR a.NumPosts <= (case 
        when @NumPostsCompare = 2 then @NumPosts end) OR
        a.NumPosts = (case 
        when @NumPostsCompare = 1 then @NumPosts end)); 

    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;	
    
    with UserIds  as
     (
     select ROW_NUMBER() over (order by    (case 
        when @SortName = 2 then a.[Name] end) DESC,
        (case 
        when @SortName = 1 then a.[Name] end) ASC, 
        (case 
        when @SortRank = 2 then a.RankID end) DESC,
        (case 
        when @SortRank = 1 then a.RankID end) ASC,		
        (case 
        when @SortJoined = 2 then a.Joined end) DESC,
        (case 
        when @SortJoined = 1 then a.Joined end) ASC,
        (case 
        when @SortLastVisit = 2 then a.LastVisit end) DESC,
        (case 
        when @SortLastVisit = 1 then a.LastVisit end) ASC,
        (case
         when @SortPosts = 2 then a.NumPosts end) DESC, 
        (case
         when @SortPosts = 1 then a.NumPosts end) ASC ) as RowNum, a.UserID
     from [dbo].[yaf_User] a 
            join [dbo].[yaf_Rank] b  on b.RankID=a.RankID	
     where
       a.BoardID = @BoardID	   
       and
        (@Approved is null or (@Approved=0 and (a.Flags & 2)=0) or (@Approved=1 and (a.Flags & 2)=2)) and
        (@GroupID is null or exists(select 1 from [dbo].[yaf_UserGroup] x where x.UserID=a.UserID and x.GroupID=@GroupID)) and
        (@RankID is null or a.RankID=@RankID) AND
        -- user is not guest
        ISNULL(a.Flags & 4,0) <> 4
            AND
        (LOWER(a.DisplayName) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END  
            or
         LOWER(a.Name) LIKE CASE 
            WHEN (@BeginsWith = 0 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN '%' + LOWER(@Literals) + '%' 
            WHEN (@BeginsWith = 1 AND @Literals IS NOT NULL AND LEN(@Literals) > 0) THEN LOWER(@Literals) + '%'
            ELSE '%' END) 
        and
        (a.NumPosts >= (case 
        when @NumPostsCompare = 3 then  @NumPosts end) 
        OR a.NumPosts <= (case 
        when @NumPostsCompare = 2 then @NumPosts end) OR
        a.NumPosts = (case 
        when @NumPostsCompare = 1 then @NumPosts end))
      )	  
      select 
            a.*,			
            CultureUser = a.Culture,
            IsAdmin = (select COUNT(1) from [dbo].[yaf_UserGroup] x join [dbo].[yaf_Group] y on y.GroupID=x.GroupID where x.UserID=a.UserID and (y.Flags & 1)<>0),
            IsHostAdmin	= ISNULL(a.Flags & 1,0),
            b.RankID,
            RankName = b.Name,
            Style = case(@StyledNicks)
            when 1 then  a.UserStyle
            else ''	 end,
            TotalCount =  @TotalRows 
            from 
            UserIds ti inner join
            [dbo].[yaf_User] a 
            on a.UserID = ti.UserID
            join [dbo].[yaf_Rank] b  on b.RankID=a.RankID	
    
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC;  
end
GO

create procedure [dbo].[yaf_user_login](@BoardID int,@Name nvarchar(255),@Password nvarchar(32)) as
begin
    
    declare @UserID int

    -- Try correct board first
    if exists(select UserID from [dbo].[yaf_User] where Name=@Name and Password=@Password and BoardID=@BoardID and (Flags & 2)=2)
    begin
        select UserID from [dbo].[yaf_User] where Name=@Name and Password=@Password and BoardID=@BoardID and (Flags & 2)=2
        return
    end

    if not exists(select UserID from [dbo].[yaf_User] where Name=@Name and Password=@Password and (BoardID=@BoardID or (Flags & 3)=3))
        set @UserID=null
    else
        select 
            @UserID=UserID 
        from 
            [dbo].[yaf_User]
        where 
            Name=@Name and 
            [Password]=@Password and 
            (BoardID=@BoardID or (Flags & 1)=1) and
            (Flags & 2)=2

    select @UserID
end
GO

create procedure [dbo].[yaf_user_nntp](@BoardID int,@UserName nvarchar(255),@Email nvarchar(255),@TimeZone int, @UTCTIMESTAMP datetime) as
begin	
    
    declare @UserID int

    set @UserName = @UserName + ' (NNTP)'

    select
        @UserID=UserID
    from
        [dbo].[yaf_User]
    where
        BoardID=@BoardID and
        Name=@UserName

    if @@ROWCOUNT<1
    begin
        exec [dbo].[yaf_user_save] null,@BoardID,@UserName,@UserName,@Email,@TimeZone,null,null,null,null,null, 1, null, null, null, 0, 0,@UTCTIMESTAMP 
        
        -- The next one is not safe, but this procedure is only used for testing
        select @UserID = @@IDENTITY
    end

    select UserID=@UserID
end
GO

create procedure [dbo].[yaf_user_recoverpassword](@BoardID int,@UserName nvarchar(255),@Email nvarchar(250)) as
begin
    
    declare @UserID int
    select @UserID = UserID from [dbo].[yaf_User] where BoardID = @BoardID and Name = @UserName and Email = @Email
    if @UserID is null begin
        select UserID = convert(int,null)
        return
    end else
    begin
        select UserID = @UserID
    end
end
GO

CREATE PROCEDURE [dbo].[yaf_user_removepoints] (@UserID int, @FromUserID int = null, @UTCTIMESTAMP datetime, @Points int) AS
BEGIN
    
    UPDATE [dbo].[yaf_User] SET Points = Points - @Points WHERE UserID = @UserID

    IF @FromUserID IS NOT NULL 
    BEGIN
        declare	@VoteDate datetime
    set @VoteDate = (select top 1 VoteDate from [dbo].[yaf_ReputationVote] where ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID)
    IF @VoteDate is not null
    begin	     
          update [dbo].[yaf_ReputationVote] set VoteDate=@UTCTIMESTAMP where VoteDate = @VoteDate AND ReputationFromUserID=@FromUserID AND ReputationToUserID=@UserID
    end
    ELSE
      begin
          insert into [dbo].[yaf_ReputationVote](ReputationFromUserID,ReputationToUserID,VoteDate)
          values (@FromUserID, @UserID, @UTCTIMESTAMP)
      end
    END
END
GO

CREATE PROCEDURE [dbo].[yaf_user_resetpoints] AS
BEGIN
    
    UPDATE [dbo].[yaf_User] SET Points = NumPosts * 3
END
GO

CREATE PROCEDURE [dbo].[yaf_user_savenotification](
    @UserID				int,
    @PMNotification		bit = null,
    @AutoWatchTopics    bit = null,
    @NotificationType	int = null,
    @DailyDigest		bit = null
)
AS
BEGIN

        UPDATE
            [dbo].[yaf_User]
        SET
            PMNotification = (CASE WHEN (@PMNotification is not null) THEN  @PMNotification ELSE PMNotification END),
            AutoWatchTopics = (CASE WHEN (@AutoWatchTopics is not null) THEN  @AutoWatchTopics ELSE AutoWatchTopics END),
            NotificationType =  (CASE WHEN (@NotificationType is not null) THEN  @NotificationType ELSE NotificationType END),
            DailyDigest = (CASE WHEN (@DailyDigest is not null) THEN  @DailyDigest ELSE DailyDigest END)
        WHERE
            UserID = @UserID
END
GO

CREATE procedure [dbo].[yaf_user_save](
    @UserID				int,
    @BoardID			int,
    @UserName			nvarchar(255) = null,
    @DisplayName		nvarchar(255) = null,
    @Email				nvarchar(255) = null,
    @TimeZone			int,
    @LanguageFile		nvarchar(50) = null,
    @Culture		    varchar(10) = null,
    @ThemeFile			nvarchar(50) = null,
    @TextEditor			nvarchar(50) = null,
    @OverrideDefaultTheme	bit = null,
    @Approved			bit = null,
    @PMNotification		bit = null,
    @AutoWatchTopics    bit = null,	
    @ProviderUserKey	nvarchar(64) = null,
    @DSTUser            bit = null,
    @HideUser           bit = null,
    @NotificationType	int = null,
    @UTCTIMESTAMP datetime)
AS
begin
    
    declare @RankID int
    declare @Flags int	
    declare @OldDisplayName nvarchar(255)		
        
    if @DSTUser is null SET @DSTUser = 0
    if @HideUser is null SET @HideUser = 0
    if @PMNotification is null SET @PMNotification = 1
    if @AutoWatchTopics is null SET @AutoWatchTopics = 0
    if @OverrideDefaultTheme is null SET @OverrideDefaultTheme=0

    if @UserID is null or @UserID<1 begin
        
        if @Approved<>0 set @Flags = @Flags | 2	
        if @Email = '' set @Email = null
        
        select @RankID = RankID from [dbo].[yaf_Rank] where (Flags & 1)<>0 and BoardID=@BoardID

        insert into [dbo].[yaf_User](BoardID,RankID,[Name],DisplayName,Password,Email,Joined,LastVisit,NumPosts,TimeZone,Flags,PMNotification,AutoWatchTopics,NotificationType,ProviderUserKey) 
        values(@BoardID,@RankID,@UserName,@DisplayName,'-',@Email,@UTCTIMESTAMP ,@UTCTIMESTAMP ,0,@TimeZone, @Flags,@PMNotification,@AutoWatchTopics,@NotificationType,@ProviderUserKey)		
    
        set @UserID = SCOPE_IDENTITY()

        insert into [dbo].[yaf_UserGroup](UserID,GroupID) select @UserID,GroupID from [dbo].[yaf_Group] where BoardID=@BoardID and (Flags & 4)<>0
    end
    else begin
        SELECT @Flags = Flags, @OldDisplayName = DisplayName FROM [dbo].[yaf_User] where UserID = @UserID
        
        -- set user dirty 
        set @Flags = @Flags	| 64
        
        IF ((@DSTUser<>0) AND (@Flags & 32) <> 32)		
        SET @Flags = @Flags | 32
        ELSE IF ((@DSTUser=0) AND (@Flags & 32) = 32)
        SET @Flags = @Flags ^ 32
            
        IF ((@HideUser<>0) AND ((@Flags & 16) <> 16)) 
        SET @Flags = @Flags | 16 
        ELSE IF ((@HideUser=0) AND ((@Flags & 16) = 16)) 
        SET @Flags = @Flags ^ 16
        
        update [dbo].[yaf_User] set
            TimeZone = @TimeZone,
            LanguageFile = @LanguageFile,
            ThemeFile = @ThemeFile,
            Culture = @Culture,
            TextEditor = @TextEditor,
            OverridedefaultThemes = @OverrideDefaultTheme,
            PMNotification = (CASE WHEN (@PMNotification is not null) THEN  @PMNotification ELSE PMNotification END),
            AutoWatchTopics = (CASE WHEN (@AutoWatchTopics is not null) THEN  @AutoWatchTopics ELSE AutoWatchTopics END),
            NotificationType =  (CASE WHEN (@NotificationType is not null) THEN  @NotificationType ELSE NotificationType END),
            Flags = (CASE WHEN @Flags<>Flags THEN  @Flags ELSE Flags END),
            DisplayName = (CASE WHEN (@DisplayName is not null) THEN  @DisplayName ELSE DisplayName END),
            Email = (CASE WHEN (@Email is not null) THEN  @Email ELSE Email END) 
        where UserID = @UserID	
        -- here we sync a new display name everywhere
        if (@DisplayName IS NOT NULL AND COALESCE(@OldDisplayName,'') != COALESCE(@DisplayName,''))
        begin
        -- sync display names everywhere - can run a long time on large forums
        update [dbo].[yaf_Forum] set LastUserDisplayName = @DisplayName where LastUserID = @UserID  AND (LastUserDisplayName IS NULL OR LastUserDisplayName = @OldDisplayName)
        update [dbo].[yaf_Topic] set LastUserDisplayName = @DisplayName where LastUserID = @UserID AND (LastUserDisplayName IS NULL OR LastUserDisplayName = @OldDisplayName)
        update [dbo].[yaf_Topic] set UserDisplayName = @DisplayName where UserID = @UserID AND (UserDisplayName IS NULL OR UserDisplayName = @OldDisplayName)
        update [dbo].[yaf_Message] set UserDisplayName = @DisplayName where UserID = @UserID AND (UserDisplayName IS NULL OR UserDisplayName = @OldDisplayName)
        update [dbo].[yaf_ShoutboxMessage] set UserDisplayName = @DisplayName where UserID = @UserID AND (UserDisplayName IS NULL OR UserDisplayName = @OldDisplayName)
        end
        
    end
end
GO

CREATE procedure [dbo].[yaf_user_saveavatar]
(
    @UserID int,
    @Avatar nvarchar(255) = NULL,
    @AvatarImage image = NULL,
    @AvatarImageType nvarchar(50) = NULL
)
AS
BEGIN
    
    IF @Avatar IS NOT NULL 
    BEGIN
        UPDATE
            [dbo].[yaf_User]
        SET
            Avatar = @Avatar,
            AvatarImage = null,
            AvatarImageType = null
        WHERE
            UserID = @UserID
    END
    ELSE IF @AvatarImage IS NOT NULL 
    BEGIN
        UPDATE
            [dbo].[yaf_User]
        SET
            AvatarImage = @AvatarImage,
            AvatarImageType = @AvatarImageType,
            Avatar = null
        WHERE
            UserID = @UserID
    END
END

GO

create procedure [dbo].[yaf_user_savepassword](@UserID int,@Password nvarchar(32)) as
begin
    
    update [dbo].[yaf_User] set Password = @Password where UserID = @UserID
end
GO

create procedure [dbo].[yaf_user_savesignature](@UserID int,@Signature ntext) as
begin
    
    update [dbo].[yaf_User] set Signature = @Signature where UserID = @UserID
end
GO

create procedure [dbo].[yaf_user_setnotdirty](@UserID int) as
begin	
    update [dbo].[yaf_User] set Flags = Flags ^ 64 where UserID = @UserID
end
GO

CREATE PROCEDURE [dbo].[yaf_user_setpoints] (@UserID int,@Points int) AS
BEGIN
    
    UPDATE [dbo].[yaf_User] SET Points = @Points WHERE UserID = @UserID
END
GO

create procedure [dbo].[yaf_user_setrole](@BoardID int,@ProviderUserKey nvarchar(64),@Role nvarchar(255)) as
begin
    
    declare @UserID int, @GroupID int
    
    select @UserID=UserID from [dbo].[yaf_User] where BoardID=@BoardID and ProviderUserKey=@ProviderUserKey

    if @Role is null
    begin
        delete from [dbo].[yaf_UserGroup] where UserID=@UserID
    end else
    begin
        if not exists(select 1 from [dbo].[yaf_Group] where BoardID=@BoardID and Name=@Role)
        begin
            insert into [dbo].[yaf_Group](Name,BoardID,Flags)
            values(@Role,@BoardID,0);
            set @GroupID = SCOPE_IDENTITY()

            insert into [dbo].[yaf_ForumAccess](GroupID,ForumID,AccessMaskID)
            select
                @GroupID,
                a.ForumID,
                min(a.AccessMaskID)
            from
                [dbo].[yaf_ForumAccess] a
                join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
            where
                b.BoardID=@BoardID and
                (b.Flags & 4)=4
            group by
                a.ForumID
        end else
        begin
            select @GroupID = GroupID from [dbo].[yaf_Group] where BoardID=@BoardID and Name=@Role
        end
        -- user already can be in the group even if Role isn't null, an extra check is required 
        if not exists(select 1 from [dbo].[yaf_UserGroup] where UserID=@UserID and GroupID=@GroupID)
        begin
        insert into [dbo].[yaf_UserGroup](UserID,GroupID) values(@UserID,@GroupID)
        end
    end
end
GO

create procedure [dbo].[yaf_user_suspend](@UserID int,@Suspend datetime=null, @SuspendReason ntext = null, @SuspendBy int = 0) as
    begin
        update 
	        [dbo].[yaf_User] 
	    set 
		    Suspended = @Suspend, 
			SuspendedReason = @SuspendReason,
			SuspendedBy = @SuspendBy
		where 
		    UserID=@UserID
    end
go

create procedure [dbo].[yaf_user_upgrade](@UserID int) as
begin
    
    declare @RankID			int
    declare @Flags			int
    declare @MinPosts		int
    declare @NumPosts		int
    declare @BoardId		int
    declare @RankBoardID	int

    -- Get user and rank information
    select
        @RankID = b.RankID,
        @Flags = b.Flags,
        @MinPosts = b.MinPosts,
        @NumPosts = a.NumPosts,
        @BoardId = a.BoardID		
    from
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_Rank] b on b.RankID = a.RankID
    where
        a.UserID = @UserID
    
    -- If user isn't member of a ladder rank, exit
    if (@Flags & 2) = 0 return

    -- retrieve board current user's rank beling to	
    select @RankBoardID = BoardID
    from   [dbo].[yaf_Rank]
    where  RankID = @RankID

    -- does user have rank from his board?
    IF @RankBoardID <> @BoardId begin
        -- get highest rank user can get
        select top 1
               @RankID = RankID
        from   [dbo].[yaf_Rank]
        where  BoardID = @BoardId
               and (Flags & 2) = 2
               and MinPosts <= @NumPosts
        order by
               MinPosts desc
    end
    else begin
        -- See if user got enough posts for next ladder group
        select top 1
            @RankID = RankID
        from
            [dbo].[yaf_Rank]
        where
            BoardID = @BoardId and
            (Flags & 2) = 2 and
            MinPosts <= @NumPosts and
            MinPosts > @MinPosts
        order by
            MinPosts
    end

    if @@ROWCOUNT=1
        update [dbo].[yaf_User] set RankID = @RankID where UserID = @UserID
end
GO

create procedure [dbo].[yaf_userforum_delete](@UserID int,@ForumID int) as
begin
    
    delete from [dbo].[yaf_UserForum] where UserID=@UserID and ForumID=@ForumID
end
GO

create procedure [dbo].[yaf_userforum_list](@UserID int=null,@ForumID int=null) as 
begin
    
    select 
        a.*,
        b.AccessMaskID,
        b.Accepted,
        Access = c.Name
    from
        [dbo].[yaf_User] a
        join [dbo].[yaf_UserForum] b on b.UserID=a.UserID
        join [dbo].[yaf_AccessMask] c on c.AccessMaskID=b.AccessMaskID
    where
        (@UserID is null or a.UserID=@UserID) and
        (@ForumID is null or b.ForumID=@ForumID)
    order by
        a.Name	
end
GO

create procedure [dbo].[yaf_userforum_save](@UserID int,@ForumID int,@AccessMaskID int,@UTCTIMESTAMP datetime) as
begin
    
    if exists(select 1 from [dbo].[yaf_UserForum] where UserID=@UserID and ForumID=@ForumID)
        update [dbo].[yaf_UserForum] set AccessMaskID=@AccessMaskID where UserID=@UserID and ForumID=@ForumID
    else
        insert into [dbo].[yaf_UserForum](UserID,ForumID,AccessMaskID,Invited,Accepted) values(@UserID,@ForumID,@AccessMaskID,@UTCTIMESTAMP ,1)
end
GO

create procedure [dbo].[yaf_usergroup_list](@UserID int) as begin
    
    select 
        b.GroupID,
        b.Name,
        b.Style
    from
        [dbo].[yaf_UserGroup] a
        join [dbo].[yaf_Group] b on b.GroupID=a.GroupID
    where
        a.UserID = @UserID
    order by
        b.Name
end
GO

create procedure [dbo].[yaf_usergroup_save](@UserID int,@GroupID int,@Member bit) as
begin
    
    if @Member=0
    begin
        delete from [dbo].[yaf_UserGroup] where UserID=@UserID and GroupID=@GroupID
    end 
    else
    begin
        insert into [dbo].[yaf_UserGroup](UserID,GroupID)
        select @UserID,@GroupID
        where not exists(select 1 from [dbo].[yaf_UserGroup] where UserID=@UserID and GroupID=@GroupID)
        UPDATE [dbo].[yaf_User] SET UserStyle= ISNULL(( SELECT TOP 1 f.Style FROM [dbo].[yaf_UserGroup] e 
        join [dbo].[yaf_Group] f on f.GroupID=e.GroupID WHERE e.UserID=@UserID AND f.Style IS NOT NULL ORDER BY f.SortOrder), (SELECT TOP 1 r.Style FROM [dbo].[yaf_Rank] r where r.RankID = [dbo].[yaf_User].RankID)) 
        WHERE UserID = @UserID    	
    end  
end
GO

create procedure [dbo].[yaf_userpmessage_delete](@UserPMessageID int) as
begin
    
    delete from [dbo].[yaf_UserPMessage] where UserPMessageID=@UserPMessageID
end
GO

create procedure [dbo].[yaf_userpmessage_list](@UserPMessageID int) as
begin
    
    SELECT
        a.*,
        FromUser = b.Name,
        ToUserID = c.UserID,
        ToUser = c.Name,
        d.IsRead,
        d.IsReply,
        d.UserPMessageID
    FROM
        [dbo].[yaf_PMessage] a
        INNER JOIN [dbo].[yaf_UserPMessage] d ON d.PMessageID = a.PMessageID
        INNER JOIN [dbo].[yaf_User] b ON b.UserID = a.FromUserID
        inner join [dbo].[yaf_User] c ON c.UserID = d.UserID
    WHERE
        d.UserPMessageID = @UserPMessageID
    AND
        d.IsDeleted=0
end
GO

create procedure [dbo].[yaf_watchforum_add](@UserID int,@ForumID int,@UTCTIMESTAMP datetime) as
begin
    
    insert into [dbo].[yaf_WatchForum](ForumID,UserID,Created)
    select @ForumID, @UserID, @UTCTIMESTAMP 
    where not exists(select 1 from [dbo].[yaf_WatchForum] where ForumID=@ForumID and UserID=@UserID)
end
GO

create procedure [dbo].[yaf_watchforum_check](@UserID int,@ForumID int) as
begin
    
    SELECT WatchForumID FROM [dbo].[yaf_WatchForum] WHERE UserID = @UserID AND ForumID = @ForumID
end
GO

create procedure [dbo].[yaf_watchforum_delete](@WatchForumID int) as
begin
    
    delete from [dbo].[yaf_WatchForum] where WatchForumID = @WatchForumID
end
GO

create procedure [dbo].[yaf_watchforum_list](@UserID int) as
begin
    
    select
        a.*,
        ForumName = b.Name,
        [Messages] = (select count(1) from [dbo].[yaf_Topic] x join [dbo].[yaf_Message] y on y.TopicID=x.TopicID where x.ForumID=a.ForumID),
        Topics = (select count(1) from [dbo].[yaf_Topic] x where x.ForumID=a.ForumID and x.TopicMovedID is null),
        b.LastPosted,
        b.LastMessageID,
        LastTopicID = (select TopicID from [dbo].[yaf_Message] x where x.MessageID=b.LastMessageID),
        b.LastUserID,
        LastUserName = IsNull(b.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=b.LastUserID)),
        LastUserDisplayName = IsNull(b.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=b.LastUserID))
    from
        [dbo].[yaf_WatchForum] a
        inner join [dbo].[yaf_Forum] b on b.ForumID = a.ForumID
    where
        a.UserID = @UserID
end
GO

create procedure [dbo].[yaf_watchtopic_add](@UserID int,@TopicID int,@UTCTIMESTAMP datetime) as
begin
    
    insert into [dbo].[yaf_WatchTopic](TopicID,UserID,Created)
    select @TopicID, @UserID, @UTCTIMESTAMP 
    where not exists(select 1 from [dbo].[yaf_WatchTopic] where TopicID=@TopicID and UserID=@UserID)
end
GO

create procedure [dbo].[yaf_watchtopic_check](@UserID int,@TopicID int) as
begin
    
    SELECT WatchTopicID FROM [dbo].[yaf_WatchTopic] WHERE UserID = @UserID AND TopicID = @TopicID
end
GO

create procedure [dbo].[yaf_watchtopic_delete](@WatchTopicID int) as
begin
        delete from [dbo].[yaf_WatchTopic] where WatchTopicID = @WatchTopicID
end
GO

create procedure [dbo].[yaf_watchtopic_list](@UserID int) as
begin
        select
        a.*,
        TopicName = b.Topic,
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=b.TopicID) -1,
		b.ForumID,
        b.[Views],
        b.LastPosted,
        b.LastMessageID,
        b.LastUserID,
        LastUserName = IsNull(b.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=b.LastUserID)),
        LastUserDisplayName = IsNull(b.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=b.LastUserID))
    from
        [dbo].[yaf_WatchTopic] a
        inner join [dbo].[yaf_Topic] b on b.TopicID = a.TopicID
    where
        a.UserID = @UserID
end
GO

CREATE procedure [dbo].[yaf_message_reply_list](@MessageID int) as
begin
        set nocount on
    select
        a.MessageID,
        a.UserID,
        UserName = b.Name,
        UserDisplayName = b.DisplayName,
        a.Posted,
        a.[Message],
        c.TopicID,
        c.ForumID,
        c.Topic,
        c.Priority,
        c.Description,
        c.Status,
        c.Styles,
        a.Flags,
        c.UserID AS TopicOwnerID,
        Edited = IsNull(a.Edited,a.Posted),
        a.EditReason,
        a.Position,
        a.Indent,
        a.IsModeratorChanged,
        a.DeleteReason,
        a.BlogPostID,
        c.PollID,
        a.IP,
        a.ReplyTo,
        a.ExternalMessageId,
        a.ReferenceMessageId
    from
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_User] b on b.UserID = a.UserID
        inner join [dbo].[yaf_Topic] c on c.TopicID = a.TopicID
    where
        a.IsApproved = 1 and
        a.ReplyTo = @MessageID
end
GO


CREATE procedure [dbo].[yaf_message_deleteundelete](@MessageID int, @isModeratorChanged bit, @DeleteReason nvarchar(100), @isDeleteAction int) as
begin
    
    declare @TopicID		int
    declare @ForumID		int
    declare @MessageCount	int
    declare @LastMessageID	int
    declare @UserID			int

    -- Find TopicID and ForumID
    select @TopicID=b.TopicID,@ForumID=b.ForumID,@UserID = a.UserID 
    from 
        [dbo].[yaf_Message] a
        inner join [dbo].[yaf_Topic] b on b.TopicID=a.TopicID
    where 
        a.MessageID=@MessageID

    -- Update LastMessageID in Topic and Forum
    update [dbo].[yaf_Topic] set
        LastPosted = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null,
        LastMessageFlags = null
    where LastMessageID = @MessageID

    update [dbo].[yaf_Forum] set
        LastPosted = null,
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

    -- "Delete" message
    update [dbo].[yaf_Message]
     set IsModeratorChanged = @isModeratorChanged, DeleteReason = @DeleteReason, Flags = Flags ^ 8
     where MessageID = @MessageID and ((Flags & 8) <> @isDeleteAction*8)
    
    -- update num posts for user now that the delete/undelete status has been toggled...
    if exists(select top 1 1 from [dbo].[yaf_Forum] where ForumID=@ForumID and (Flags & 4)=0)
    begin
	    UPDATE [dbo].[yaf_User] SET NumPosts = (SELECT count(MessageID) FROM [dbo].[yaf_Message] WHERE UserID = @UserID AND IsDeleted = 0 AND IsApproved = 1) WHERE UserID = @UserID
	end

    -- Delete topic if there are no more messages
    select @MessageCount = count(1) from [dbo].[yaf_Message] where TopicID = @TopicID and IsDeleted=0
    if @MessageCount=0 exec [dbo].[yaf_topic_delete] @TopicID
    -- update lastpost
    exec [dbo].[yaf_topic_updatelastpost] @ForumID,@TopicID
    exec [dbo].[yaf_forum_updatestats] @ForumID
    -- update topic numposts
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0 )
    where TopicID = @TopicID
end
GO

create procedure [dbo].[yaf_topic_create_by_message] (
    @MessageID int,
    @ForumID	int,
    @Subject	nvarchar(100),
    @UTCTIMESTAMP datetime
) as
begin
        
declare		@UserID		int
declare		@Posted		datetime

set @UserID = (select UserID from [dbo].[yaf_message] where MessageID =  @MessageID)
set  @Posted  = (select  posted from [dbo].[yaf_message] where MessageID =  @MessageID)


    declare @TopicID int
    --declare @MessageID int

    if @Posted is null set @Posted = @UTCTIMESTAMP 

    insert into [dbo].[yaf_Topic](ForumID,Topic,UserID,Posted,[Views],Priority,PollID,UserName,NumPosts)
    values(@ForumID,@Subject,@UserID,@Posted,0,0,null,null,0)

    set @TopicID = @@IDENTITY
--	exec [dbo].[yaf_message_save] @TopicID,@UserID,@Message,@UserName,@IP,@Posted,null,@Flags,@MessageID output
    select TopicID = @TopicID, MessageID = @MessageID
END
GO

CREATE PROCEDURE [dbo].[yaf_message_move] (@MessageID int, @MoveToTopic int) AS
BEGIN
    DECLARE
    @Position int,
    @ReplyToID int,
    @OldTopicID int,
    @OldForumID int

    
    declare @NewForumID		int
    declare @MessageCount	int
    declare @LastMessageID	int

    -- Find TopicID and ForumID
--	select @OldTopicID=b.TopicID,@ForumID=b.ForumID from [dbo].[yaf_Message] a,yaf_Topic b where a.MessageID=@MessageID and b.TopicID=a.TopicID

SET 	@NewForumID = (SELECT     ForumID
                FROM         [dbo].[yaf_Topic]
                WHERE     (TopicID = @MoveToTopic))


SET 	@OldTopicID = 	(SELECT     TopicID
                FROM         [dbo].[yaf_Message]
                WHERE     (MessageID = @MessageID))

SET 	@OldForumID = (SELECT     ForumID
                FROM         [dbo].[yaf_Topic]
                WHERE     (TopicID = @OldTopicID))

SET	@ReplyToID = (SELECT     MessageID
            FROM         [dbo].[yaf_Message]
            WHERE     ([Position] = 0) AND (TopicID = @MoveToTopic))

SET	@Position = 	(SELECT     MAX([Position]) + 1 AS Expr1
            FROM         [dbo].[yaf_Message]
            WHERE     (TopicID = @MoveToTopic) and Posted < (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID ) )

if @Position is null  set @Position = 0

update [dbo].[yaf_Message] set
        Position = Position+1
     WHERE     (TopicID = @MoveToTopic) and Posted > (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID)

update [dbo].[yaf_Message] set
        Position = Position-1
     WHERE     (TopicID = @OldTopicID) and Posted > (select Posted from [dbo].[yaf_Message] where MessageID = @MessageID)

    


    -- Update LastMessageID in Topic and Forum
    update [dbo].[yaf_Topic] set
        LastPosted = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastMessageFlags = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

    update [dbo].[yaf_Forum] set
        LastPosted = null,
        LastTopicID = null,
        LastMessageID = null,
        LastUserID = null,
        LastUserName = null,
        LastUserDisplayName = null
    where LastMessageID = @MessageID

	if (@Position = 0) 
	begin
	    update [dbo].[yaf_Message] set
		    ReplyTo = @MessageID
        WHERE  
		    TopicID = @MoveToTopic and ReplyTo is NULL

		set @ReplyToID = NULL
    end

    UPDATE [dbo].[yaf_Message] SET
    TopicID = @MoveToTopic,
    ReplyTo = @ReplyToID,
    [Position] = @Position
    WHERE  MessageID = @MessageID

    -- Delete topic if there are no more messages
    select @MessageCount = count(1) from [dbo].[yaf_Message] where TopicID = @OldTopicID and IsDeleted=0
    if @MessageCount=0 exec [dbo].[yaf_topic_delete] @OldTopicID

    -- update lastpost
    exec [dbo].[yaf_topic_updatelastpost] @OldForumID,@OldTopicID
    exec [dbo].[yaf_topic_updatelastpost] @NewForumID,@MoveToTopic

    -- update topic numposts
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @OldTopicID
    update [dbo].[yaf_Topic] set
        NumPosts = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=[dbo].[yaf_Topic].TopicID and x.IsApproved = 1 and x.IsDeleted = 0)
    where TopicID = @MoveToTopic

    exec [dbo].[yaf_forum_updatelastpost] @NewForumID
    exec [dbo].[yaf_forum_updatestats] @NewForumID
    exec [dbo].[yaf_forum_updatelastpost] @OldForumID
    exec [dbo].[yaf_forum_updatestats] @OldForumID

END
GO

create proc [dbo].[yaf_forum_resync]
    @BoardID int,
    @ForumID int = null
AS
begin
    
    if (@ForumID is null) begin
        declare curForums cursor for
            select 
                a.ForumID
            from
                [dbo].[yaf_Forum] a
                JOIN [dbo].[yaf_Category] b on a.CategoryID=b.CategoryID
                JOIN [dbo].[yaf_Board] c on b.BoardID = c.BoardID  
            where
                c.BoardID=@BoardID

        open curForums
        
        -- cycle through forums
        fetch next from curForums into @ForumID
        while @@FETCH_STATUS = 0
        begin
            --update statistics
            exec [dbo].[yaf_forum_updatestats] @ForumID
            --update last post
            exec [dbo].[yaf_forum_updatelastpost] @ForumID

            fetch next from curForums into @ForumID
        end
        close curForums
        deallocate curForums
    end
    else begin
        --update statistics
        exec [dbo].[yaf_forum_updatestats] @ForumID
        --update last post
        exec [dbo].[yaf_forum_updatelastpost] @ForumID
    end
end
GO

create proc [dbo].[yaf_board_resync]
    @BoardID int = null
as
begin
    
    if (@BoardID is null) begin
        declare curBoards cursor for
            select BoardID from	[dbo].[yaf_Board]

        open curBoards
        
        -- cycle through forums
        fetch next from curBoards into @BoardID
        while @@FETCH_STATUS = 0
        begin
            --resync board forums
            exec [dbo].[yaf_forum_resync] @BoardID

            fetch next from curBoards into @BoardID
        end
        close curBoards
        deallocate curBoards
    end
    else begin
        --resync board forums
        exec [dbo].[yaf_forum_resync] @BoardID
    end
end
GO

CREATE PROCEDURE [dbo].[yaf_category_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN       
        SELECT TOP(@Limit) c.[CategoryID],
                 c.[Name]
        FROM     [dbo].[yaf_Category] c
        WHERE    c.[CategoryID] >= @StartID
        AND c.[CategoryID] < (@StartID + @Limit)
        ORDER BY c.[CategoryID]       
    END
GO

CREATE PROCEDURE [dbo].[yaf_forum_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN
        SET ARITHABORT ON        
        SELECT TOP(@Limit)  f.[ForumID],
                 f.[Name]
        FROM     [dbo].[yaf_Forum] f
        WHERE    f.[ForumID] >= @StartID
        AND f.[ForumID] < (@StartID + @Limit)
        ORDER BY f.[ForumID]    
    END
GO

CREATE PROCEDURE [dbo].[yaf_message_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 1000)
AS
    BEGIN
        SET ARITHABORT ON       
        SELECT TOP(@Limit)  m.[MessageID],
                 m.[TopicID]
        FROM     [dbo].[yaf_Message] m
        WHERE    m.[MessageID] >= @StartID
        AND m.[MessageID] < (@StartID + @Limit)
        AND m.[TopicID] IS NOT NULL
        ORDER BY m.[MessageID]   
    END
GO

CREATE PROCEDURE [dbo].[yaf_topic_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN
        SET ARITHABORT ON      
        SELECT TOP(@Limit)  t.[TopicID],
                 t.[Topic]
        FROM     [dbo].[yaf_Topic] t
        WHERE    t.[TopicID] >= @StartID
        AND t.[TopicID] < (@StartID + @Limit)
        ORDER BY t.[TopicID]        
    END
GO

create procedure [dbo].[yaf_topic_similarlist](
                @PageUserID int,
                @Topic   nvarchar(100),
				@TopicID int,
                @Count   int,
                @StyledNicks bit = 0)
as
    begin
        select top(@Count) 
		t.Topic,
        t.TopicID,
        t.ForumID,
        ForumName = f.Name,
        t.UserID,
        StarterName = u.Name,
        StarterDisplayName = u.DisplayName,
        StarterStyle = case(@StyledNicks)
            when 1 then  u.UserStyle
            else ''	 end,
        t.Posted
        from     [dbo].[yaf_Topic] t
		inner join [dbo].[yaf_Forum] f on t.ForumID= f.ForumID
        inner join [dbo].[yaf_User] u on t.UserID = u.UserID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=f.ForumID
        where    t.[Topic] like '%' + @Topic + '%'
        and t.[TopicID] != @TopicID
        and x.UserID = @PageUserID
        and CONVERT(int,x.ReadAccess) <> 0
        order by t.[Posted] DESC
    end
go

CREATE PROCEDURE [dbo].[yaf_user_simplelist](
                @StartID INT  = 0,
                @Limit   INT  = 500)
AS
    BEGIN               
       
        SELECT TOP(@Limit)  a.[UserID],
                 a.[Name],
				 a.[DisplayName]
        FROM     [dbo].[yaf_User] a
        WHERE    a.[UserID] >= @StartID
        AND a.[UserID] < (@StartID + @Limit)
        ORDER BY a.[UserID]     
    END
GO

-- BBCode

CREATE PROCEDURE [dbo].[yaf_bbcode_delete]
(
    @BBCodeID int = NULL
)
AS
BEGIN
        
    IF @BBCodeID IS NOT NULL
        DELETE FROM [dbo].[yaf_BBCode] WHERE BBCodeID = @BBCodeID
    ELSE
        DELETE FROM [dbo].[yaf_BBCode]
END
GO

CREATE PROCEDURE [dbo].[yaf_bbcode_list]
(
    @BoardID int,
    @BBCodeID int = null
)
AS
BEGIN
        
    IF @BBCodeID IS NULL
        SELECT * FROM [dbo].[yaf_BBCode] WHERE BoardID = @BoardID ORDER BY ExecOrder, [Name] DESC
    ELSE
        SELECT * FROM [dbo].[yaf_BBCode] WHERE BBCodeID = @BBCodeID ORDER BY ExecOrder
END
GO

CREATE PROCEDURE [dbo].[yaf_bbcode_save]
(
    @BBCodeID int = null,
    @BoardID int,
    @Name nvarchar(255),
    @Description nvarchar(4000) = null,
    @OnClickJS nvarchar(1000) = null,
    @DisplayJS ntext = null,
    @EditJS ntext = null,
    @DisplayCSS ntext = null,
    @SearchRegEx ntext,
    @ReplaceRegEx ntext,
    @Variables nvarchar(1000) = null,
    @UseModule bit = null,
    @ModuleClass nvarchar(255) = null,	
    @ExecOrder int = 1
)
AS
BEGIN
        
    IF @BBCodeID IS NOT NULL BEGIN
        UPDATE
            [dbo].[yaf_BBCode]
        SET
            [Name] = @Name,
            [Description] = @Description,
            [OnClickJS] = @OnClickJS,
            [DisplayJS] = @DisplayJS,
            [EditJS] = @EditJS,
            [DisplayCSS] = @DisplayCSS,
            [SearchRegex] = @SearchRegEx,
            [ReplaceRegex] = @ReplaceRegEx,
            [Variables] = @Variables,
            [UseModule] = @UseModule,
            [ModuleClass] = @ModuleClass,			
            [ExecOrder] = @ExecOrder
        WHERE
            BBCodeID = @BBCodeID
    END
    ELSE BEGIN
        IF NOT EXISTS(SELECT 1 FROM [dbo].[yaf_BBCode] WHERE BoardID = @BoardID AND [Name] = @Name)
            INSERT INTO
                [dbo].[yaf_BBCode] ([BoardID],[Name],[Description],[OnClickJS],[DisplayJS],[EditJS],[DisplayCSS],[SearchRegex],[ReplaceRegex],[Variables],[UseModule],[ModuleClass],[ExecOrder])
            VALUES (@BoardID,@Name,@Description,@OnClickJS,@DisplayJS,@EditJS,@DisplayCSS,@SearchRegEx,@ReplaceRegEx,@Variables,@UseModule,@ModuleClass,@ExecOrder)
    END
END
GO

-- polls

CREATE procedure [dbo].[yaf_choice_add](
    @PollID		int,
    @Choice		nvarchar(50),
    @ObjectPath nvarchar(255),
    @MimeType nvarchar(50)
) as
begin
    
    insert into [dbo].[yaf_Choice]
        (PollID, Choice, Votes, ObjectPath, MimeType)
        values
        (@PollID, @Choice, 0, @ObjectPath, @MimeType)
end
GO

CREATE procedure [dbo].[yaf_choice_update](
    @ChoiceID	int,
    @Choice		nvarchar(50),
    @ObjectPath nvarchar(255),
    @MimeType nvarchar(50)
) as
begin
    
    update [dbo].[yaf_Choice]
        set Choice = @Choice, ObjectPath =  @ObjectPath, MimeType = @MimeType
        where ChoiceID = @ChoiceID
end
GO

CREATE procedure [dbo].[yaf_choice_delete](
    @ChoiceID	int
) as
begin
    
    delete from [dbo].[yaf_Choice]
        where ChoiceID = @ChoiceID
end
GO

CREATE procedure [dbo].[yaf_poll_update](
    @PollID		int,
    @Question	nvarchar(50),
    @Closes 	datetime = null,
    @QuestionObjectPath nvarchar(255), 
    @QuestionMimeType varchar(50),
    @IsBounded  bit,
    @IsClosedBounded  bit,
    @AllowMultipleChoices bit,
    @ShowVoters bit,
    @AllowSkipVote bit

) as
begin
    declare @pgid int
    declare @flags int

        update [dbo].[yaf_Poll]
        set Flags	= 0 where PollID = @PollID AND Flags IS NULL;

        SELECT @flags = Flags FROM [dbo].[yaf_Poll]		
        where PollID = @PollID

        -- is closed bound flag
        SET @flags = (CASE				
        WHEN @IsClosedBounded > 0 AND (@flags & 4) <> 4 THEN @flags | 4		
        WHEN @IsClosedBounded <= 0 AND (@flags & 4) = 4  THEN @flags ^ 4
        ELSE @flags END)

        -- allow multiple choices flag
        SET @flags = (CASE				
        WHEN @AllowMultipleChoices > 0 AND (@flags & 8) <> 8 THEN @flags | 8		
        WHEN @AllowMultipleChoices <= 0 AND (@flags & 8) = 8  THEN @flags ^ 8
        ELSE @flags END)
        
        -- show who's voted for a poll flag
        SET @flags = (CASE				
        WHEN @ShowVoters > 0 AND (@flags & 16) <> 16 THEN @flags | 16		
        WHEN @ShowVoters <= 0 AND (@flags & 16) = 16  THEN @flags ^ 16
        ELSE @flags END)

        -- allow users don't vote and see results
        SET @flags = (CASE				
        WHEN @AllowSkipVote > 0 AND (@flags & 32) <> 32 THEN @flags | 32		
        WHEN @AllowSkipVote <= 0 AND (@flags & 32) = 32  THEN @flags ^ 32
        ELSE @flags END)

      update [dbo].[yaf_Poll]
        set Question	=	@Question,
            Closes		=	@Closes,
            ObjectPath = @QuestionObjectPath,
            MimeType = @QuestionMimeType,
            Flags	= @flags
        where PollID = @PollID

      SELECT  @pgid = PollGroupID FROM [dbo].[yaf_Poll]
      where PollID = @PollID
   
    update [dbo].[yaf_PollGroupCluster]
        set Flags	= (CASE 
        WHEN @IsBounded > 0 AND (Flags & 2) <> 2 THEN Flags | 2 		
        WHEN @IsBounded <= 0 AND (Flags & 2) = 2 THEN Flags ^ 2 		
        ELSE Flags END)		
        where PollGroupID = @pgid
end
GO

CREATE procedure [dbo].[yaf_poll_remove](
    @PollGroupID int, @PollID int = null, @BoardID int = null, @RemoveCompletely bit)
as
begin
declare @groupcount int
    
    if @RemoveCompletely = 1 
    begin
    -- delete vote records first
    delete from [dbo].[yaf_PollVote] where PollID = @PollID
    -- delete choices 
    delete from [dbo].[yaf_Choice] where PollID = @PollID
    -- delete poll
    Update [dbo].[yaf_Poll] set PollGroupID = NULL where PollID = @PollID
    delete from [dbo].[yaf_Poll] where PollID = @PollID 	
    if  NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[yaf_Poll] where PollGroupID = @PollGroupID) 
        begin	
              
                   Update [dbo].[yaf_Topic] set PollID = NULL where PollID = @PollGroupID                 
                  
                   
                   Update [dbo].[yaf_Forum] set PollGroupID = NULL where PollGroupID = @PollGroupID
              
    
                   Update [dbo].[yaf_Category] set PollGroupID = NULL where PollGroupID = @PollGroupID                
        
              
        
       
         
        DELETE FROM  [dbo].[yaf_PollGroupCluster] WHERE PollGroupID = @PollGroupID	
        end  	
    end
    else
    begin    
    Update [dbo].[yaf_Poll] set PollGroupID = NULL where PollID = @PollID	                         
    end

end
GO

-- medals

create proc [dbo].[yaf_group_medal_delete]
    @GroupID int,
    @MedalID int
as begin
    
    delete from [dbo].[yaf_GroupMedal] where [GroupID]=@GroupID and [MedalID]=@MedalID
end
GO

CREATE proc [dbo].[yaf_group_medal_list]
    @GroupID int = null,
    @MedalID int = null
as begin
    
    select 
        a.[MedalID],
        a.[Name],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        a.[SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        a.[SmallRibbonWidth],
        a.[SmallRibbonHeight],
        b.[SortOrder],
        a.[Flags],
        c.[Name] as [GroupName],
        b.[GroupID],
        isnull(b.[Message],a.[Message]) as [Message],
        b.[Message] as [MessageEx],
        b.[Hide],
        b.[OnlyRibbon],
        b.[SortOrder] as CurrentSortOrder
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_GroupMedal] b on b.[MedalID] = a.[MedalID]
        inner join [dbo].[yaf_Group] c on  c.[GroupID] = b.[GroupID]
    where
        (@GroupID is null or b.[GroupID] = @GroupID) and
        (@MedalID is null or b.[MedalID] = @MedalID)		
    order by
        c.[Name] ASC,
        b.[SortOrder] ASC

end
GO

create proc [dbo].[yaf_group_medal_save]
   @GroupID int,
   @MedalID int,
   @Message nvarchar(100) = NULL,
   @Hide bit,
   @OnlyRibbon bit,
   @SortOrder tinyint
as begin
    
    if exists(select 1 from [dbo].[yaf_GroupMedal] where [GroupID]=@GroupID and [MedalID]=@MedalID) begin
        update [dbo].[yaf_GroupMedal]
        set
            [Message] = @Message,
            [Hide] = @Hide,
            [OnlyRibbon] = @OnlyRibbon,
            [SortOrder] = @SortOrder
        where 
            [GroupID]=@GroupID and 
            [MedalID]=@MedalID
    end
    else begin

        insert into [dbo].[yaf_GroupMedal]
            ([GroupID],[MedalID],[Message],[Hide],[OnlyRibbon],[SortOrder])
        values
            (@GroupID,@MedalID,@Message,@Hide,@OnlyRibbon,@SortOrder)
    end

end
GO

CREATE proc [dbo].[yaf_medal_delete]
    @BoardID	int = null,
    @MedalID	int = null,
    @Category	nvarchar(50) = null
as begin
    
    if not @MedalID is null begin
        delete from [dbo].[yaf_GroupMedal] where [MedalID] = @MedalID
        delete from [dbo].[yaf_UserMedal] where [MedalID] = @MedalID

        delete from [dbo].[yaf_Medal] where [MedalID]=@MedalID
    end
    else if not @Category is null and not @BoardID is null begin
        delete from [dbo].[yaf_GroupMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [Category]=@Category and [BoardID]=@BoardID)

        delete from [dbo].[yaf_UserMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [Category]=@Category and [BoardID]=@BoardID)

        delete from [dbo].[yaf_Medal] where [Category]=@Category
    end
    else if not @BoardID is null begin
        delete from [dbo].[yaf_GroupMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [BoardID]=@BoardID)

        delete from [dbo].[yaf_UserMedal] 
            where [MedalID] in (SELECT [MedalID] FROM [dbo].[yaf_Medal] where [BoardID]=@BoardID)

        delete from [dbo].[yaf_Medal] where [BoardID]=@BoardID
    end

end
GO

CREATE proc [dbo].[yaf_medal_list]
    @BoardID	int = null,
    @MedalID	int = null,
    @Category	nvarchar(50) = null
as begin
        if not @MedalID is null begin
        select 
            * 
        from 
            [dbo].[yaf_Medal] 
        where 
            [MedalID]=@MedalID 
        order by 
            [Category] asc, 
            [SortOrder] asc
    end
    else if not @Category is null and not @BoardID is null begin
        select 
            * 
        from 
            [dbo].[yaf_Medal] 
        where 
            [Category]=@Category and [BoardID]=@BoardID
        order by 
            [Category] asc, 
            [SortOrder] asc
    end
    else if not @BoardID is null begin
        select 
            * 
        from 
            [dbo].[yaf_Medal] 
        where 
            [BoardID]=@BoardID
        order by 
            [Category] asc, 
            [SortOrder] asc
    end

end
GO

CREATE proc [dbo].[yaf_medal_listusers]
    @MedalID	int
as begin
        (select 
        a.UserID, a.Name
    from 
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserMedal] b on a.[UserID] = b.[UserID]
    where
        b.[MedalID]=@MedalID) 
    
    union	

    (select 
        a.UserID, a.Name
    from 
        [dbo].[yaf_User] a
        inner join [dbo].[yaf_UserGroup] b on a.[UserID] = b.[UserID]
        inner join [dbo].[yaf_GroupMedal] c on b.[GroupID] = c.[GroupID]
    where
        c.[MedalID]=@MedalID) 


end
GO

create proc [dbo].[yaf_medal_resort]
    @BoardID int,@MedalID int,@Move int
as
begin
        declare @Position int
    declare @Category nvarchar(50)

    select 
        @Position=[SortOrder],
        @Category=[Category]
    from 
        [dbo].[yaf_Medal] 
    where 
        [BoardID]=@BoardID and [MedalID]=@MedalID

    if (@Position is null) return

    if (@Move > 0) begin
        update 
            [dbo].[yaf_Medal]
        set 
            [SortOrder]=[SortOrder]-1
        where 
            [BoardID]=@BoardID and 
            [Category]=@Category and
            [SortOrder] between @Position and (@Position + @Move) and
            [SortOrder] between 1 and 255
    end
    else if (@Move < 0) begin
        update 
            [dbo].[yaf_Medal]
        set
            [SortOrder]=[SortOrder]+1
        where 
            BoardID=@BoardID and 
            [Category]=@Category and
            [SortOrder] between (@Position+@Move) and @Position and
            [SortOrder] between 0 and 254
    end

    SET @Position = @Position + @Move

    if (@Position>255) SET @Position = 255
    else if (@Position<0) SET @Position = 0

    update [dbo].[yaf_Medal]
        set [SortOrder]=@Position
        where [BoardID]=@BoardID and 
            [MedalID]=@MedalID
end
GO

CREATE proc [dbo].[yaf_medal_save]
    @BoardID int = NULL,
    @MedalID int = NULL,
    @Name nvarchar(100),
    @Description ntext,
    @Message nvarchar(100),
    @Category nvarchar(50) = NULL,
    @MedalURL nvarchar(250),
    @RibbonURL nvarchar(250) = NULL,
    @SmallMedalURL nvarchar(250),
    @SmallRibbonURL nvarchar(250) = NULL,
    @SmallMedalWidth smallint,
    @SmallMedalHeight smallint,
    @SmallRibbonWidth smallint = NULL,
    @SmallRibbonHeight smallint = NULL,
    @SortOrder tinyint = 255,
    @Flags int = 0
as begin
        if @MedalID is null begin
        insert into [dbo].[yaf_Medal]
            ([BoardID],[Name],[Description],[Message],[Category],
            [MedalURL],[RibbonURL],[SmallMedalURL],[SmallRibbonURL],
            [SmallMedalWidth],[SmallMedalHeight],[SmallRibbonWidth],[SmallRibbonHeight],
            [SortOrder],[Flags])
        values
            (@BoardID,@Name,@Description,@Message,@Category,
            @MedalURL,@RibbonURL,@SmallMedalURL,@SmallRibbonURL,
            @SmallMedalWidth,@SmallMedalHeight,@SmallRibbonWidth,@SmallRibbonHeight,
            @SortOrder,@Flags)

        select @@rowcount
    end
    else begin
        update [dbo].[yaf_Medal]
            set [BoardID] = BoardID,
                [Name] = @Name,
                [Description] = @Description,
                [Message] = @Message,
                [Category] = @Category,
                [MedalURL] = @MedalURL,
                [RibbonURL] = @RibbonURL,
                [SmallMedalURL] = @SmallMedalURL,
                [SmallRibbonURL] = @SmallRibbonURL,
                [SmallMedalWidth] = @SmallMedalWidth,
                [SmallMedalHeight] = @SmallMedalHeight,
                [SmallRibbonWidth] = @SmallRibbonWidth,
                [SmallRibbonHeight] = @SmallRibbonHeight,
                [SortOrder] = @SortOrder,
                [Flags] = @Flags
        where [MedalID] = @MedalID

        select @@rowcount
    end

end
GO

create proc [dbo].[yaf_user_listmedals]
    @UserID	int
as begin
        (select
        a.[MedalID],
        a.[Name],
        isnull(b.[Message], a.[Message]) as [Message],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        isnull(a.[SmallRibbonURL], a.[SmallMedalURL]) as [SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        isnull(a.[SmallRibbonWidth], a.[SmallMedalWidth]) as [SmallRibbonWidth],
        isnull(a.[SmallRibbonHeight], a.[SmallMedalHeight]) as [SmallRibbonHeight],
        [dbo].[yaf_medal_getsortorder](b.[SortOrder],a.[SortOrder],a.[Flags]) as [SortOrder],
        [dbo].[yaf_medal_gethide](b.[Hide],a.[Flags]) as [Hide],
        [dbo].[yaf_medal_getribbonsetting](a.[SmallRibbonURL],a.[Flags],b.[OnlyRibbon]) as [OnlyRibbon],
        a.[Flags],
        b.[DateAwarded]
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_UserMedal] b on a.[MedalID] = b.[MedalID]
    where
        b.[UserID] = @UserID)

    union

    (select
        a.[MedalID],
        a.[Name],
        isnull(b.[Message], a.[Message]) as [Message],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        isnull(a.[SmallRibbonURL], a.[SmallMedalURL]) as [SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        isnull(a.[SmallRibbonWidth], a.[SmallMedalWidth]) as [SmallRibbonWidth],
        isnull(a.[SmallRibbonHeight], a.[SmallMedalHeight]) as [SmallRibbonHeight],
        [dbo].[yaf_medal_getsortorder](b.[SortOrder],a.[SortOrder],a.[Flags]) as [SortOrder],
        [dbo].[yaf_medal_gethide](b.[Hide],a.[Flags]) as [Hide],
        [dbo].[yaf_medal_getribbonsetting](a.[SmallRibbonURL],a.[Flags],b.[OnlyRibbon]) as [OnlyRibbon],
        a.[Flags],
        NULL as [DateAwarded]
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_GroupMedal] b on a.[MedalID] = b.[MedalID]
        inner join [dbo].[yaf_UserGroup] c on b.[GroupID] = c.[GroupID]
    where
        c.[UserID] = @UserID)
    order by
        [OnlyRibbon] desc,
        [SortOrder] asc

end
GO

create proc [dbo].[yaf_user_medal_delete]
    @UserID int,
    @MedalID int
as begin
        delete from [dbo].[yaf_UserMedal] where [UserID]=@UserID and [MedalID]=@MedalID

end
GO

create proc [dbo].[yaf_user_medal_list]
    @UserID int = null,
    @MedalID int = null
as begin
        select 
        a.[MedalID],
        a.[Name],
        a.[MedalURL],
        a.[RibbonURL],
        a.[SmallMedalURL],
        a.[SmallRibbonURL],
        a.[SmallMedalWidth],
        a.[SmallMedalHeight],
        a.[SmallRibbonWidth],
        a.[SmallRibbonHeight],
        b.[SortOrder],
        a.[Flags],
        c.[Name] as [UserName],
        c.[DisplayName] as [DisplayName],
        b.[UserID],
        isnull(b.[Message],a.[Message]) as [Message],
        b.[Message] as [MessageEx],
        b.[Hide],
        b.[OnlyRibbon],
        b.[SortOrder] as [CurrentSortOrder],
        b.[DateAwarded]
    from
        [dbo].[yaf_Medal] a
        inner join [dbo].[yaf_UserMedal] b on b.[MedalID] = a.[MedalID]
        inner join [dbo].[yaf_User] c on c.[UserID] = b.[UserID]
    where
        (@UserID is null or b.[UserID] = @UserID) and
        (@MedalID is null or b.[MedalID] = @MedalID)		
    order by
        c.[Name] ASC,
        b.[SortOrder] ASC

end
GO

create proc [dbo].[yaf_user_medal_save]
    @UserID int,
    @MedalID int,
    @Message nvarchar(100) = NULL,
    @Hide bit,
    @OnlyRibbon bit,
    @SortOrder tinyint,
    @DateAwarded datetime = NULL,
    @UTCTIMESTAMP datetime
as begin
        if exists(select 1 from [dbo].[yaf_UserMedal] where [UserID]=@UserID and [MedalID]=@MedalID) begin
        update [dbo].[yaf_UserMedal]
        set
            [Message] = @Message,
            [Hide] = @Hide,
            [OnlyRibbon] = @OnlyRibbon,
            [SortOrder] = @SortOrder
        where 
            [UserID]=@UserID and 
            [MedalID]=@MedalID
    end
    else begin

        if (@DateAwarded is null) set @DateAwarded = @UTCTIMESTAMP  

        insert into [dbo].[yaf_UserMedal]
            ([UserID],[MedalID],[Message],[Hide],[OnlyRibbon],[SortOrder],[DateAwarded])
        values
            (@UserID,@MedalID,@Message,@Hide,@OnlyRibbon,@SortOrder,@DateAwarded)
    end

end
GO

/* User Ignore Procedures */

CREATE PROCEDURE [dbo].[yaf_user_addignoreduser]
    @UserID int,
    @IgnoredUserId int
AS BEGIN
        IF NOT EXISTS (SELECT * FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID AND IgnoredUserID = @IgnoredUserId)
    BEGIN
        INSERT INTO [dbo].[yaf_IgnoreUser] (UserID, IgnoredUserID) VALUES (@UserID, @IgnoredUserId)
    END
END
GO

CREATE PROCEDURE [dbo].[yaf_user_removeignoreduser]
    @UserID int,
    @IgnoredUserId int
AS BEGIN
        DELETE FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID AND IgnoredUserID = @IgnoredUserId
    
END
GO

CREATE PROCEDURE [dbo].[yaf_user_isuserignored]
    @UserID int,
    @IgnoredUserId int
AS BEGIN
        IF EXISTS(SELECT * FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID AND IgnoredUserID = @IgnoredUserId)
    BEGIN
        RETURN 1
    END
    ELSE
    BEGIN
        RETURN 0
    END
    
END	
GO

CREATE PROCEDURE [dbo].[yaf_user_ignoredlist]
    @UserID int
AS
BEGIN
        SELECT * FROM [dbo].[yaf_IgnoreUser] WHERE UserID = @UserID
END	
GO

/*****************************************************************************************************
//  Original code by: DLESKTECH at http://www.dlesktech.com/support.aspx
//  Modifications by: KASL Technologies at www.kasltechnologies.com
//  Modifications for integration into YAF/Conventions by Jaben Cargman
*****************************************************************************************************/

CREATE PROCEDURE [dbo].[yaf_shoutbox_getmessages]
(
  @BoardId int,
  @NumberOfMessages int, @StyledNicks bit = 0
)  
AS
BEGIN

    SELECT TOP(@NumberOfMessages)
        sh.[ShoutBoxMessageID],
        sh.UserName,
        sh.UserID,
        sh.[Message],
        sh.[Date], 
        Style= case(@StyledNicks)
            when 1 then  usr.UserStyle
            else ''	 end
                
    FROM
        [dbo].[yaf_ShoutboxMessage] sh
        JOIN [dbo].[yaf_User] usr on usr.UserID = sh.UserID
    WHERE 
        sh.BoardId = @BoardId
    ORDER BY sh.Date DESC
END
GO

CREATE PROCEDURE [dbo].[yaf_shoutbox_savemessage](
    @UserName		nvarchar(255)=null,
    @BoardId		int,
    @UserID			int,
    @Message		ntext,
    @Date			datetime=null,
    @IP				varchar(39),
    @UTCTIMESTAMP datetime
)
AS
BEGIN
DECLARE @OverrideDisplayName BIT, @ReplaceName nvarchar(255)
        IF @Date IS NULL
        SET @Date = @UTCTIMESTAMP 
        -- this check is for guest user only to not override replace name 
if (SELECT Name FROM [dbo].[yaf_User] WHERE UserID = @UserID) != @UserName
    begin
    SET @OverrideDisplayName = 1
    end	
    SET @ReplaceName = (CASE WHEN @OverrideDisplayName = 1 THEN @UserName ELSE (SELECT DisplayName FROM [dbo].[yaf_User] WHERE UserID = @UserID) END);
    INSERT [dbo].[yaf_ShoutboxMessage] (UserName,UserDisplayName,BoardId, UserID, Message, Date, IP)
    VALUES (@UserName,@ReplaceName, @BoardId, @UserID, @Message, @Date, @IP)
END
GO

CREATE PROCEDURE [dbo].[yaf_shoutbox_clearmessages]
(
    @BoardId int,
    @UTCTIMESTAMP datetime
)
AS
BEGIN
        DELETE FROM
            [dbo].[yaf_ShoutboxMessage]
        WHERE
            BoardId = @BoardId AND
            DATEDIFF(minute, Date, @UTCTIMESTAMP ) > 1
END
GO

/* Stored procedures for Buddy feature */

CREATE PROCEDURE [dbo].[yaf_buddy_addrequest]
    @FromUserID INT,
    @ToUserID INT,
    @UTCTIMESTAMP datetime,
    @approved BIT = NULL OUT,
	@UseDisplayName BIT,	
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        IF NOT EXISTS ( SELECT  ID
                        FROM    [dbo].[yaf_Buddy]
                        WHERE   ( FromUserID = @FromUserID
                                  AND ToUserID = @ToUserID
                                ) ) 
            BEGIN
                IF ( NOT EXISTS ( SELECT    ID
                                  FROM      [dbo].[yaf_Buddy]
                                  WHERE     ( FromUserID = @ToUserID
                                              AND ToUserID = @FromUserID
                                            ) )
                   ) 
                    BEGIN
                        INSERT  INTO [dbo].[yaf_Buddy]
                                (
                                  FromUserID,
                                 ToUserID,
                                  Approved,
                                  Requested
                                )
                        VALUES  (
                                  @FromUserID,
                                  @ToUserID,
                                  0,
                                  @UTCTIMESTAMP 
                                )
                        SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @ToUserID )
                           )
                        SET @approved = 0
                    END
                ELSE 
                    BEGIN
                        INSERT  INTO [dbo].[yaf_Buddy]
                                (
                                  FromUserID,
                                  ToUserID,
                                  Approved,
                                  Requested
                                )
                        VALUES  (
                                  @FromUserID,
                                  @ToUserID,
                                  1,
                                  @UTCTIMESTAMP 
                                )
                        UPDATE  [dbo].[yaf_Buddy]
                        SET     Approved = 1
                        WHERE   ( FromUserID = @ToUserID
                                  AND ToUserID = @FromUserID
                                )
                        SET @paramOutput = ( SELECT [Name]
                                             FROM   [dbo].[yaf_User]
                                             WHERE  ( UserID = @ToUserID )
                                           )
                        SET @approved = 1
                    END
            END	
        ELSE 
            BEGIN
                SET @paramOutput = ''
                SET @approved = 0
            END
    END
GO

CREATE PROCEDURE [dbo].[yaf_buddy_approverequest]
    @FromUserID INT,
    @ToUserID INT,
    @Mutual BIT,
    @UTCTIMESTAMP datetime,
	@UseDisplayName BIT,
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        IF EXISTS ( SELECT  ID
                    FROM    [dbo].[yaf_Buddy]
                    WHERE   ( FromUserID = @FromUserID
                              AND ToUserID = @ToUserID
                            ) ) 
            BEGIN
                UPDATE  [dbo].[yaf_Buddy]
                SET     Approved = 1
                WHERE   ( FromUserID = @FromUserID
                          AND ToUserID = @ToUserID
                        )
                SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @FromUserID )
                           )
                IF ( @Mutual = 1 )
                    AND ( NOT EXISTS ( SELECT   ID
                                       FROM     [dbo].[yaf_Buddy]
                                       WHERE    FromUserID = @ToUserID
                                                AND ToUserID = @FromUserID )
                        ) 
                    INSERT  INTO [dbo].[yaf_Buddy]
                            (
                              FromUserID,
                              ToUserID,
                              Approved,
                              Requested
                            )
                    VALUES  (
                              @ToUserID,
                              @FromUserID,
                              1,
                              @UTCTIMESTAMP 
                            )
            END
    END
GO

    CREATE PROCEDURE [dbo].[yaf_buddy_list] @FromUserID INT
AS 
    BEGIN
        SELECT  a.UserID,
                a.BoardID,
                a.[Name],
                a.Joined,
                a.NumPosts,
                RankName = b.Name,
                c.Approved,
                c.FromUserID,
                c.Requested
        FROM   [dbo].[yaf_User] a
                JOIN [dbo].[yaf_Rank] b ON b.RankID = a.RankID
                JOIN [dbo].[yaf_Buddy] c ON ( c.ToUserID = a.UserID
                                              AND c.FromUserID = @FromUserID
                                            )
        UNION
        SELECT  @FromUserID AS UserID,
                a.BoardID,
                a.[Name],
                a.Joined,
                a.NumPosts,
                RankName = b.Name,
                c.Approved,
                c.FromUserID,
                c.Requested
        FROM    [dbo].[yaf_User] a
                JOIN [dbo].[yaf_Rank] b ON b.RankID = a.RankID
                JOIN [dbo].[yaf_Buddy] c ON ( ( c.Approved = 0 )
                                              AND ( c.ToUserID = @FromUserID )
                                              AND ( a.UserID = c.FromUserID )
                                            )
        ORDER BY a.Name
    END
    GO

    CREATE PROCEDURE [dbo].[yaf_buddy_remove]
    @FromUserID INT,
    @ToUserID INT,
	@UseDisplayName BIT,
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        DELETE  FROM [dbo].[yaf_Buddy]
        WHERE   ( FromUserID = @FromUserID
                  AND ToUserID = @ToUserID
                )
        SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @ToUserID )
                           )
    END
    GO
CREATE PROCEDURE [dbo].[yaf_buddy_denyrequest]
    @FromUserID INT,
    @ToUserID INT,
	@UseDisplayName BIT,
    @paramOutput NVARCHAR(255) = NULL OUT
AS 
    BEGIN
        DELETE  FROM [dbo].[yaf_Buddy]
        WHERE   FromUserID = @FromUserID
                AND ToUserID = @ToUserID
        SET @paramOutput = ( SELECT (CASE WHEN @UseDisplayName = 1 THEN [DisplayName] ELSE [Name] END) 
		                     FROM [dbo].[yaf_User]
							 WHERE ( UserID = @FromUserID 
							)
)
    END
Go    
/* End of stored procedures for Buddy feature */

CREATE PROCEDURE [dbo].[yaf_topic_favorite_add] 
    @UserID int,
    @TopicID int
AS
BEGIN
    IF NOT EXISTS (SELECT ID FROM [dbo].[yaf_FavoriteTopic] WHERE (UserID = @UserID AND TopicID=@TopicID))
    BEGIN
        INSERT INTO [dbo].[yaf_FavoriteTopic] (UserID, TopicID) Values 
                                (@UserID, @TopicID)
    END
END
Go

CREATE PROCEDURE [dbo].[yaf_topic_favorite_remove] 
    @UserID int,
    @TopicID int
AS
BEGIN
    DELETE FROM [dbo].[yaf_FavoriteTopic] WHERE UserID=@UserID AND TopicID=@TopicID
END
GO

CREATE PROCEDURE [dbo].[yaf_topic_favorite_list](@UserID int) as
BEGIN
SELECT TopicID FROM [dbo].[yaf_FavoriteTopic] WHERE UserID=@UserID
END
GO

CREATE PROCEDURE [dbo].[yaf_topic_favorite_count](@TopicID int) as
BEGIN
    SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = @TopicID
END
GO

CREATE procedure [dbo].[yaf_topic_favorite_details]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
   declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int

   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
        JOIN [dbo].[yaf_FavoriteTopic] z ON z.TopicID=c.TopicID AND z.UserID=@PageUserID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
        JOIN [dbo].[yaf_FavoriteTopic] z ON z.TopicID=c.TopicID AND z.UserID=@PageUserID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
      )	  
      select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicId = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,          
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID     
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC   
end
GO

CREATE procedure [dbo].[yaf_album_save]
    (
      @AlbumID INT = NULL,
      @UserID INT = null,
      @Title NVARCHAR(255) = NULL,
      @CoverImageID INT = NULL,
      @UTCTIMESTAMP datetime
    )
as 
    BEGIN
        -- Update Cover?
        IF ( @CoverImageID IS NOT NULL
             AND @CoverImageID <> 0
           ) 
            UPDATE  [dbo].[yaf_UserAlbum]
            SET     CoverImageID = @CoverImageID
            WHERE   AlbumID = @AlbumID
        ELSE 
            --Remove Cover?
            IF ( @CoverImageID = 0 ) 
                UPDATE  [dbo].[yaf_UserAlbum]
                SET     CoverImageID = NULL
                WHERE   AlbumID = @AlbumID            
            ELSE 
            -- Update Title?
                IF @AlbumID is not null 
                    UPDATE  [dbo].[yaf_UserAlbum]
                    SET     Title = @Title
                    WHERE   AlbumID = @AlbumID
                ELSE 
                    BEGIN
                    -- New album. insert into table.
                        INSERT  INTO [dbo].[yaf_UserAlbum]
                                (
                                  UserID,
                                  Title,
                                  CoverImageID,
                                  Updated
                                )
                        VALUES  (
                                  @UserID,
                                  @Title,
                                  @CoverImageID,
                                  @UTCTIMESTAMP 
                                )
                        RETURN SCOPE_IDENTITY()
                    END
    END
    GO
    
CREATE procedure [dbo].[yaf_album_list]
    (
      @UserID INT = NULL,
      @AlbumID INT = NULL
    )
as 
    BEGIN
        IF @UserID IS NOT null 
            select  *
            FROM    [dbo].[yaf_UserAlbum]
            WHERE   UserID = @UserID
            ORDER BY Updated DESC
        ELSE 
            SELECT  *
            FROM    [dbo].[yaf_UserAlbum]
            WHERE   AlbumID = @AlbumID
    END
    GO
    
CREATE procedure [dbo].[yaf_album_delete] ( @AlbumID int )
as 
    BEGIN
        DELETE  FROM [dbo].[yaf_UserAlbumImage]
        WHERE   AlbumID = @AlbumID
        DELETE  FROM [dbo].[yaf_UserAlbum]
        WHERE   AlbumID = @AlbumID       
    END
    GO
    
CREATE PROCEDURE [dbo].[yaf_album_gettitle]
    (
      @AlbumID INT,
      @paramOutput NVARCHAR(255) = NULL OUT
    )
as 
    BEGIN
        SET @paramOutput = ( SELECT [Title]
                             FROM   [dbo].[yaf_UserAlbum]
                             WHERE  ( AlbumID = @AlbumID )
                           )
    END
    GO
    
CREATE PROCEDURE [dbo].[yaf_album_getstats]
    @UserID INT = NULL,
    @AlbumID INT = NULL,
    @AlbumNumber INT = NULL OUTPUT,
    @ImageNumber BIGINT = NULL OUTPUT
as 
    BEGIN
        IF @AlbumID IS NOT NULL 
            SET @ImageNumber = ( SELECT COUNT(ImageID)
                                 FROM   [dbo].[yaf_UserAlbumImage]
                                 WHERE  AlbumID = @AlbumID
                               )
        ELSE 
            BEGIN
                SET @AlbumNumber = ( SELECT COUNT(AlbumID)
                                     FROM   [dbo].[yaf_UserAlbum]
                                     WHERE  UserID = @UserID
                                   )
                SET @ImageNumber = ( SELECT COUNT(ImageID)
                                     FROM   [dbo].[yaf_UserAlbumImage]
                                     WHERE  AlbumID in (
                                            SELECT  AlbumID
                                            FROM    [dbo].[yaf_UserAlbum]
                                            WHERE   UserID = @UserID )
                                   )
            END
    END
    GO
    
CREATE PROCEDURE [dbo].[yaf_album_image_save]
    (
      @ImageID INT = NULL,
      @AlbumID INT = null,
      @Caption NVARCHAR(255) = null,
      @FileName NVARCHAR(255) = null,
      @Bytes INT = null,
      @ContentType NVARCHAR(50) = null,
      @UTCTIMESTAMP datetime
    )
as 
    BEGIN
        IF @ImageID is not null 
            UPDATE  [dbo].[yaf_UserAlbumImage]
            SET     Caption = @Caption
            WHERE   ImageID = @ImageID
        ELSE
            INSERT  INTO [dbo].[yaf_UserAlbumImage]
                    (
                      AlbumID,
                      Caption,
                      [FileName],
                      Bytes,
                      ContentType,
                      Uploaded,
                      Downloads
                    )
            VALUES  (
                      @AlbumID,
                      @Caption,
                      @FileName,
                      @Bytes,
                      @ContentType,
                      @UTCTIMESTAMP ,
                      0
                    )
    END        
    GO
    
CREATE procedure [dbo].[yaf_album_image_list]
    (
      @AlbumID INT = NULL,
      @ImageID INT = null
    )
as 
    BEGIN
        IF @AlbumID IS NOT null 
            SELECT  *
            FROM    [dbo].[yaf_UserAlbumImage]
            WHERE   AlbumID = @AlbumID
            ORDER BY Uploaded DESC
        ELSE 
            SELECT  a.*,
                    b.UserID
            FROM    [dbo].[yaf_UserAlbumImage] a
                    INNER JOIN [dbo].[yaf_UserAlbum] b ON b.AlbumID = a.AlbumID
            WHERE   ImageID = @ImageID
    END
    GO

CREATE procedure [dbo].[yaf_album_images_by_user](@UserID INT = null)
as 
    BEGIN
        SELECT      a.*
        FROM    [dbo].[yaf_UserAlbumImage] a
                    INNER JOIN [dbo].[yaf_UserAlbum] b ON b.AlbumID = a.AlbumID
        WHERE  b.UserID = @UserID
    END
    GO

CREATE PROCEDURE [dbo].[yaf_album_image_delete] ( @ImageID INT )
as 
    BEGIN
        DELETE  FROM [dbo].[yaf_UserAlbumImage]
        WHERE   ImageID = @ImageID
        UPDATE  [dbo].[yaf_UserAlbum]
        SET     CoverImageID = NULL
        WHERE   CoverImageID = @ImageID
        UPDATE  [dbo].[yaf_UserAlbum]
        SET     CoverImageID = NULL
        WHERE   CoverImageID = @ImageID
    END
    GO
    
CREATE PROCEDURE [dbo].[yaf_album_image_download] ( @ImageID INT )
as 
    BEGIN
        UPDATE  [dbo].[yaf_UserAlbumImage]
        SET     Downloads = Downloads + 1
        WHERE   ImageID = @ImageID
    END
    GO
    
CREATE PROCEDURE [dbo].[yaf_user_getsignaturedata] (@BoardID INT, @UserID INT)
as 
    BEGIN

    

DECLARE   @GroupData TABLE
(
    G_UsrSigChars int,
    G_UsrSigBBCodes nvarchar(4000),
    G_UsrSigHTMLTags nvarchar(4000)
)
   
   declare @ust int, @usbbc nvarchar(4000), 
    @ushtmlt nvarchar(4000), @rust int, @rusbbc nvarchar(4000),  
    @rushtmlt nvarchar(4000) 
          
      declare c cursor for
      SELECT ISNULL(c.UsrSigChars,0), ISNULL(c.UsrSigBBCodes,''), ISNULL(c.UsrSigHTMLTags,'')
      FROM [dbo].[yaf_User] a 
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID 
                              WHERE a.UserID = @UserID AND c.BoardID = @BoardID ORDER BY c.SortOrder ASC
        
        -- first check ranks
        SELECT TOP 1 @rust = ISNULL(c.UsrSigChars,0), @rusbbc = c.UsrSigBBCodes, 
        @rushtmlt = c.UsrSigHTMLTags
        FROM [dbo].[yaf_Rank] c 
                                JOIN [dbo].[yaf_User] d
                                  ON c.RankID = d.RankID
                                   WHERE d.UserID = @UserID AND c.BoardID = @BoardID 
                                   ORDER BY c.RankID DESC        
        open c
       
        fetch next from c into  @ust, @usbbc , @ushtmlt
        while @@FETCH_STATUS = 0
        begin
        if not exists (select top 1 1 from @GroupData)
        begin	

        -- insert first row and compare with ranks data
    INSERT INTO @GroupData(G_UsrSigChars,G_UsrSigBBCodes,G_UsrSigHTMLTags) 
        select (CASE WHEN @rust > ISNULL(@ust,0) THEN @rust ELSE ISNULL(@ust,0) END), 
        (COALESCE(@rusbbc + ',','') + COALESCE(@usbbc,'')) ,(COALESCE(@rushtmlt + ',','') + COALESCE(@ushtmlt, '') ) 	  
        end
        else
        begin
        update @GroupData set 
        G_UsrSigChars = (CASE WHEN G_UsrSigChars > COALESCE(@ust, 0) THEN G_UsrSigChars ELSE COALESCE(@ust, 0) END), 
        G_UsrSigBBCodes = COALESCE(@usbbc + ',','') + G_UsrSigBBCodes, 
        G_UsrSigHTMLTags = COALESCE(@ushtmlt + ',', '') + G_UsrSigHTMLTags
        end 

        fetch next from c into   @ust, @usbbc , @ushtmlt
        
        end

       close c
       deallocate c 	
                 
       
        SELECT 
        UsrSigChars = G_UsrSigChars, 
        UsrSigBBCodes = G_UsrSigBBCodes, 
        UsrSigHTMLTags = G_UsrSigHTMLTags
        FROM @GroupData 

   END
GO      
    
CREATE PROCEDURE [dbo].[yaf_user_getalbumsdata] (@BoardID INT, @UserID INT )
as 
    BEGIN
    DECLARE 
    @OR_UsrAlbums int,     
    @OG_UsrAlbums int,
    @OR_UsrAlbumImages int,     
    @OG_UsrAlbumImages int
     -- Ugly but bullet proof - it used very rarely   
    DECLARE  @GroupData TABLE
(
    G_UsrAlbums int,
    G_UsrAlbumImages int
)
    DECLARE
   @RankData TABLE
(
    R_UsrAlbums int,
    R_UsrAlbumImages int
)

      -- REMOVED ORDER BY c.SortOrder ASC, SELECTING ALL
     
    INSERT INTO @GroupData(G_UsrAlbums,
    G_UsrAlbumImages)
    SELECT  ISNULL(c.UsrAlbums,0), ISNULL(c.UsrAlbumImages,0)   
    FROM [dbo].[yaf_User] a
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID
                              WHERE a.UserID = @UserID AND a.BoardID = @BoardID
     
                             
     INSERT INTO @RankData(R_UsrAlbums, R_UsrAlbumImages)
     SELECT  ISNULL(c.UsrAlbums,0), ISNULL(c.UsrAlbumImages,0)   
     FROM [dbo].[yaf_Rank] c
                                JOIN [dbo].[yaf_User] d
                                  ON c.RankID = d.RankID WHERE d.UserID = @UserID 
                                  AND d.BoardID = @BoardID
       
       -- SELECTING MAX()
       
       SET @OR_UsrAlbums = (SELECT Max(R_UsrAlbums) FROM @RankData)
       SET @OG_UsrAlbums = (SELECT Max(G_UsrAlbums) FROM @GroupData)
       SET @OR_UsrAlbumImages = (SELECT Max(R_UsrAlbumImages) FROM @RankData)
       SET @OG_UsrAlbumImages = (SELECT Max(G_UsrAlbumImages) FROM @GroupData)
       
       SELECT
        NumAlbums  = (SELECT COUNT(ua.AlbumID) FROM [dbo].[yaf_UserAlbum] ua
                      WHERE ua.UserID = @UserID),
        NumImages = (SELECT COUNT(uai.ImageID) FROM  [dbo].[yaf_UserAlbumImage] uai
                     INNER JOIN [dbo].[yaf_UserAlbum] ua
                     ON ua.AlbumID = uai.AlbumID
                     WHERE ua.UserID = @UserID),
        UsrAlbums = CASE WHEN @OG_UsrAlbums > @OR_UsrAlbums THEN @OG_UsrAlbums ELSE @OR_UsrAlbums END,
        UsrAlbumImages = CASE WHEN @OG_UsrAlbumImages > @OR_UsrAlbumImages THEN @OG_UsrAlbumImages ELSE @OR_UsrAlbumImages END
             
     
END
GO  

CREATE PROCEDURE [dbo].[yaf_messagehistory_list] (@MessageID INT, @DaysToClean INT,
      @UTCTIMESTAMP datetime)
as 
    BEGIN             
     -- delete all message variants older then DaysToClean days Flags reserved for possible pms   
     delete from [dbo].[yaf_MessageHistory]
     where DATEDIFF(day,Edited,@UTCTIMESTAMP ) > @DaysToClean	
              
     SELECT mh.*, m.UserID, m.UserName, IsNull(m.UserDisplayName,(SELECT u.DisplayName FROM [dbo].[yaf_User] u where u.UserID = m.UserID)) AS UserDisplayName, t.ForumID, t.TopicID, t.Topic, m.Posted
     FROM [dbo].[yaf_MessageHistory] mh
     LEFT JOIN [dbo].[yaf_Message] m ON m.MessageID = mh.MessageID
     LEFT JOIN [dbo].[yaf_Topic] t ON t.TopicID = m.TopicID
     LEFT JOIN [dbo].[yaf_User] u ON u.UserID = t.UserID
     WHERE mh.MessageID = @MessageID
     order by mh.Edited, mh.MessageID
    END
GO

CREATE procedure [dbo].[yaf_user_lazydata](
    @UserID	int,
    @BoardID int,
    @ShowPendingMails bit = 0,
    @ShowPendingBuddies bit = 0,
    @ShowUnreadPMs bit = 0,
    @ShowUserAlbums bit = 0,
    @ShowUserStyle bit = 0
    
) as
begin 
    declare 
    @G_UsrAlbums int,
    @R_UsrAlbums int,
    @R_Style varchar(255),
    @G_Style varchar(255) 	
    
        
    IF (@ShowUserAlbums > 0)
    BEGIN	
    SELECT @G_UsrAlbums = ISNULL(MAX(c.UsrAlbums),0)
    FROM [dbo].[yaf_User] a 
                        JOIN [dbo].[yaf_UserGroup] b
                          ON a.UserID = b.UserID
                            JOIN [dbo].[yaf_Group] c                         
                              ON b.GroupID = c.GroupID 
                               WHERE a.UserID = @UserID 
                                 AND a.BoardID = @BoardID
                                 
    SELECT  @R_UsrAlbums = ISNULL(MAX(c.UsrAlbums),0)
    FROM [dbo].[yaf_Rank] c 
                                JOIN [dbo].[yaf_User] d
                                  ON c.RankID = d.RankID WHERE d.UserID = @UserID 
                                    AND d.BoardID = @BoardID 
    END 	
    ELSE	
    BEGIN
    SET @G_UsrAlbums = 0
    SET @R_UsrAlbums = 0
    END
    
                                                                 

    -- return information
    select TOP 1		
        a.ProviderUserKey,
        UserFlags			= a.Flags,
        UserName			= a.Name,
        DisplayName			= a.DisplayName,
        Suspended			= a.Suspended,
		SuspendedReason     = a.SuspendedReason,
        ThemeFile			= a.ThemeFile,
        LanguageFile		= a.LanguageFile,
        TextEditor		    = a.TextEditor,
        TimeZoneUser		= a.TimeZone,
        CultureUser		    = a.Culture,		
        IsGuest				= SIGN(a.IsGuest),
        IsDirty				= SIGN(a.IsDirty),
        IsFacebookUser      = a.IsFacebookUser,
        IsTwitterUser       = a.IsTwitterUser,
        MailsPending		= CASE WHEN @ShowPendingMails > 0 THEN (select count(1) from [dbo].[yaf_Mail] WHERE [ToUserName] = a.Name) ELSE 0 END,
        UnreadPrivate		= CASE WHEN @ShowUnreadPMs > 0 THEN (select count(1) from [dbo].[yaf_UserPMessage] where UserID=@UserID and IsRead=0 and IsDeleted = 0 and IsArchived = 0) ELSE 0 END,
        LastUnreadPm		= CASE WHEN @ShowUnreadPMs > 0 THEN (SELECT TOP 1 Created FROM [dbo].[yaf_PMessage] pm INNER JOIN [dbo].[yaf_UserPMessage] upm ON pm.PMessageID = upm.PMessageID WHERE upm.UserID=@UserID and upm.IsRead=0  and upm.IsDeleted = 0 and upm.IsArchived = 0 ORDER BY pm.Created DESC) ELSE NULL END,		
        PendingBuddies      = CASE WHEN @ShowPendingBuddies > 0 THEN (SELECT COUNT(ID) FROM [dbo].[yaf_Buddy] WHERE ToUserID = @UserID AND Approved = 0) ELSE 0 END,
        LastPendingBuddies	= CASE WHEN @ShowPendingBuddies > 0 THEN (SELECT TOP 1 Requested FROM [dbo].[yaf_Buddy] WHERE ToUserID=@UserID and Approved = 0 ORDER BY Requested DESC) ELSE NULL END,
        UserStyle 		    = CASE WHEN @ShowUserStyle > 0 THEN (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = @UserID) ELSE '' END,			
        NumAlbums  = (SELECT COUNT(1) FROM [dbo].[yaf_UserAlbum] ua
        WHERE ua.UserID = @UserID),
        UsrAlbums  = (CASE WHEN @G_UsrAlbums > @R_UsrAlbums THEN @G_UsrAlbums ELSE @R_UsrAlbums END),
        UserHasBuddies  = SIGN(ISNULL((SELECT TOP 1 1 FROM [dbo].[yaf_Buddy] WHERE [FromUserID] = @UserID OR [ToUserID] = @UserID),0)),
        -- Guest can't vote in polls attached to boards, we need some temporary access check by a criteria 
        BoardVoteAccess	= (CASE WHEN a.Flags & 4 > 0 THEN 0 ELSE 1 END),
        Reputation         = a.Points
        from
           [dbo].[yaf_User] a		
        where
        a.UserID = @UserID
     end
GO

CREATE PROCEDURE [dbo].[yaf_message_GetTextByIds] (@MessageIDs varchar(max))
AS 
    BEGIN
    -- vzrus says: the server version > 2000 ntext works too slowly with substring in the 2005 
    DECLARE @ParsedMessageIDs TABLE
          (
                MessageID int
          )
      
    DECLARE @MessageID varchar(11), @Pos INT      

    SET @Pos = CHARINDEX(',', @MessageIDs, 1)

    -- check here if the value is not empty
    IF REPLACE(@MessageIDs, ',', '') <> ''
    BEGIN
        WHILE @Pos > 0
        BEGIN
            SET @MessageID = LTRIM(RTRIM(LEFT(@MessageIDs, @Pos - 1)))
            IF @MessageID <> ''
            BEGIN
                  INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageID AS int)) --Use Appropriate conversion
            END
            SET @MessageIDs = RIGHT(@MessageIDs, LEN(@MessageIDs) - @Pos)
            SET @Pos = CHARINDEX(',', @MessageIDs, 1)
        END
        -- to be sure that last value is inserted
        IF (LEN(@MessageIDs) > 0)
               INSERT INTO @ParsedMessageIDs (MessageID) VALUES (CAST(@MessageIDs AS int)) 
        END 

        SELECT a.MessageID, d.Message
            FROM @ParsedMessageIDs a
            INNER JOIN [dbo].[yaf_Message] d ON (d.MessageID = a.MessageID)
    END
GO

CREATE procedure [dbo].[yaf_user_thankfromcount]
(@UserID int) as
begin
        SELECT COUNT(TH.ThanksID) 
        FROM [dbo].[yaf_Thanks] AS TH WHERE (TH.ThanksToUserID=@UserID)
end
GO

CREATE procedure [dbo].[yaf_user_repliedtopic]
(@MessageID int, @UserID int) as
begin
        DECLARE @TopicID int
        SET @TopicID = (SELECT TopicID FROM [dbo].[yaf_Message] WHERE (MessageID = @MessageID))

        SELECT COUNT(t.MessageID)
        FROM [dbo].[yaf_Message] AS t WHERE (t.TopicID=@TopicID) AND (t.UserID = @UserID)
        
end
GO

CREATE procedure [dbo].[yaf_user_thankedmessage]
(@MessageID int, @UserID int) as
begin
        SELECT COUNT(TH.ThanksID)
        FROM [dbo].[yaf_Thanks] AS TH WHERE (TH.MessageID=@MessageID) AND (TH.ThanksFromUserID = @UserID)
end
GO

CREATE PROCEDURE [dbo].[yaf_recent_users](@BoardID int,@TimeSinceLastLogin int,@StyledNicks bit=0) as
begin  
    SELECT U.UserID,
    UserName = U.Name,
    UserDisplayName = U.DisplayName,
    IsCrawler = 0,
    UserCount = 1,
    IsHidden = (IsActiveExcluded),
    Style = CASE(@StyledNicks)
                WHEN 1 THEN U.UserStyle
                ELSE ''
            END,
    U.LastVisit
    FROM [dbo].[yaf_User] AS U
                JOIN [dbo].[yaf_Rank] R on R.RankID=U.RankID
    WHERE (U.IsApproved = '1') AND
     U.BoardID = @BoardID AND
     (DATEADD(mi, 0 - @TimeSinceLastLogin, GETDATE()) < U.LastVisit) AND
                --Excluding guests
                NOT EXISTS(             
                    SELECT 1 
                        FROM [dbo].[yaf_UserGroup] x
                            inner join [dbo].[yaf_Group] y ON y.GroupID=x.GroupID 
                        WHERE x.UserID=U.UserID and (y.Flags & 2)<>0
                    )
    ORDER BY U.LastVisit
end
GO

create procedure [dbo].[yaf_readtopic_addorupdate](@UserID int,@TopicID int,
      @UTCTIMESTAMP datetime) as
begin

    declare	@LastAccessDate	datetime
    set @LastAccessDate = (select top 1 LastAccessDate from [dbo].[yaf_TopicReadTracking] where UserID=@UserID AND TopicID=@TopicID)
    IF @LastAccessDate is not null
    begin	     
          update [dbo].[yaf_TopicReadTracking] set LastAccessDate=@UTCTIMESTAMP where LastAccessDate = @LastAccessDate AND UserID=@UserID AND TopicID=@TopicID
    end
    ELSE
      begin
          insert into [dbo].[yaf_TopicReadTracking](UserID,TopicID,LastAccessDate)
          values (@UserID, @TopicID, @UTCTIMESTAMP)
      end
end
GO

create procedure [dbo].[yaf_readtopic_delete](@UserID int) as
begin
        delete from [dbo].[yaf_TopicReadTracking] where UserID = @UserID
end
GO

create procedure [dbo].[yaf_readtopic_lastread](@UserID int,@TopicID int) as
begin
        SELECT LastAccessDate FROM  [dbo].[yaf_TopicReadTracking] WHERE UserID = @UserID AND TopicID = @TopicID
end
GO

CREATE PROCEDURE [dbo].[yaf_readforum_addorupdate] (
    @UserID INT
    ,@ForumID INT,
      @UTCTIMESTAMP datetime
    )
AS
BEGIN
    DECLARE @LastAccessDate DATETIME

    IF EXISTS (
            SELECT 1
            FROM [dbo].[yaf_ForumReadTracking]
            WHERE UserID = @UserID
                AND ForumID = @ForumID
            )
    BEGIN
        SET @LastAccessDate = (
                SELECT LastAccessDate
                FROM [dbo].[yaf_ForumReadTracking]
                WHERE (
                        UserID = @UserID
                        AND ForumID = @ForumID
                        )
                )

        UPDATE [dbo].[yaf_ForumReadTracking]
        SET LastAccessDate = @UTCTIMESTAMP
        WHERE LastAccessDate = @LastAccessDate
            AND UserID = @UserID
            AND ForumID = @ForumID
    END
    ELSE
    BEGIN
        INSERT INTO [dbo].[yaf_ForumReadTracking] (
            UserID
            ,ForumID
            ,LastAccessDate
            )
        VALUES (
            @UserID
            ,@ForumID
            ,@UTCTIMESTAMP
            )
    END

    -- Delete TopicReadTracking for forum...
    DELETE
    FROM [dbo].[yaf_TopicReadTracking]
    WHERE UserID = @UserID
        AND TopicID IN (
            SELECT TopicID
            FROM [dbo].[yaf_Topic]
            WHERE ForumID = @ForumID
            )
END
GO

create procedure [dbo].[yaf_readforum_delete](@UserID int) as
begin
        delete from [dbo].[yaf_ForumReadTracking] where UserID = @UserID
end
GO

create procedure [dbo].[yaf_readforum_lastread](@UserID int,@ForumID int) as
begin
        SELECT LastAccessDate FROM  [dbo].[yaf_ForumReadTracking] WHERE UserID = @UserID AND ForumID = @ForumID
end
GO

create procedure [dbo].[yaf_user_lastread](@UserID int) as
begin
        DECLARE @LastForumRead datetime
        DECLARE @LastTopicRead datetime
        
         SET @LastForumRead = (SELECT TOP 1 LastAccessDate FROM  [dbo].[yaf_ForumReadTracking] WHERE UserID = @UserID ORDER BY LastAccessDate DESC)
        SET @LastTopicRead = (SELECT TOP 1 LastAccessDate FROM  [dbo].[yaf_TopicReadTracking] WHERE UserID = @UserID ORDER BY LastAccessDate DESC)

        IF @LastForumRead is not null AND @LastTopicRead is not null
        
        IF @LastForumRead > @LastTopicRead
           SELECT LastAccessDate = @LastForumRead
        ELSE
           SELECT LastAccessDate = @LastTopicRead
           
        ELSE IF @LastForumRead is not null
           SELECT LastAccessDate = @LastForumRead
            
        ELSE IF @LastTopicRead is not null
            SELECT LastAccessDate = @LastTopicRead
end
GO

CREATE procedure [dbo].[yaf_topics_byuser]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
  declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int
   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null
        and c.TopicID = (SELECT TOP 1 mess.TopicID FROM [dbo].[yaf_Message] mess WHERE mess.UserID=@PageUserID AND mess.TopicID=c.TopicID)	
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
  where
        (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0
        and	c.TopicMovedID is null
        and c.TopicID = (SELECT TOP 1 mess.TopicID FROM [dbo].[yaf_Message] mess WHERE mess.UserID=@PageUserID AND mess.TopicID=c.TopicID)	
      )	  
      select
        c.ForumID,
		ForumName = d.Name,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,  
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID 
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC       
end
GO

create procedure [dbo].[yaf_TopicStatus_Delete] (@TopicStatusID int) as
begin
   delete from [dbo].[yaf_TopicStatus] 
    where TopicStatusID = @TopicStatusID
end
GO

CREATE procedure [dbo].[yaf_TopicStatus_Edit] (@TopicStatusID int) as
BEGIN
    SELECT * 
    FROM [dbo].[yaf_TopicStatus] 
    WHERE 
        TopicStatusID = @TopicStatusID
END
GO

CREATE procedure [dbo].[yaf_TopicStatus_List] (@BoardID int) as
    BEGIN
            SELECT
                *
            FROM
                [dbo].[yaf_TopicStatus]
            WHERE
                BoardID = @BoardID	
            ORDER BY
                TopicStatusID
        END
GO

CREATE procedure [dbo].[yaf_TopicStatus_Save] (@TopicStatusID int=null, @BoardID int, @TopicStatusName nvarchar(100),@DefaultDescription nvarchar(100)) as
begin
        if @TopicStatusID is null or @TopicStatusID = 0 begin
        insert into [dbo].[yaf_TopicStatus] (BoardID,TopicStatusName,defaultDescription) 
        values(@BoardID,@TopicStatusName,@DefaultDescription)
    end
    else begin
        update [dbo].[yaf_TopicStatus] 
        set TopicStatusName = @TopicStatusName, 
            defaultDescription = @DefaultDescription
        where TopicStatusID = @TopicStatusID
    end
end
GO

CREATE procedure [dbo].[yaf_forum_move](@ForumOldID int,@ForumNewID int, @UTCTIMESTAMP datetime) as
begin
        -- Maybe an idea to use cascading foreign keys instead? Too bad they don't work on MS SQL 7.0...
    update [dbo].[yaf_Forum] set LastMessageID=null,LastTopicID=null where ForumID=@ForumOldID
    update [dbo].[yaf_Active] set ForumID=@ForumNewID where ForumID=@ForumOldID
    update [dbo].[yaf_NntpForum] set ForumID=@ForumNewID where ForumID=@ForumOldID
    update [dbo].[yaf_WatchForum] set ForumID=@ForumNewID where ForumID=@ForumOldID
    delete from [dbo].[yaf_ForumReadTracking] where ForumID = @ForumOldID

    -- BAI CHANGED 02.02.2004
    -- Move topics, messages and attachments

    declare @tmpTopicID int;
    declare topic_cursor cursor for
        select TopicID from [dbo].[yaf_Topic]
        where ForumID = @ForumOldID
        order by TopicID desc
    
    open topic_cursor
    
    fetch next from topic_cursor
    into @tmpTopicID
    
    -- Check @@FETCH_STATUS to see if there are any more rows to fetch.
    while @@FETCH_STATUS = 0
    begin
        exec [dbo].[yaf_topic_move] @tmpTopicID,@ForumNewID,0, -1,@UTCTIMESTAMP;
    
       -- This is executed as long as the previous fetch succeeds.
        fetch next from topic_cursor
        into @tmpTopicID
    end
    
    close topic_cursor
    deallocate topic_cursor

    -- TopicMove finished
    -- END BAI CHANGED 02.02.2004

    delete from [dbo].[yaf_ForumAccess] where ForumID = @ForumOldID

    --Update UserForums Too 
    update [dbo].[yaf_UserForum] set ForumID=@ForumNewID where ForumID=@ForumOldID
    --END ABOT CHANGED 09.04.2004
    delete from [dbo].[yaf_Forum] where ForumID = @ForumOldID
end

GO

create procedure [dbo].[yaf_user_update_single_sign_on_status](@UserID int,@IsFacebookUser bit,@IsTwitterUser bit,@IsGoogleUser bit) as
begin
    
    update [dbo].[yaf_User] set IsFacebookUser = @IsFacebookUser , IsTwitterUser = @IsTwitterUser, IsGoogleUser = @IsGoogleUser where UserID = @UserID
end
GO

CREATE procedure [dbo].[yaf_topic_unanswered]
(   @BoardID int,
    @CategoryID int=null,
    @PageUserID int,		
    @SinceDate datetime=null,
    @ToDate datetime,
    @PageIndex int = 1, 
    @PageSize int = 0, 
    @StyledNicks bit = 0,	
    @FindLastRead bit = 0
)
AS
begin
  declare @TotalRows int
   declare @FirstSelectRowNumber int
   declare @LastSelectRowNumber int

   -- find total returned count
   select  @TotalRows = count(1)		
        from
        [dbo].[yaf_Topic] c
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        c.LastPosted IS NOT NULL and (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0 and	
        c.TopicMovedID is null and
        c.NumPosts = 1
    
    select @PageIndex = @PageIndex+1;
    select @FirstSelectRowNumber = (@PageIndex - 1) * @PageSize + 1;
    select @LastSelectRowNumber = (@PageIndex - 1) * @PageSize + @PageSize;
    
    with TopicIds  as
     (
     select ROW_NUMBER() over (order by cat.SortOrder asc, d.SortOrder asc, c.LastPosted desc) as RowNum, c.TopicID
     from  [dbo].[yaf_Topic] c
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID
        join [dbo].[yaf_ActiveAccess] x   on x.ForumID=d.ForumID
        join [dbo].[yaf_Category] cat on cat.CategoryID=d.CategoryID
    where
        c.LastPosted IS NOT NULL and (c.LastPosted between @SinceDate and @ToDate) and
        x.UserID = @PageUserID and
        CONVERT(int,x.ReadAccess) <> 0 and
        cat.BoardID = @BoardID and
        (@CategoryID is null or cat.CategoryID=@CategoryID) and
        c.IsDeleted = 0 and	
        c.TopicMovedID is null and
        c.NumPosts = 1
      )	  
      select
        c.ForumID,
        c.TopicID,
        c.TopicMovedID,		
        c.Posted,
        LinkTopicID = IsNull(c.TopicMovedID,c.TopicID),
        [Subject] = c.Topic,
        [Description] = c.Description,
        [Status] = c.Status,
        [Styles] = c.Styles,
        c.UserID,
        Starter = IsNull(c.UserName,b.Name),
        StarterDisplay = IsNull(c.UserDisplayName, b.DisplayName),
        NumPostsDeleted = (SELECT COUNT(1) FROM [dbo].[yaf_Message] mes WHERE mes.TopicID = c.TopicID AND mes.IsDeleted = 1 AND mes.IsApproved = 1 AND ((@PageUserID IS NOT NULL AND mes.UserID = @PageUserID) OR (@PageUserID IS NULL)) ),
        Replies = (select count(1) from [dbo].[yaf_Message] x where x.TopicID=c.TopicID and x.IsDeleted=0) - 1,
        [Views] = c.[Views],
        LastPosted = c.LastPosted,
        LastUserID = c.LastUserID,
        LastUserName = IsNull(c.LastUserName,(select x.Name from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastUserDisplayName = IsNull(c.LastUserDisplayName,(select x.DisplayName from [dbo].[yaf_User] x where x.UserID=c.LastUserID)),
        LastMessageID = c.LastMessageID,
        LastMessageFlags = c.LastMessageFlags,
        LastTopicID = c.TopicID,
        TopicFlags = c.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        FavoriteCount = (SELECT COUNT(ID) as [FavoriteCount] FROM [dbo].[yaf_FavoriteTopic] WHERE TopicID = IsNull(c.TopicMovedID,c.TopicID)),
        c.Priority,
        c.PollID,
        ForumName = d.Name,
        c.TopicMovedID,
        ForumFlags = d.Flags,
        FirstMessage = (SELECT TOP 1 CAST([Message] as nvarchar(1000)) FROM [dbo].[yaf_Message] mes2 where mes2.TopicID = IsNull(c.TopicMovedID,c.TopicID) AND mes2.Position = 0),
        StarterStyle = case(@StyledNicks)
            when 1 then  b.UserStyle
            else ''	 end,
        LastUserStyle= case(@StyledNicks)
            when 1 then  (select top 1 usr.[UserStyle] from [dbo].[yaf_User] usr  where usr.UserID = c.LastUserID)
            else ''	 end,
        LastForumAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_ForumReadTracking] x WHERE x.ForumID=d.ForumID AND x.UserID = @PageUserID)
             else ''	 end,
        LastTopicAccess = case(@FindLastRead)
             when 1 then
               (SELECT top 1 LastAccessDate FROM [dbo].[yaf_TopicReadTracking] y WHERE y.TopicID=c.TopicID AND y.UserID = @PageUserID)
             else ''	 end,  
        TotalRows = @TotalRows,
        PageIndex = @PageIndex
    from
        TopicIds ti
        inner join [dbo].[yaf_Topic] c on c.TopicID = ti.TopicID
        join [dbo].[yaf_User] b on b.UserID=c.UserID
        join [dbo].[yaf_Forum] d on d.ForumID=c.ForumID      
    where ti.RowNum between @FirstSelectRowNumber and @LastSelectRowNumber
        order by
            RowNum ASC 

end
GO


create procedure [dbo].[yaf_db_handle_computedcolumns]( @SetOnDisk bit )  
as
begin
    declare @tmpC nvarchar(255)
    declare @tmpT nvarchar(255)
    declare @tmpD nvarchar(255)	

    CREATE TABLE #MyTempTable (tname nvarchar(255),cname nvarchar(255), ctext nvarchar(255))
    INSERT INTO #MyTempTable(tname,cname, ctext)     
        SELECT        o.name,s.name,sc.text
FROM            sys.columns AS s INNER JOIN
                         sys.objects AS o ON o.object_id = s.object_id INNER JOIN
                         sys.syscomments AS sc ON sc.id = o.object_id
WHERE        (s.is_computed = 1) AND (o.type = 'U') AND (s.system_type_id = 104)

    if @SetOnDisk = 1
    begin
        declare c cursor for
        SELECT    tname, cname, ctext
        FROM           #MyTempTable       
        
        open c
        
        fetch next from c into @tmpT, @tmpC, @tmpD
        while @@FETCH_STATUS = 0
        begin
            
        exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] drop column ' + @tmpC)
        exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] add ' + @tmpC + ' AS ' + @tmpD + ' PERSISTED ' )

            fetch next from c into  @tmpT, @tmpC, @tmpD
        end
        close c
        deallocate c
    end
    else
    begin
        declare c cursor for
            SELECT    tname, cname, ctext
        FROM           #MyTempTable 
        
        open c
        
        fetch next from c into @tmpT, @tmpC, @tmpD
        while @@FETCH_STATUS = 0
        begin		    	
            exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] drop column ' + @tmpC)
            exec('ALTER TABLE [dbo].[yaf_'+ @tmpT +'] add ' + @tmpC + ' AS ' + @tmpD)
            fetch next from c into @tmpT, @tmpC, @tmpD
        end
        close c
        deallocate c
    end	
end
GO

CREATE procedure [dbo].[yaf_adminpageaccess_save] (@UserID int, @PageName nvarchar(128)) as
begin
    if not exists (select 1 from [dbo].[yaf_AdminPageUserAccess] where UserID = @UserID and PageName = @PageName) 
        begin
        insert into [dbo].[yaf_AdminPageUserAccess]  (UserID,PageName) 
        values(@UserID,@PageName)
    end	
end
GO

CREATE procedure [dbo].[yaf_adminpageaccess_delete] (@UserID int, @PageName nvarchar(128)) as
begin
        delete from [dbo].[yaf_AdminPageUserAccess]  where UserID = @UserID AND (@PageName IS NULL OR PageName = @PageName);
end
GO

CREATE procedure [dbo].[yaf_adminpageaccess_list] (@UserID int, @PageName nvarchar(128) = null) as
begin
        if (@UserID > 0  and @PageName IS NOT NULL) 
        select ap.*, 
        u.Name as UserName, 
        u.DisplayName as UserDisplayName, 
        b.Name as BoardName
        from [dbo].[yaf_AdminPageUserAccess] ap 
        JOIN  [dbo].[yaf_User] u on ap.UserID = u.UserID 
        JOIN [dbo].[yaf_Board] b ON b.BoardID = u.BoardID 
        where u.UserID = @UserID and PageName = @PageName and (u.Flags & 1) <> 1 order by  b.BoardID,u.Name,ap.PageName;
        else if (@UserID > 0 and @PageName IS  NULL) 
        select ap.*, 
        u.Name as UserName, 
        u.DisplayName as UserDisplayName, 
        b.Name as BoardName,
        1 as ReadAccess  
         from [dbo].[yaf_AdminPageUserAccess] ap 
        JOIN  [dbo].[yaf_User] u on ap.UserID = u.UserID 
        JOIN [dbo].[yaf_Board] b ON b.BoardID = u.BoardID 
        where u.UserID = @UserID and (u.Flags & 1) <> 1 order by  b.BoardID,u.Name,ap.PageName;
        else
        select ap.*, 
        u.Name as UserName, 
        u.DisplayName as UserDisplayName, 
        b.Name as BoardName
        from [dbo].[yaf_AdminPageUserAccess] ap 
        JOIN  [dbo].[yaf_User] u on ap.UserID = u.UserID 
        JOIN [dbo].[yaf_Board] b ON b.BoardID = u.BoardID 
        where (u.Flags & 1) <> 1
        order by  b.BoardID,u.Name,ap.PageName;
end
GO

CREATE procedure [dbo].[yaf_eventloggroupaccess_save] (@GroupID int, @EventTypeID int, @EventTypeName nvarchar(128), @DeleteAccess bit = 0) as
begin
    if not exists (select top 1 1 from [dbo].[yaf_EventLogGroupAccess] where GroupID = @GroupID and EventTypeName = @EventTypeName) 
        begin
        insert into [dbo].[yaf_EventLogGroupAccess]  (GroupID,EventTypeID,EventTypeName,DeleteAccess) 
        values(@GroupID,@EventTypeID,@EventTypeName,@DeleteAccess)
    end	
    else
    begin
        update [dbo].[yaf_EventLogGroupAccess]  set DeleteAccess = @DeleteAccess
        where GroupID = @GroupID and EventTypeID = @EventTypeID
    end
end
GO


CREATE procedure [dbo].[yaf_eventloggroupaccess_delete] (@GroupID int, @EventTypeID int, @EventTypeName nvarchar(128)) as
begin
    if @EventTypeName is not null 
    begin
        delete from [dbo].[yaf_EventLogGroupAccess]  where GroupID = @GroupID and EventTypeID = @EventTypeID
    end	
    else
    begin
    -- delete all access rights
        delete from [dbo].[yaf_EventLogGroupAccess]  where GroupID = @GroupID 
    end
end
GO

CREATE procedure [dbo].[yaf_eventloggroupaccess_list] (@GroupID int, @EventTypeID int = null) as
begin 
-- TODO - exclude host admins from list   
if @EventTypeID is null   
        select e.*, g.Name as GroupName from [dbo].[yaf_EventLogGroupAccess] e 
        join [dbo].[yaf_Group] g on g.GroupID = e.GroupID where  e.GroupID = @GroupID
        else
        select e.*, g.Name as GroupName from [dbo].[yaf_EventLogGroupAccess] e 
        join [dbo].[yaf_Group] g on g.GroupID = e.GroupID where  e.GroupID = @GroupID and e.EventTypeID = @EventTypeID
end
GO

create procedure [dbo].[yaf_user_savestyle](@GroupID int, @RankID int)  as

begin
-- loop thru users to sync styles

 /*   declare @usridtmp int 
    declare @styletmp varchar(255)      
        declare c cursor for
            select us.UserID, us.NewUserStyle from (
                select uu.UserID, uu.UserStyle, NewUserStyle = ISNULL(
                    (SELECT TOP 1 f.Style FROM [dbo].[yaf_UserGroup] e  join [dbo].[yaf_Group] f  on f.GroupID=e.GroupID WHERE e.UserID=uu.UserID AND f.Style != '' ORDER BY f.SortOrder),
                    (SELECT TOP 1 r.Style FROM [dbo].[yaf_Rank] r  where RankID = uu.RankID))
                from [dbo].[yaf_User] uu 
                JOIN [dbo].[yaf_UserGroup] ug  ON ug.UserID = uu.UserID
                where
                (@RankID IS NULL OR uu.RankID = @RankID) AND
                (@GroupID IS NULL OR ug.GroupID = @GroupID)) us
            where us.UserStyle != us.NewUserStyle 
        FOR UPDATE -- OF UserStyle
        open c
        
        fetch next from c into @usridtmp, @styletmp
        while @@FETCH_STATUS = 0
        begin      
            UPDATE [dbo].[yaf_User] SET UserStyle = @styletmp  WHERE UserID = @usridtmp  -- CURRENT OF c 	 			            
            fetch next from c into @usridtmp, @styletmp     
        end
        close c
        deallocate c  
        */
        update d
        set    d.UserStyle = ISNULL((select top 1 f.Style FROM [dbo].[yaf_UserGroup] e 
                                     join [dbo].[yaf_Group] f on f.GroupID=e.GroupID 
                                     WHERE f.Style IS NOT NULL and e.UserID = d.UserID order by f.SortOrder),
                                    (SELECT TOP 1 r.Style FROM [dbo].[yaf_Rank] r 
                                    join [dbo].[yaf_User] u on u.RankID = r.RankID 
                                    where u.UserID = d.UserID ))	    
        from  [dbo].[yaf_User] d; 
    
end
GO

create procedure [dbo].[yaf_init_styles] as
begin 
-- previously it was mangled so it's desirable update styles every time to be sure
exec('[dbo].[yaf_user_savestyle] null,null')
end
GO

exec('[dbo].[yaf_init_styles]')
GO

--================================ CONSTRAINTS =======================================

if exists (select top 1 1 from sys.objects where name='FK_Active_Forum' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] drop constraint [FK_Active_Forum]
go

if exists (select top 1 1 from sys.objects where name='FK_Active_Topic' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] drop constraint [FK_Active_Topic]
go

if exists (select top 1 1 from sys.objects where name='FK_Active_User' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] drop constraint [FK_Active_User]
go

if exists (select top 1 1 from sys.objects where name='FK_CheckEmail_User' and parent_object_id=object_id('[dbo].[yaf_CheckEmail]') and type in (N'F'))
	alter table [dbo].[yaf_CheckEmail] drop constraint [FK_CheckEmail_User]
go

if exists (select top 1 1 from sys.objects where name='FK_Choice_Poll' and parent_object_id=object_id('[dbo].[yaf_Choice]') and type in (N'F'))
	alter table [dbo].[yaf_Choice] drop constraint [FK_Choice_Poll]
go

if exists (select top 1 1 from sys.objects where name='FK_Forum_Category' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] drop constraint [FK_Forum_Category]
go

if exists (select top 1 1 from sys.objects where name='FK_Forum_Message' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] drop constraint [FK_Forum_Message]
go

if exists (select top 1 1 from sys.objects where name='FK_Forum_Topic' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] drop constraint [FK_Forum_Topic]
go

if exists (select top 1 1 from sys.objects where name='FK_Forum_User' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] drop constraint [FK_Forum_User]
go

if exists (select top 1 1 from sys.objects where name='FK_ForumAccess_Forum' and parent_object_id=object_id('[dbo].[yaf_ForumAccess]') and type in (N'F'))
	alter table [dbo].[yaf_ForumAccess] drop constraint [FK_ForumAccess_Forum]
go

if exists (select top 1 1 from sys.objects where name='FK_ForumAccess_Group' and parent_object_id=object_id('[dbo].[yaf_ForumAccess]') and type in (N'F'))
	alter table [dbo].[yaf_ForumAccess] drop constraint [FK_ForumAccess_Group]
go

if exists (select top 1 1 from sys.objects where name='FK_Message_Topic' and parent_object_id=object_id('[dbo].[yaf_Message]') and type in (N'F'))
	alter table [dbo].[yaf_Message] drop constraint [FK_Message_Topic]
go

if exists (select top 1 1 from sys.objects where name='FK_Message_User' and parent_object_id=object_id('[dbo].[yaf_Message]') and type in (N'F'))
	alter table [dbo].[yaf_Message] drop constraint [FK_Message_User]
go

if exists (select top 1 1 from sys.objects where name='FK_PMessage_User1' and parent_object_id=object_id('[dbo].[yaf_PMessage]') and type in (N'F'))
	alter table [dbo].[yaf_PMessage] drop constraint [FK_PMessage_User1]
go

if exists (select top 1 1 from sys.objects where name='FK_Topic_Forum' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_Topic_Forum]
go

if exists (select top 1 1 from sys.objects where name='FK_Topic_Message' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_Topic_Message]
go

if exists (select top 1 1 from sys.objects where name='FK_Topic_Poll' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_Topic_Poll]
go

if exists (select top 1 1 from sys.objects where name='FK_Topic_Topic' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_Topic_Topic]
go

if exists (select top 1 1 from sys.objects where name='FK_Topic_User' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_Topic_User]
go

if exists (select top 1 1 from sys.objects where name='FK_Topic_User2' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_Topic_User2]
go

if exists (select top 1 1 from sys.objects where name='FK_WatchForum_Forum' and parent_object_id=object_id('[dbo].[yaf_WatchForum]') and type in (N'F'))
	alter table [dbo].[yaf_WatchForum] drop constraint [FK_WatchForum_Forum]
go

if exists (select top 1 1 from sys.objects where name='FK_WatchForum_User' and parent_object_id=object_id('[dbo].[yaf_WatchForum]') and type in (N'F'))
	alter table [dbo].[yaf_WatchForum] drop constraint [FK_WatchForum_User]
go

if exists (select top 1 1 from sys.objects where name='FK_WatchTopic_Topic' and parent_object_id=object_id('[dbo].[yaf_WatchTopic]') and type in (N'F'))
	alter table [dbo].[yaf_WatchTopic] drop constraint [FK_WatchTopic_Topic]
go

if exists (select top 1 1 from sys.objects where name='FK_WatchTopic_User' and parent_object_id=object_id('[dbo].[yaf_WatchTopic]') and type in (N'F'))
	alter table [dbo].[yaf_WatchTopic] drop constraint [FK_WatchTopic_User]
go

if exists (select top 1 1 from sys.objects where name='FK_UserGroup_User' and parent_object_id=object_id('[dbo].[yaf_UserGroup]') and type in (N'F'))
	alter table [dbo].[yaf_UserGroup] drop constraint [FK_UserGroup_User]
go

if exists (select top 1 1 from sys.objects where name='FK_UserGroup_Group' and parent_object_id=object_id('[dbo].[yaf_UserGroup]') and type in (N'F'))
	alter table [dbo].[yaf_UserGroup] drop constraint [FK_UserGroup_Group]
go

if exists (select top 1 1 from sys.objects where name='FK_Attachment_Message' and parent_object_id=object_id('[dbo].[yaf_Attachment]') and type in (N'F'))
	alter table [dbo].[yaf_Attachment] drop constraint [FK_Attachment_Message]
go

if exists (select top 1 1 from sys.foreign_keys where object_id = OBJECT_ID(N'FK_yaf_Attachment_yaf_Message') and parent_object_id=object_id('[dbo].[yaf_Attachment]'))
	alter table [dbo].[yaf_Attachment] drop constraint [FK_yaf_Attachment_yaf_Message]
go

if exists (select top 1 1 from sys.objects where name='FK_NntpForum_NntpServer' and parent_object_id=object_id('[dbo].[yaf_NntpForum]') and type in (N'F'))
	alter table [dbo].[yaf_NntpForum] drop constraint [FK_NntpForum_NntpServer]
go

if exists (select top 1 1 from sys.objects where name='FK_NntpForum_Forum' and parent_object_id=object_id('[dbo].[yaf_NntpForum]') and type in (N'F'))
	alter table [dbo].[yaf_NntpForum] drop constraint [FK_NntpForum_Forum]
go

if exists (select top 1 1 from sys.objects where name='FK_NntpTopic_NntpForum' and parent_object_id=object_id('[dbo].[yaf_NntpTopic]') and type in (N'F'))
	alter table [dbo].[yaf_NntpTopic] drop constraint [FK_NntpTopic_NntpForum]
go


if exists (select top 1 1 from sys.objects where name='FK_NntpTopic_Topic' and parent_object_id=object_id('[dbo].[yaf_NntpTopic]') and type in (N'F'))
	alter table [dbo].[yaf_NntpTopic] drop constraint [FK_NntpTopic_Topic]
go


if exists (select top 1 1 from sys.objects where name='FK_ForumAccess_AccessMask' and parent_object_id=object_id('[dbo].[yaf_ForumAccess]') and type in (N'F'))
	alter table [dbo].[yaf_ForumAccess] drop constraint [FK_ForumAccess_AccessMask]
go


if exists (select top 1 1 from sys.objects where name='FK_UserForum_User' and parent_object_id=object_id('[dbo].[yaf_UserForum]') and type in (N'F'))
	alter table [dbo].[yaf_UserForum] drop constraint [FK_UserForum_User]
go


if exists (select top 1 1 from sys.objects where name='FK_UserForum_Forum' and parent_object_id=object_id('[dbo].[yaf_UserForum]') and type in (N'F'))
	alter table [dbo].[yaf_UserForum] drop constraint [FK_UserForum_Forum]
go


if exists (select top 1 1 from sys.objects where name='FK_UserForum_AccessMask' and parent_object_id=object_id('[dbo].[yaf_UserForum]') and type in (N'F'))
	alter table [dbo].[yaf_UserForum] drop constraint [FK_UserForum_AccessMask]
go


if exists (select top 1 1 from sys.objects where name='FK_Category_Board' and parent_object_id=object_id('[dbo].[yaf_Category]') and type in (N'F'))
	alter table [dbo].[yaf_Category] drop constraint [FK_Category_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_AccessMask_Board' and parent_object_id=object_id('[dbo].[yaf_AccessMask]') and type in (N'F'))
	alter table [dbo].[yaf_AccessMask] drop constraint [FK_AccessMask_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_Active_Board' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] drop constraint [FK_Active_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_BannedIP_Board' and parent_object_id=object_id('[dbo].[yaf_BannedIP]') and type in (N'F'))
	alter table [dbo].[yaf_BannedIP] drop constraint [FK_BannedIP_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_Group_Board' and parent_object_id=object_id('[dbo].[yaf_Group]') and type in (N'F'))
	alter table [dbo].[yaf_Group] drop constraint [FK_Group_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_NntpServer_Board' and parent_object_id=object_id('[dbo].[yaf_NntpServer]') and type in (N'F'))
	alter table [dbo].[yaf_NntpServer] drop constraint [FK_NntpServer_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_Rank_Board' and parent_object_id=object_id('[dbo].[yaf_Rank]') and type in (N'F'))
	alter table [dbo].[yaf_Rank] drop constraint [FK_Rank_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_Smiley_Board' and parent_object_id=object_id('[dbo].[yaf_Smiley]') and type in (N'F'))
	alter table [dbo].[yaf_Smiley] drop constraint [FK_Smiley_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_User_Rank' and parent_object_id=object_id('[dbo].[yaf_User]') and type in (N'F'))
	alter table [dbo].[yaf_User] drop constraint [FK_User_Rank]
go


if exists (select top 1 1 from sys.objects where name='FK_User_Board' and parent_object_id=object_id('[dbo].[yaf_User]') and type in (N'F'))
	alter table [dbo].[yaf_User] drop constraint [FK_User_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_Forum_Forum' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] drop constraint [FK_Forum_Forum]
go


if exists (select top 1 1 from sys.objects where name='FK_Message_Message' and parent_object_id=object_id('[dbo].[yaf_Message]') and type in (N'F'))
	alter table [dbo].[yaf_Message] drop constraint [FK_Message_Message]
go


if exists (select top 1 1 from sys.objects where name='FK_UserPMessage_User' and parent_object_id=object_id('[dbo].[yaf_UserPMessage]') and type in (N'F'))
	alter table [dbo].[yaf_UserPMessage] drop constraint [FK_UserPMessage_User]
go


if exists (select top 1 1 from sys.objects where name='FK_UserPMessage_PMessage' and parent_object_id=object_id('[dbo].[yaf_UserPMessage]') and type in (N'F'))
	alter table [dbo].[yaf_UserPMessage] drop constraint [FK_UserPMessage_PMessage]
go


if exists (select top 1 1 from sys.objects where name='FK_Registry_Board' and parent_object_id=object_id('[dbo].[yaf_Registry]') and type in (N'F'))
	alter table [dbo].[yaf_Registry] drop constraint [FK_Registry_Board]
go


if exists (select top 1 1 from sys.objects where name='FK_EventLog_User' and parent_object_id=object_id('[dbo].[yaf_EventLog]') and type in (N'F'))
	alter table [dbo].[yaf_EventLog] drop constraint [FK_EventLog_User]
go


if exists (select top 1 1 from sys.objects where name='FK_yaf_PollVote_yaf_Poll' and parent_object_id=object_id('[dbo].[yaf_PollVote]') and type in (N'F'))
	alter table [dbo].[yaf_PollVote] drop constraint [FK_yaf_PollVote_yaf_Poll]
go

if exists (select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_Poll' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] drop constraint [FK_yaf_Topic_yaf_Poll] 
go 

/* Drop old primary keys */

if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_BannedIP]') and name='PK_BannedIP')
	alter table [dbo].[yaf_BannedIP] drop constraint [PK_BannedIP]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Category]') and name='PK_Category')
	alter table [dbo].[yaf_Category] drop constraint [PK_Category]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_CheckEmail]') and name='PK_CheckEmail')
	alter table [dbo].[yaf_CheckEmail] drop constraint [PK_CheckEmail]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Choice]') and name='PK_Choice')
	alter table [dbo].[yaf_Choice] drop constraint [PK_Choice]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Forum]') and name='PK_Forum')
	alter table [dbo].[yaf_Forum] drop constraint [PK_Forum]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_ForumAccess]') and name='PK_ForumAccess')
	alter table [dbo].[yaf_ForumAccess] drop constraint [PK_ForumAccess]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Group]') and name='PK_Group')
	alter table [dbo].[yaf_Group] drop constraint [PK_Group]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Mail]') and name='PK_Mail')
	alter table [dbo].[yaf_Mail] drop constraint [PK_Mail]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Message]') and name='PK_Message')
	alter table [dbo].[yaf_Message] drop constraint [PK_Message]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_PMessage]') and name='PK_PMessage')
	alter table [dbo].[yaf_PMessage] drop constraint [PK_PMessage]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Poll]') and name='PK_Poll')
	alter table [dbo].[yaf_Poll] drop constraint [PK_Poll]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Smiley]') and name='PK_Smiley')
	alter table [dbo].[yaf_Smiley] drop constraint [PK_Smiley]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Topic]') and name='PK_Topic')
	alter table [dbo].[yaf_Topic] drop constraint [PK_Topic]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_User]') and name='PK_User')
	alter table [dbo].[yaf_User] drop constraint [PK_User]
go

if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_WatchForum]') and name='PK_WatchForum')
	alter table [dbo].[yaf_WatchForum] drop constraint [PK_WatchForum]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_WatchTopic]') and name='PK_WatchTopic')
	alter table [dbo].[yaf_WatchTopic] drop constraint [PK_WatchTopic]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_UserGroup]') and name='PK_UserGroup')
	alter table [dbo].[yaf_UserGroup] drop constraint [PK_UserGroup]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Rank]') and name='PK_Rank')
	alter table [dbo].[yaf_Rank] drop constraint [PK_Rank]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_NntpServer]') and name='PK_NntpServer')
	alter table [dbo].[yaf_NntpServer] drop constraint [PK_NntpServer]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_NntpForum]') and name='PK_NntpForum')
	alter table [dbo].[yaf_NntpForum] drop constraint [PK_NntpForum]
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_NntpTopic]') and name='PK_NntpTopic')
	alter table [dbo].[yaf_NntpTopic] drop constraint [PK_NntpTopic]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_AccessMask]') and name='PK_AccessMask')
	alter table [dbo].[yaf_AccessMask] drop constraint [PK_AccessMask]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_UserForum]') and name='PK_UserForum')
	alter table [dbo].[yaf_UserForum] drop constraint [PK_UserForum]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_Board]') and name='PK_Board')
	alter table [dbo].[yaf_Board] drop constraint [PK_Board]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_Active]') and name='PK_Active')
	alter table [dbo].[yaf_Active] drop constraint [PK_Active]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_UserPMessage]') and name='PK_UserPMessage')
	alter table [dbo].[yaf_UserPMessage] drop constraint [PK_UserPMessage]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_Attachment]') and name='PK_Attachment')
	alter table [dbo].[yaf_Attachment] drop constraint [PK_Attachment]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_Active]') and name='PK_Active')
	alter table [dbo].[yaf_Active] drop constraint [PK_Active]
go


if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_PollVote]') and name='PK_PollVote')
	alter table [dbo].[yaf_PollVote] drop constraint [PK_PollVote]
go

if exists(select top 1 1 from sys.indexes where object_id=object_id('[dbo].[yaf_GroupMedal]') and name='PK_yaf_GroupMedal_1')
	alter table [dbo].[yaf_GroupMedal] drop constraint [PK_yaf_GroupMedal_1]
go



/*
** Unique constraints
*/


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_CheckEmail]') and name='IX_CheckEmail')
	alter table [dbo].[yaf_CheckEmail] drop constraint IX_CheckEmail
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Forum]') and name='IX_Forum')
	alter table [dbo].[yaf_Forum] drop constraint IX_Forum
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_WatchForum]') and name='IX_WatchForum')
	alter table [dbo].[yaf_WatchForum] drop constraint IX_WatchForum
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_WatchTopic]') and name='IX_WatchTopic')
	alter table [dbo].[yaf_WatchTopic] drop constraint IX_WatchTopic
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Category]') and name='IX_Category')
	alter table [dbo].[yaf_Category] drop constraint IX_Category
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Rank]') and name='IX_Rank')
	alter table [dbo].[yaf_Rank] drop constraint IX_Rank
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_User]') and name='IX_User')
	alter table [dbo].[yaf_User] drop constraint IX_User
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Group]') and name='IX_Group')
	alter table [dbo].[yaf_Group] drop constraint IX_Group
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_BannedIP]') and name='IX_BannedIP')
	alter table [dbo].[yaf_BannedIP] drop constraint IX_BannedIP
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Smiley]') and name='IX_Smiley')
	alter table [dbo].[yaf_Smiley] drop constraint IX_Smiley
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_BannedIP]') and name='IX_BannedIP')
	alter table [dbo].[yaf_BannedIP] drop constraint IX_BannedIP
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Category]') and name='IX_Category')
	alter table [dbo].[yaf_Category] drop constraint IX_Category
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_CheckEmail]') and name='IX_CheckEmail')
	alter table [dbo].[yaf_CheckEmail] drop constraint IX_CheckEmail
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Forum]') and name='IX_Forum')
	alter table [dbo].[yaf_Forum] drop constraint IX_Forum
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Group]') and name='IX_Group')
	alter table [dbo].[yaf_Group] drop constraint IX_Group
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Rank]') and name='IX_Rank')
	alter table [dbo].[yaf_Rank] drop constraint IX_Rank
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Smiley]') and name='IX_Smiley')
	alter table [dbo].[yaf_Smiley] drop constraint IX_Smiley
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_User]') and name='IX_User')
	alter table [dbo].[yaf_User] drop constraint IX_User
go


if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Thanks]') and name='IX_yaf_Thanks')
	alter table [dbo].[yaf_Thanks] drop constraint [IX_yaf_Thanks]
go

if exists (select top 1 1 from sys.objects where name='IX_yaf_MessageHistory' and parent_object_id=object_id('[dbo].[yaf_MessageHistory]'))
	alter table [dbo].[yaf_MessageHistory] drop constraint [IX_yaf_MessageHistory] 
go 
/* Wrong index */
/* Modified by Herman_Herman for SQL2K Compatibility */

if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Thanks]') and name='IX_yaf_Thanks_UserID')
    alter table [dbo].[yaf_Thanks] drop constraint [IX_yaf_Thanks_UserID]
go

-- vzrus: to allow duplicate forum names
if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Forum]') and name='IX_yaf_Forum')
    alter table [dbo].[yaf_Forum] drop constraint IX_yaf_Forum
go

if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_ForumReadTracking]') and name='IX_yaf_ForumReadTracking')
    alter table [dbo].[yaf_ForumReadTracking] drop constraint IX_yaf_ForumReadTracking
go

if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_TopicReadTracking]') and name='IX_yaf_TopicReadTracking')
    alter table [dbo].[yaf_TopicReadTracking] drop constraint IX_yaf_TopicReadTracking
go

if exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_ReputationVote]') and name='IX_yaf_ReputationVote')
    alter table [dbo].[yaf_ReputationVote] drop constraint IX_yaf_ReputationVote
go

/* Build new constraints */

/*
** Primary keys
*/

if (SELECT OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_BannedIP]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_BannedIP] with nocheck add constraint [PK_yaf_BannedIP] primary key clustered(ID)
go

if (SELECT OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_BannedName]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_BannedName] with nocheck add constraint [PK_yaf_BannedName] primary key clustered(ID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_BannedEmail]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_BannedEmail] with nocheck add constraint [PK_yaf_BannedEmail] primary key clustered(ID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Buddy]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Buddy] with nocheck add constraint [PK_yaf_Buddy] primary key clustered(ID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Category]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Category] with nocheck add constraint [PK_yaf_Category] primary key clustered(CategoryID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_CheckEmail]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_CheckEmail] with nocheck add constraint [PK_yaf_CheckEmail] primary key clustered(CheckEmailID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Choice]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Choice] with nocheck add constraint [PK_yaf_Choice] primary key clustered(ChoiceID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Forum]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Forum] with nocheck add constraint [PK_yaf_Forum] primary key clustered(ForumID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_ForumAccess]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_ForumAccess] with nocheck add constraint [PK_yaf_ForumAccess] primary key clustered(GroupID,ForumID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_MessageReported]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_MessageReported] with nocheck add constraint [PK_yaf_MessageReported] primary key clustered(MessageID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Group]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Group] with nocheck add constraint [PK_yaf_Group] primary key clustered(GroupID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_GroupMedal]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_GroupMedal] with nocheck add constraint [PK_yaf_GroupMedal] primary key clustered(MedalID,GroupID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_ForumReadTracking]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_ForumReadTracking] with nocheck add constraint [PK_yaf_ForumReadTracking] primary key clustered(UserID,ForumID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_TopicReadTracking]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_TopicReadTracking] with nocheck add constraint [PK_yaf_TopicReadTracking] primary key clustered(UserID,TopicID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_UserMedal]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_UserMedal] with nocheck add constraint [PK_yaf_UserMedal] primary key clustered(MedalID,UserID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Mail]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Mail] with nocheck add constraint [PK_yaf_Mail] primary key clustered(MailID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_UserProfile]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_UserProfile] with nocheck add constraint [PK_yaf_UserProfile] primary key clustered(UserID,ApplicationName)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Message]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Message] with nocheck add constraint [PK_yaf_Message] primary key clustered(MessageID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_PMessage]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_PMessage] with nocheck add constraint [PK_yaf_PMessage] primary key clustered(PMessageID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_PollGroupCluster]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_PollGroupCluster] with nocheck add constraint [PK_yaf_PollGroupCluster] primary key clustered(PollGroupID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Poll]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Poll] with nocheck add constraint [PK_yaf_Poll] primary key clustered(PollID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Smiley]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Smiley] with nocheck add constraint [PK_yaf_Smiley] primary key clustered(SmileyID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Topic]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Topic] with nocheck add constraint [PK_yaf_Topic] primary key clustered(TopicID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_FavoriteTopic]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_FavoriteTopic] with nocheck add constraint [PK_yaf_FavoriteTopic] primary key clustered(ID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_User]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_User] with nocheck add constraint [PK_yaf_User] primary key clustered(UserID)   
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_WatchForum]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_WatchForum] with nocheck add constraint [PK_yaf_WatchForum] primary key clustered(WatchForumID)   
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_WatchTopic]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_WatchTopic] with nocheck add constraint [PK_yaf_WatchTopic] primary key clustered(WatchTopicID)   
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_UserGroup]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_UserGroup] with nocheck add constraint [PK_yaf_UserGroup] primary key clustered(UserID,GroupID)
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Rank]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Rank] with nocheck add constraint [PK_yaf_Rank] primary key clustered(RankID)
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_NntpServer]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_NntpServer] with nocheck add constraint [PK_yaf_NntpServer] primary key clustered (NntpServerID) 
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_NntpForum]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_NntpForum] with nocheck add constraint [PK_yaf_NntpForum] primary key clustered (NntpForumID) 
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_NntpTopic]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_NntpTopic] with nocheck add constraint [PK_yaf_NntpTopic] primary key clustered (NntpTopicID) 
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_AccessMask]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_AccessMask] with nocheck add constraint [PK_yaf_AccessMask] primary key clustered (AccessMaskID) 
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_UserForum]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_UserForum] with nocheck add constraint [PK_yaf_UserForum] primary key clustered (UserID,ForumID) 
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Board]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Board] with nocheck add constraint [PK_yaf_Board] primary key clustered (BoardID)
go


if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Active]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Active] with nocheck add constraint [PK_yaf_Active] primary key clustered(SessionID,BoardID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_UserPMessage]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_UserPMessage] with nocheck add constraint [PK_yaf_UserPMessage] primary key clustered (UserPMessageID) 
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Attachment]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Attachment] with nocheck add constraint [PK_yaf_Attachment] primary key clustered (AttachmentID) 
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Active]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Active] with nocheck add constraint [PK_yaf_Active] primary key clustered(SessionID,BoardID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_PollVote]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_PollVote] with nocheck add constraint [PK_yaf_PollVote] primary key clustered(PollVoteID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_IgnoreUser]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_IgnoreUser] with nocheck add constraint [PK_yaf_IgnoreUser] PRIMARY KEY CLUSTERED (UserID, IgnoredUserID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_ShoutboxMessage]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_ShoutboxMessage] with nocheck add constraint [PK_yaf_ShoutboxMessage] PRIMARY KEY CLUSTERED (ShoutBoxMessageID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_Thanks]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_Thanks] with nocheck add constraint [PK_yaf_Thanks] PRIMARY KEY CLUSTERED (ThanksID)
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_MessageHistory]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_MessageHistory] with nocheck add constraint  [PK_yaf_MessageHistory] primary key clustered (MessageID,Edited)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_ActiveAccess]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_ActiveAccess] with nocheck add constraint  [PK_yaf_ActiveAccess] primary key clustered (UserID,ForumID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_ReputationVote]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_ReputationVote] with nocheck add constraint  [PK_yaf_ReputationVote] primary key clustered (ReputationFromUserID,ReputationToUserID)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_AdminPageUserAccess]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_AdminPageUserAccess] with nocheck add constraint [PK_yaf_AdminPageUserAccess] primary key clustered(UserID,PageName)   
go

if (select OBJECTPROPERTY(OBJECT_ID('[dbo].[yaf_EventLogGroupAccess]'), 'TableHasPrimaryKey')) = 0
	alter table [dbo].[yaf_EventLogGroupAccess] with nocheck add constraint [PK_yaf_EventLogGroupAccess] primary key clustered(GroupID,EventTypeID)   
go

/*
** Unique constraints
*/

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_CheckEmail]') and name='IX_yaf_CheckEmail')
	alter table [dbo].[yaf_CheckEmail] add constraint IX_yaf_CheckEmail unique nonclustered (Hash)   
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_WatchForum]') and name='IX_yaf_WatchForum')
	alter table [dbo].[yaf_WatchForum] add constraint IX_yaf_WatchForum unique nonclustered (ForumID,UserID)   
go 

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_UserProfile]') and name='IX_yaf_UserProfile')
	alter table [dbo].[yaf_UserProfile] add constraint IX_yaf_UserProfile unique nonclustered (UserID,ApplicationName)   
go

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_WatchTopic]') and name='IX_yaf_WatchTopic')
	alter table [dbo].[yaf_WatchTopic] add constraint IX_yaf_WatchTopic unique nonclustered (TopicID,UserID)   
go

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Category]') and name='IX_yaf_Category')
	alter table [dbo].[yaf_Category] add constraint IX_yaf_Category unique nonclustered(BoardID,Name)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Rank]') and name='IX_yaf_Rank')
	alter table [dbo].[yaf_Rank] add constraint IX_yaf_Rank unique(BoardID,Name)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_User]') and name='IX_yaf_User')
	alter table [dbo].[yaf_User] add constraint IX_yaf_User unique nonclustered(BoardID,Name)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Group]') and name='IX_yaf_Group')
	alter table [dbo].[yaf_Group] add constraint IX_yaf_Group unique nonclustered(BoardID,Name)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_BannedIP]') and name='IX_yaf_BannedIP')
	alter table [dbo].[yaf_BannedIP] add constraint IX_yaf_BannedIP unique nonclustered(BoardID,Mask)
go

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_BannedName]') and name='IX_yaf_BannedName')
	alter table [dbo].[yaf_BannedName] add constraint IX_yaf_BannedName unique nonclustered(BoardID,Mask)
go

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_BannedEmail]') and name='IX_yaf_BannedEmail')
	alter table [dbo].[yaf_BannedEmail] add constraint IX_yaf_BannedEmail unique nonclustered(BoardID,Mask)
go

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Smiley]') and name='IX_yaf_Smiley')
	alter table [dbo].[yaf_Smiley] add constraint IX_yaf_Smiley unique nonclustered(BoardID,Code)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Category]') and name='IX_yaf_Category')
	alter table [dbo].[yaf_Category] add constraint IX_yaf_Category unique nonclustered(BoardID,Name)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_CheckEmail]') and name='IX_yaf_CheckEmail')
	alter table [dbo].[yaf_CheckEmail] add constraint IX_yaf_CheckEmail unique nonclustered(Hash)
go


/* if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Forum]') and name='IX_yaf_Forum')
	alter table [dbo].[yaf_Forum] add constraint IX_yaf_Forum unique nonclustered(CategoryID,Name)   
*/


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Group]') and name='IX_yaf_Group')
	alter table [dbo].[yaf_Group] add constraint IX_yaf_Group unique nonclustered(BoardID,Name)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Rank]') and name='IX_yaf_Rank')
	alter table [dbo].[yaf_Rank] add constraint IX_yaf_Rank unique nonclustered(BoardID,Name)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Smiley]') and name='IX_yaf_Smiley')
	alter table [dbo].[yaf_Smiley] add constraint IX_yaf_Smiley unique nonclustered(BoardID,Code)
go


if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_User]') and name='IX_yaf_User')
	alter table [dbo].[yaf_User] add constraint IX_yaf_User unique nonclustered(BoardID,Name)
go

if not exists (select top 1 1 from  sys.indexes where object_id=object_id('[dbo].[yaf_Buddy]') and name='IX_yaf_Buddy')
	alter table [dbo].[yaf_Buddy] add constraint IX_yaf_Buddy unique nonclustered([FromUserID],[ToUserID])
go

/*
** Foreign keys
*/


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Active_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] add constraint [FK_yaf_Active_yaf_Forum] foreign key (ForumID) references [dbo].[yaf_Forum] (ForumID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Active_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] add constraint [FK_yaf_Active_yaf_Topic] foreign key (TopicID) references [dbo].[yaf_Topic] (TopicID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Active_yaf_User' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] add constraint [FK_yaf_Active_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_CheckEmail_yaf_User' and parent_object_id=object_id('[dbo].[yaf_CheckEmail]') and type in (N'F'))
	alter table [dbo].[yaf_CheckEmail] add constraint [FK_yaf_CheckEmail_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Choice_yaf_Poll' and parent_object_id=object_id('[dbo].[yaf_Choice]') and type in (N'F'))
	alter table [dbo].[yaf_Choice] add constraint [FK_yaf_Choice_yaf_Poll] foreign key (PollID) references [dbo].[yaf_Poll] (PollID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_FavoriteTopic_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_FavoriteTopic]') and type in (N'F'))
	alter table [dbo].[yaf_FavoriteTopic] add constraint [FK_yaf_FavoriteTopic_yaf_Topic] foreign key (TopicID) references [dbo].[yaf_Topic] (TopicID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_FavoriteTopic_yaf_User' and parent_object_id=object_id('[dbo].[yaf_FavoriteTopic]') and type in (N'F'))
	alter table [dbo].[yaf_FavoriteTopic] add constraint [FK_yaf_FavoriteTopic_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserProfile_yaf_User' and parent_object_id=object_id('[dbo].[yaf_UserProfile]') and type in (N'F'))
	alter table [dbo].[yaf_UserProfile] add constraint [FK_yaf_UserProfile_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID) on delete cascade
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Forum_yaf_Category' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] add constraint [FK_yaf_Forum_yaf_Category] foreign key (CategoryID) references [dbo].[yaf_Category] (CategoryID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Forum_yaf_Message' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] add constraint [FK_yaf_Forum_yaf_Message] foreign key (LastMessageID) references [dbo].[yaf_Message] (MessageID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Forum_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] add constraint [FK_yaf_Forum_yaf_Topic] foreign key (LastTopicID) references [dbo].[yaf_Topic] (TopicID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Forum_yaf_User' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] add constraint [FK_yaf_Forum_yaf_User] foreign key (LastUserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_ForumAccess_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_ForumAccess]') and type in (N'F'))
	alter table [dbo].[yaf_ForumAccess] WITH NOCHECK add constraint [FK_yaf_ForumAccess_yaf_Forum] foreign key (ForumID) references [dbo].[yaf_Forum] (ForumID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_ForumAccess_yaf_Group' and parent_object_id=object_id('[dbo].[yaf_ForumAccess]') and type in (N'F'))
	alter table [dbo].[yaf_ForumAccess] WITH NOCHECK add constraint [FK_yaf_ForumAccess_yaf_Group] foreign key (GroupID) references [dbo].[yaf_Group] (GroupID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Message_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_Message]') and type in (N'F'))
	alter table [dbo].[yaf_Message] add constraint [FK_yaf_Message_yaf_Topic] foreign key (TopicID) references [dbo].[yaf_Topic] (TopicID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Message_yaf_User' and parent_object_id=object_id('[dbo].[yaf_Message]') and type in (N'F'))
	alter table [dbo].[yaf_Message] add constraint [FK_yaf_Message_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_PMessage_yaf_User1' and parent_object_id=object_id('[dbo].[yaf_PMessage]') and type in (N'F'))
	alter table [dbo].[yaf_PMessage] add constraint [FK_yaf_PMessage_yaf_User1] foreign key (FromUserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] add constraint [FK_yaf_Topic_yaf_Forum] foreign key (ForumID) references [dbo].[yaf_Forum] (ForumID) ON DELETE CASCADE
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_Message' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] add constraint [FK_yaf_Topic_yaf_Message] foreign key (LastMessageID) references [dbo].[yaf_Message] (MessageID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] add constraint [FK_yaf_Topic_yaf_Topic] foreign key (TopicMovedID) references [dbo].[yaf_Topic] (TopicID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_User' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] add constraint [FK_yaf_Topic_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_User2' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] add constraint [FK_yaf_Topic_yaf_User2] foreign key (LastUserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_WatchForum_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_WatchForum]') and type in (N'F'))
	alter table [dbo].[yaf_WatchForum] add constraint [FK_yaf_WatchForum_yaf_Forum] foreign key (ForumID) references [dbo].[yaf_Forum](ForumID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_WatchForum_yaf_User' and parent_object_id=object_id('[dbo].[yaf_WatchForum]') and type in (N'F'))
	alter table [dbo].[yaf_WatchForum] add constraint [FK_yaf_WatchForum_yaf_User] foreign key (UserID) references [dbo].[yaf_User](UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_WatchTopic_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_WatchTopic]') and type in (N'F'))
	alter table [dbo].[yaf_WatchTopic] add constraint [FK_yaf_WatchTopic_yaf_Topic] foreign key (TopicID) references [dbo].[yaf_Topic](TopicID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_WatchTopic_yaf_User' and parent_object_id=object_id('[dbo].[yaf_WatchTopic]') and type in (N'F'))
	alter table [dbo].[yaf_WatchTopic] add constraint [FK_yaf_WatchTopic_yaf_User] foreign key (UserID) references [dbo].[yaf_User](UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserGroup_yaf_User' and parent_object_id=object_id('[dbo].[yaf_UserGroup]') and type in (N'F'))
	alter table [dbo].[yaf_UserGroup] add constraint [FK_yaf_UserGroup_yaf_User] foreign key (UserID) references [dbo].[yaf_User](UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserGroup_yaf_Group' and parent_object_id=object_id('[dbo].[yaf_UserGroup]') and type in (N'F'))
	alter table [dbo].[yaf_UserGroup] add constraint [FK_yaf_UserGroup_yaf_Group] foreign key(GroupID) references [dbo].[yaf_Group] (GroupID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Attachment_yaf_User' and parent_object_id=object_id('[dbo].[yaf_Attachment]') and type in (N'F'))
	alter table [dbo].[yaf_Attachment] add constraint [FK_yaf_Attachment_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_NntpForum_yaf_NntpServer' and parent_object_id=object_id('[dbo].[yaf_NntpForum]') and type in (N'F'))
	alter table [dbo].[yaf_NntpForum] add constraint [FK_yaf_NntpForum_yaf_NntpServer] foreign key (NntpServerID) references [dbo].[yaf_NntpServer](NntpServerID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_NntpForum_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_NntpForum]') and type in (N'F'))
	alter table [dbo].[yaf_NntpForum] add constraint [FK_yaf_NntpForum_yaf_Forum] foreign key (ForumID) references [dbo].[yaf_Forum](ForumID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_NntpTopic_yaf_NntpForum' and parent_object_id=object_id('[dbo].[yaf_NntpTopic]') and type in (N'F'))
	alter table [dbo].[yaf_NntpTopic] add constraint [FK_yaf_NntpTopic_yaf_NntpForum] foreign key (NntpForumID) references [dbo].[yaf_NntpForum](NntpForumID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_NntpTopic_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_NntpTopic]') and type in (N'F'))
	alter table [dbo].[yaf_NntpTopic] add constraint [FK_yaf_NntpTopic_yaf_Topic] foreign key (TopicID) references [dbo].[yaf_Topic](TopicID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_ForumAccess_yaf_AccessMask' and parent_object_id=object_id('[dbo].[yaf_ForumAccess]') and type in (N'F'))
	alter table [dbo].[yaf_ForumAccess] add constraint [FK_yaf_ForumAccess_yaf_AccessMask] foreign key (AccessMaskID) references [dbo].[yaf_AccessMask] (AccessMaskID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserAlbumImage_yaf_UserAlbum' and parent_object_id=object_id('[dbo].[yaf_UserAlbumImage]') and type in (N'F'))
	alter table [dbo].[yaf_UserAlbumImage] add constraint [FK_yaf_UserAlbumImage_yaf_UserAlbum] foreign key (AlbumID) references [dbo].[yaf_UserAlbum] (AlbumID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserForum_yaf_User' and parent_object_id=object_id('[dbo].[yaf_UserForum]') and type in (N'F'))
	alter table [dbo].[yaf_UserForum] add constraint [FK_yaf_UserForum_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserForum_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_UserForum]') and type in (N'F'))
	alter table [dbo].[yaf_UserForum] add constraint [FK_yaf_UserForum_yaf_Forum] foreign key (ForumID) references [dbo].[yaf_Forum] (ForumID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserForum_yaf_AccessMask' and parent_object_id=object_id('[dbo].[yaf_UserForum]') and type in (N'F'))
	alter table [dbo].[yaf_UserForum] add constraint [FK_yaf_UserForum_yaf_AccessMask] foreign key (AccessMaskID) references [dbo].[yaf_AccessMask] (AccessMaskID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Category_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_Category]') and type in (N'F'))
	alter table [dbo].[yaf_Category] add constraint [FK_yaf_Category_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_AccessMask_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_AccessMask]') and type in (N'F'))
	alter table [dbo].[yaf_AccessMask] add constraint [FK_yaf_AccessMask_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Active_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_Active]') and type in (N'F'))
	alter table [dbo].[yaf_Active] add constraint [FK_yaf_Active_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_BannedIP_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_BannedIP]') and type in (N'F'))
	alter table [dbo].[yaf_BannedIP] add constraint [FK_yaf_BannedIP_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_BannedName_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_BannedName]') and type in (N'F'))
	alter table [dbo].[yaf_BannedName] add constraint [FK_yaf_BannedName_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_BannedEmail_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_BannedEmail]') and type in (N'F'))
	alter table [dbo].[yaf_BannedEmail] add constraint [FK_yaf_BannedEmail_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Group_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_Group]') and type in (N'F'))
	alter table [dbo].[yaf_Group] add constraint [FK_yaf_Group_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go

IF NOT EXISTS (
		SELECT TOP 1 1
		FROM sys.objects
		WHERE NAME = 'FK_yaf_GroupMedal_yaf_Group'
			AND parent_object_id = object_id('[dbo].[yaf_GroupMedal]')
			AND type IN (N'F')
		)
	ALTER TABLE [dbo].[yaf_GroupMedal]
		WITH CHECK ADD CONSTRAINT [FK_yaf_GroupMedal_yaf_Group] FOREIGN KEY (GroupID) REFERENCES [dbo].[yaf_Group](GroupID) ON DELETE CASCADE
GO

if not exists (select top 1 1 from sys.objects where name='FK_yaf_GroupMedal_yaf_Medal' and parent_object_id=object_id('[dbo].[yaf_GroupMedal]') and type in (N'F'))
	alter table [dbo].[yaf_GroupMedal] add constraint [FK_yaf_GroupMedal_yaf_Medal] foreign key(MedalID) references [dbo].[yaf_Medal] (MedalID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserMedal_yaf_User' and parent_object_id=object_id('[dbo].[yaf_UserMedal]') and type in (N'F'))
	alter table [dbo].[yaf_UserMedal] add constraint [FK_yaf_UserMedal_yaf_User] foreign key(UserID) references [dbo].[yaf_User] (UserID) on delete cascade
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserMedal_yaf_Medal' and parent_object_id=object_id('[dbo].[yaf_UserMedal]') and type in (N'F'))
	alter table [dbo].[yaf_UserMedal] add constraint [FK_yaf_UserMedal_yaf_Medal] foreign key(MedalID) references [dbo].[yaf_Medal] (MedalID)  on delete cascade
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserProfile_yaf_User' and parent_object_id=object_id('[dbo].[yaf_UserProfile]') and type in (N'F'))
	alter table [dbo].[yaf_UserProfile] add constraint [FK_yaf_UserProfile_yaf_User] foreign key(UserID) references [dbo].[yaf_User] (UserID)
go

 if not exists (select top 1 1 from sys.objects where name='FK_yaf_MessageReportedAudit_yaf_MessageReported' and parent_object_id=object_id('[dbo].[yaf_MessageReportedAudit]') and type in (N'F'))
	alter table [dbo].[yaf_MessageReportedAudit] add constraint [FK_yaf_MessageReportedAudit_yaf_MessageReported] foreign key(MessageID) references [dbo].[yaf_MessageReported] (MessageID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_NntpServer_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_NntpServer]') and type in (N'F'))
	alter table [dbo].[yaf_NntpServer] add constraint [FK_yaf_NntpServer_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Rank_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_Rank]') and type in (N'F'))
	alter table [dbo].[yaf_Rank] add constraint [FK_yaf_Rank_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_Smiley_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_Smiley]') and type in (N'F'))
	alter table [dbo].[yaf_Smiley] add constraint [FK_yaf_Smiley_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board] (BoardID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_User_yaf_Rank' and parent_object_id=object_id('[dbo].[yaf_User]') and type in (N'F'))
	alter table [dbo].[yaf_User] add constraint [FK_yaf_User_yaf_Rank] foreign key(RankID) references [dbo].[yaf_Rank](RankID)
go


if not exists (select top 1 1 from sys.objects where name='FK_yaf_User_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_User]') and type in (N'F'))
	alter table [dbo].[yaf_User] add constraint [FK_yaf_User_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board](BoardID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Forum_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] add constraint [FK_yaf_Forum_yaf_Forum] foreign key(ParentID) references [dbo].[yaf_Forum](ForumID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Message_yaf_Message' and parent_object_id=object_id('[dbo].[yaf_Message]') and type in (N'F'))
	alter table [dbo].[yaf_Message] add constraint [FK_yaf_Message_yaf_Message] foreign key(ReplyTo) references [dbo].[yaf_Message](MessageID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserPMessage_yaf_User' and parent_object_id=object_id('[dbo].[yaf_UserPMessage]') and type in (N'F'))
	alter table [dbo].[yaf_UserPMessage] add constraint [FK_yaf_UserPMessage_yaf_User] foreign key (UserID) references [dbo].[yaf_User] (UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_UserPMessage_yaf_PMessage' and parent_object_id=object_id('[dbo].[yaf_UserPMessage]') and type in (N'F'))
	alter table [dbo].[yaf_UserPMessage] add constraint [FK_yaf_UserPMessage_yaf_PMessage] foreign key (PMessageID) references [dbo].[yaf_PMessage] (PMessageID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Registry_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_Registry]') and type in (N'F'))
	alter table [dbo].[yaf_Registry] add constraint [FK_yaf_Registry_yaf_Board] foreign key(BoardID) references [dbo].[yaf_Board](BoardID) on delete cascade
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_PollVote_yaf_Poll' and parent_object_id=object_id('[dbo].[yaf_PollVote]') and type in (N'F'))
	alter table [dbo].[yaf_PollVote] add constraint [FK_yaf_PollVote_yaf_Poll] foreign key(PollID) references [dbo].[yaf_Poll](PollID) on delete cascade
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Poll_yaf_PollGroupCluster' and parent_object_id=object_id('[dbo].[yaf_Poll]') and type in (N'F'))
	alter table [dbo].[yaf_Poll] add constraint [FK_yaf_Poll_yaf_PollGroupCluster] foreign key(PollGroupID) references [dbo].[yaf_PollGroupCluster](PollGroupID)  on delete cascade 
go

 if not exists (select top 1 1 from sys.objects where name='FK_yaf_Topic_yaf_PollGroupCluster' and parent_object_id=object_id('[dbo].[yaf_Topic]') and type in (N'F'))
	alter table [dbo].[yaf_Topic] add constraint [FK_yaf_Topic_yaf_PollGroupCluster] foreign key(PollID) references [dbo].[yaf_PollGroupCluster](PollGroupID)  

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Forum_yaf_PollGroupCluster' and parent_object_id=object_id('[dbo].[yaf_Forum]') and type in (N'F'))
	alter table [dbo].[yaf_Forum] add constraint [FK_yaf_Forum_yaf_PollGroupCluster] foreign key(PollGroupID) references [dbo].[yaf_PollGroupCluster](PollGroupID)  

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Category_yaf_PollGroupCluster' and parent_object_id=object_id('[dbo].[yaf_Category]') and type in (N'F'))
	alter table [dbo].[yaf_Category] add constraint [FK_yaf_Category_yaf_PollGroupCluster] foreign key(PollGroupID) references [dbo].[yaf_PollGroupCluster](PollGroupID)  

if not exists (select top 1 1 from sys.objects where name='FK_yaf_EventLog_yaf_User' and parent_object_id=object_id('[dbo].[yaf_EventLog]') and type in (N'F'))
	alter table [dbo].[yaf_EventLog] add constraint [FK_yaf_EventLog_yaf_User] foreign key(UserID) references [dbo].[yaf_User](UserID) on delete cascade
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Extension_yaf_Board' and parent_object_id=object_id('[dbo].[yaf_Extension]') and type in (N'F'))
	alter table [dbo].[yaf_Extension] add constraint [FK_yaf_Extension_yaf_Board] foreign key(BoardId) references [dbo].[yaf_Board](BoardID) on delete cascade
go

if not exists (select top 1 1 from sys.objects where name=N'FK_yaf_BBCode_Board' and parent_object_id=object_id(N'[dbo].[yaf_BBCode]') and type in (N'F'))
    ALTER TABLE [dbo].[yaf_BBCode] ADD CONSTRAINT [FK_yaf_BBCode_Board] FOREIGN KEY([BoardID]) REFERENCES [dbo].[yaf_Board] ([BoardID]) ON DELETE NO ACTION
GO

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Buddy_yaf_User' and parent_object_id=object_id('[dbo].[yaf_Buddy]') and type in (N'F'))
	alter table [dbo].[yaf_Buddy] add constraint [FK_yaf_Buddy_yaf_User] foreign key(FromUserID) references [dbo].[yaf_User] (UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_Thanks_yaf_User' and parent_object_id=object_id('[dbo].[yaf_Thanks]') and type in (N'F'))
	alter table [dbo].[yaf_Thanks] add constraint [FK_yaf_Thanks_yaf_User] foreign key (ThanksFromUserID) references [dbo].[yaf_User](UserID)
go

if not exists (select top 1 1 from sys.objects where name=N'FK_yaf_MessageHistory_MessageID' and parent_object_id=object_id(N'[dbo].[yaf_MessageHistory]') and type in (N'F'))
    ALTER TABLE [dbo].[yaf_MessageHistory] ADD CONSTRAINT [FK_yaf_MessageHistory_MessageID] FOREIGN KEY([MessageID]) REFERENCES [dbo].[yaf_Message] ([MessageID]) 

if not exists (select top 1 1 from sys.objects where name='FK_yaf_ForumReadTracking_yaf_User' and parent_object_id=object_id('[dbo].[yaf_ForumReadTracking]') and type in (N'F'))
	alter table [dbo].[yaf_ForumReadTracking] add constraint [FK_yaf_ForumReadTracking_yaf_User] foreign key (UserID) references [dbo].[yaf_User](UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_ForumReadTracking_yaf_Forum' and parent_object_id=object_id('[dbo].[yaf_ForumReadTracking]') and type in (N'F'))
	alter table [dbo].[yaf_ForumReadTracking] add constraint [FK_yaf_ForumReadTracking_yaf_Forum] foreign key (ForumID) references [dbo].[yaf_Forum](ForumID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_TopicReadTracking_yaf_User' and parent_object_id=object_id('[dbo].[yaf_TopicReadTracking]') and type in (N'F'))
	alter table [dbo].[yaf_TopicReadTracking] add constraint [FK_yaf_TopicReadTracking_yaf_User] foreign key (UserID) references [dbo].[yaf_User](UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_TopicReadTracking_yaf_Topic' and parent_object_id=object_id('[dbo].[yaf_TopicReadTracking]') and type in (N'F'))
	alter table [dbo].[yaf_TopicReadTracking] add constraint [FK_yaf_TopicReadTracking_yaf_Topic] foreign key (TopicID) references [dbo].[yaf_Topic](TopicID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_ReputationVote_yaf_User_From' and parent_object_id=object_id('[dbo].[yaf_ReputationVote]') and type in (N'F'))
	alter table [dbo].[yaf_ReputationVote] add constraint [FK_yaf_ReputationVote_yaf_User_From] foreign key (ReputationFromUserID) references [dbo].[yaf_User](UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_ReputationVote_yaf_User_To' and parent_object_id=object_id('[dbo].[yaf_ReputationVote]') and type in (N'F'))
	alter table [dbo].[yaf_ReputationVote] add constraint [FK_yaf_ReputationVote_yaf_User_To] foreign key (ReputationToUserID) references [dbo].[yaf_User](UserID)
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_AdminPageUserAccess_yaf_UserID' and parent_object_id=object_id('[dbo].[yaf_AdminPageUserAccess]') and type in (N'F'))
	alter table [dbo].[yaf_AdminPageUserAccess] add constraint [FK_yaf_AdminPageUserAccess_yaf_UserID] foreign key (UserID) references [dbo].[yaf_User](UserID) ON DELETE CASCADE
go

if not exists (select top 1 1 from sys.objects where name='FK_yaf_EventLogGroupAccess_yaf_GroupID' and parent_object_id=object_id('[dbo].[yaf_EventLogGroupAccess]') and type in (N'F'))
	alter table [dbo].[yaf_EventLogGroupAccess] add constraint [FK_yaf_EventLogGroupAccess_yaf_GroupID] foreign key (GroupID) references [dbo].[yaf_Group](GroupID) ON DELETE CASCADE
go

/* Default Constraints */
if OBJECTPROPERTY(OBJECT_ID('DF_yaf_Message_Flags'), 'IsConstraint')= 0
    alter table [dbo].[yaf_Message] add constraint [DF_yaf_Message_Flags] default (23) for Flags
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_Rank_PMLimit'), 'IsConstraint')= 0
	alter table [dbo].[yaf_Rank] add constraint [DF_yaf_Rank_PMLimit] default (0) for PMLimit
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_Group_PMLimit'), 'IsConstraint')= 0
	alter table [dbo].[yaf_Group] add constraint [DF_yaf_Group_PMLimit] default (30) for PMLimit
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_User_PMNotification'), 'IsConstraint')= 0
	alter table [dbo].[yaf_User] add constraint [DF_yaf_User_PMNotification] default (1) for PMNotification
go

if OBJECTPROPERTY(OBJECT_ID('[DF_EventLog_EventTime'), 'IsConstraint')= 1
	alter table [dbo].[yaf_EventLog] drop constraint [DF_EventLog_EventTime]
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_EventLog_EventTime'), 'IsConstraint')= 1
	alter table [dbo].[yaf_EventLog] drop constraint [DF_yaf_EventLog_EventTime]
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_EventLog_EventTime'), 'IsConstraint')= 0
	alter table [dbo].[yaf_EventLog] add constraint [DF_yaf_EventLog_EventTime] default(GETUTCDATE() ) for EventTime
go

exec('[dbo].[yaf_drop_defaultconstraint_oncolumn] yaf_ActiveAccess, IsGuestX')
GO

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_ActiveAccess_IsGuestX'), 'IsConstraint')= 0
	alter table [dbo].[yaf_ActiveAccess] add constraint [DF_yaf_ActiveAccess_IsGuestX] default(0) for IsGuestX
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_EventLog_Type'), 'IsConstraint')= 0
	alter table [dbo].[yaf_EventLog] add constraint [DF_yaf_EventLog_Type] default(0) for Type
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_Extension_BoardID'), 'IsConstraint')= 0
	alter table [dbo].[yaf_Extension] add constraint [DF_yaf_Extension_BoardID] default(1) for BoardID
go

if OBJECTPROPERTY(OBJECT_ID('DF_yaf_ActiveAccess_IsGuestX'), 'IsConstraint')= 0
	alter table [dbo].[yaf_ActiveAccess] add constraint [DF_yaf_ActiveAccess_IsGuestX] default(1) for BoardID
go

-- /***** VIEWS ******/

-- /****** Object:  Index [yaf_vaccess_user_UserForum]    Script Date: 09/28/2009 22:30:20 ******/
-- IF NOT exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_user]') AND name = N'yaf_vaccess_user_UserForum_PK')
-- SET ARITHABORT ON
-- CREATE UNIQUE CLUSTERED INDEX [yaf_vaccess_user_UserForum_PK] ON [dbo].[yaf_vaccess_user] 
-- (
	-- [UserID] ASC,
	-- [ForumID] ASC,
	-- [AccessMaskID] ASC,
	-- [GroupID] ASC
-- )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
-- GO

-- /****** Object:  Index [yaf_vaccess_null_UserForum]    Script Date: 09/28/2009 22:30:36 ******/
-- IF NOT exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_null]') AND name = N'yaf_vaccess_null_UserForum_PK')
-- SET ARITHABORT ON
-- CREATE UNIQUE CLUSTERED INDEX [yaf_vaccess_null_UserForum_PK] ON [dbo].[yaf_vaccess_null] 
-- (
	-- [UserID] ASC,
	-- [ForumID] ASC,
	-- [AccessMaskID] ASC,
	-- [GroupID] ASC
-- )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
-- GO

-- /****** Object:  Index [yaf_vaccess_group_UserGroup]    Script Date: 09/28/2009 22:30:55 ******/
-- IF NOT exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_group]') AND name = N'yaf_vaccess_group_UserForum_PK')
-- SET ARITHABORT ON
-- CREATE UNIQUE CLUSTERED INDEX [yaf_vaccess_group_UserForum_PK] ON [dbo].[yaf_vaccess_group] 
-- (
	-- [UserID] ASC,
	-- [ForumID] ASC,
	-- [AccessMaskID] ASC,
	-- [GroupID] ASC
-- ) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
-- GO

--================================== TRIGGERS ========================================

IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = object_id(N'[dbo].[yaf_Active_insert]')
			AND type IN (N'TR')
		)
	DROP TRIGGER [dbo].[yaf_Active_insert]
GO

IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = object_id(N'[dbo].[yaf_Forum_update]')
			AND type IN (N'TR')
		)
	DROP TRIGGER [dbo].[yaf_Forum_update]
GO

IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = object_id(N'[dbo].[yaf_Group_update]')
			AND type IN (N'TR')
		)
	DROP TRIGGER [dbo].[yaf_Group_update]
GO

IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = object_id(N'[dbo].[yaf_Group_insert]')
			AND type IN (N'TR')
		)
	DROP TRIGGER [dbo].[yaf_Group_insert]
GO

IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = object_id(N'[dbo].[yaf_UserGroup_insert]')
			AND type IN (N'TR')
		)
	DROP TRIGGER [dbo].[yaf_UserGroup_insert]
GO

IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = object_id(N'[dbo].[yaf_UserGroup_delete]')
			AND type IN (N'TR')
		)
	DROP TRIGGER [dbo].[yaf_UserGroup_delete]
GO

--==================================== VIEWS =========================================

/****** Object:  Index [yaf_vaccess_user_UserForum]    Script Date: 09/28/2009 22:30:20 ******/
IF  exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_user]') AND name = N'yaf_vaccess_user_UserForum_PK')
DROP INDEX  [yaf_vaccess_user_UserForum_PK] ON [dbo].[yaf_vaccess_user]
GO

/****** Object:  Index [yaf_vaccess_null_UserForum]    Script Date: 09/28/2009 22:30:36 ******/
IF  exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_null]') AND name = N'yaf_vaccess_null_UserForum_PK')
DROP INDEX  [yaf_vaccess_null_UserForum_PK] ON [dbo].[yaf_vaccess_null]
GO

/****** Object:  Index [yaf_vaccess_group_UserGroup]    Script Date: 09/28/2009 22:30:55 ******/
IF  exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_group]') AND name = N'yaf_vaccess_group_UserForum_PK')
DROP INDEX [yaf_vaccess_group_UserForum_PK] ON [dbo].[yaf_vaccess_group]
GO

-- drop views

/****** Object:  View [dbo].[yaf_vaccess]    Script Date: 10/27/2009 21:42:29 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess]') AND type in (N'V'))
DROP VIEW [dbo].[yaf_vaccess]
GO

/****** Object:  View [dbo].[yaf_vaccessfull]    Script Date: 10/27/2009 21:42:29 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccessfull]') AND type in (N'V'))
DROP VIEW [dbo].[yaf_vaccessfull]
GO

/****** Object:  View [dbo].[yaf_vaccess_group]    Script Date: 10/27/2009 21:42:29 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_group]') AND type in (N'V'))
DROP VIEW [dbo].[yaf_vaccess_group]
GO

/****** Object:  View [dbo].[yaf_vaccess_null]    Script Date: 10/27/2009 21:42:29 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_null]') AND type in (N'V'))
DROP VIEW [dbo].[yaf_vaccess_null]
GO

/****** Object:  View [dbo].[yaf_vaccess_user]    Script Date: 10/27/2009 21:42:29 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_user]') AND type in (N'V'))
DROP VIEW [dbo].[yaf_vaccess_user]
GO

/****** Object:  View [dbo].[yaf_PMessageView]    Script Date: 10/27/2009 21:42:29 ******/
IF  exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_PMessageView]') AND type in (N'V'))
DROP VIEW [dbo].[yaf_PMessageView]
GO

IF NOT exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_group]') AND type in (N'V'))
EXEC sys.sp_executesql @statement = N'CREATE VIEW [dbo].[yaf_vaccess_group]
WITH SCHEMABINDING
AS
        select
            b.UserID,
            c.ForumID,
            d.AccessMaskID,
            b.GroupID,
            ReadAccess		= convert(int,d.Flags & 1),
            PostAccess		= convert(int,d.Flags & 2),
            ReplyAccess		= convert(int,d.Flags & 4),
            PriorityAccess	= convert(int,d.Flags & 8),
            PollAccess		= convert(int,d.Flags & 16),
            VoteAccess		= convert(int,d.Flags & 32),
            ModeratorAccess	= convert(int,d.Flags & 64),
            EditAccess		= convert(int,d.Flags & 128),
            DeleteAccess	= convert(int,d.Flags & 256),
            UploadAccess	= convert(int,d.Flags & 512),
            DownloadAccess	= convert(int,d.Flags & 1024),
            AdminGroup		= convert(int,e.Flags & 1)
        from
            [dbo].[yaf_UserGroup] b
            INNER JOIN [dbo].[yaf_ForumAccess] c on c.GroupID=b.GroupID
            INNER JOIN [dbo].[yaf_AccessMask] d on d.AccessMaskID=c.AccessMaskID
            INNER JOIN [dbo].[yaf_Group] e on e.GroupID=b.GroupID' 
GO

IF NOT exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_null]') AND type in (N'V'))
EXEC sys.sp_executesql @statement = N'CREATE VIEW [dbo].[yaf_vaccess_null]
WITH SCHEMABINDING
AS
        select
            a.UserID,
            ForumID			  = convert(int,0),
            AccessMaskID  = convert(int,0),
            GroupID				= convert(int,0),
            ReadAccess		= convert(int,0),
            PostAccess		= convert(int,0),
            ReplyAccess		= convert(int,0),
            PriorityAccess	= convert(int,0),
            PollAccess		= convert(int,0),
            VoteAccess		= convert(int,0),
            ModeratorAccess	= convert(int,0),
            EditAccess		= convert(int,0),
            DeleteAccess	= convert(int,0),
            UploadAccess	= convert(int,0),
            DownloadAccess	= convert(int,0),
            AdminGroup		= convert(int,0)
        from
            [dbo].[yaf_User] a' 
GO


IF NOT exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_user]') AND type in (N'V'))
EXEC sys.sp_executesql @statement = N'CREATE VIEW [dbo].[yaf_vaccess_user]
WITH SCHEMABINDING
AS
    SELECT
            b.UserID,
            b.ForumID,
            c.AccessMaskID,
            GroupID				= convert(int,0),
            ReadAccess		= convert(int,c.Flags & 1),
            PostAccess		= convert(int,c.Flags & 2),
            ReplyAccess		= convert(int,c.Flags & 4),
            PriorityAccess	= convert(int,c.Flags & 8),
            PollAccess		= convert(int,c.Flags & 16),
            VoteAccess		= convert(int,c.Flags & 32),
            ModeratorAccess	= convert(int,c.Flags & 64),
            EditAccess		= convert(int,c.Flags & 128),
            DeleteAccess	= convert(int,c.Flags & 256),
            UploadAccess	= convert(int,c.Flags & 512),
            DownloadAccess	= convert(int,c.Flags & 1024),
            AdminGroup		= convert(int,0)
        from
            [dbo].[yaf_UserForum] b
            INNER JOIN [dbo].[yaf_AccessMask] c on c.AccessMaskID=b.AccessMaskID' 
GO


IF NOT exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccessfull]') AND type in (N'V'))
EXEC sys.sp_executesql @statement = N'CREATE VIEW [dbo].[yaf_vaccessfull]
WITH SCHEMABINDING
AS

select 
            UserID,
            ForumID,
                      MAX(ReadAccess) AS ReadAccess, MAX(PostAccess) AS PostAccess, MAX(ReplyAccess) AS ReplyAccess, MAX(PriorityAccess) AS PriorityAccess, 
                      MAX(PollAccess) AS PollAccess, MAX(VoteAccess) AS VoteAccess, MAX(ModeratorAccess) AS ModeratorAccess, MAX(EditAccess) AS EditAccess, 
                      MAX(DeleteAccess) AS DeleteAccess, MAX(UploadAccess) AS UploadAccess, MAX(DownloadAccess) AS DownloadAccess, MAX(AdminGroup) as AdminGroup
        FROM (
        select
            UserID,
            ForumID,
            ReadAccess		,
            PostAccess		,
            ReplyAccess		,
            PriorityAccess	,
            PollAccess		,
            VoteAccess		,
            ModeratorAccess	,
            EditAccess		,
            DeleteAccess	,
            UploadAccess	,
            DownloadAccess	,
            AdminGroup		
        from
            [dbo].[yaf_vaccess_user] b
        
        union all
        
        select
            UserID,
            ForumID,
            ReadAccess		,
            PostAccess		,
            ReplyAccess		,
            PriorityAccess	,
            PollAccess		,
            VoteAccess		,
            ModeratorAccess	,
            EditAccess		,
            DeleteAccess	,
            UploadAccess	,
            DownloadAccess	,
            AdminGroup	
        from
            [dbo].[yaf_vaccess_group] b

        union all

        select
            UserID,
            ForumID,
            ReadAccess		,
            PostAccess		,
            ReplyAccess		,
            PriorityAccess	,
            PollAccess		,
            VoteAccess		,
            ModeratorAccess	,
            EditAccess		,
            DeleteAccess	,
            UploadAccess	,
            DownloadAccess	,
            AdminGroup	
        from
            [dbo].[yaf_vaccess_null] b
) access
    GROUP BY
        UserID,ForumID' 
GO


IF NOT exists (select top 1 1 from sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess]') AND type in (N'V'))
EXEC sys.sp_executesql @statement = N'/****** Object:  View [dbo].[yaf_vaccess]    Script Date: 09/28/2009 22:26:00 ******/
CREATE VIEW [dbo].[yaf_vaccess]
AS
    SELECT
        UserID				= a.UserID,
        ForumID				= x.ForumID,
        IsAdmin				= max(convert(int,b.Flags & 1)),
        IsForumModerator	= max(convert(int,b.Flags & 8)),
        IsModerator			= (select count(1) from [dbo].[yaf_UserGroup] v1,[dbo].[yaf_Group] w2,[dbo].[yaf_ForumAccess] x,[dbo].[yaf_AccessMask] y where v1.UserID=a.UserID and w2.GroupID=v1.GroupID and x.GroupID=w2.GroupID and y.AccessMaskID=x.AccessMaskID and (y.Flags & 64)<>0),
        ReadAccess			= max(x.ReadAccess),
        PostAccess			= max(x.PostAccess),
        ReplyAccess			= max(x.ReplyAccess),
        PriorityAccess		= max(x.PriorityAccess),
        PollAccess			= max(x.PollAccess),
        VoteAccess			= max(x.VoteAccess),
        ModeratorAccess		= max(x.ModeratorAccess),
        EditAccess			= max(x.EditAccess),
        DeleteAccess		= max(x.DeleteAccess),
        UploadAccess		= max(x.UploadAccess),		
        DownloadAccess		= max(x.DownloadAccess)			
    FROM
        [dbo].[yaf_vaccessfull] as x WITH(NOLOCK)
        INNER JOIN [dbo].[yaf_UserGroup] a WITH(NOLOCK) on a.UserID=x.UserID
        INNER JOIN [dbo].[yaf_Group] b WITH(NOLOCK) on b.GroupID=a.GroupID
    GROUP BY
        a.UserID,x.ForumID' 
GO

/***** VIEWS ******/

/****** Object:  Index [yaf_vaccess_user_UserForum]    Script Date: 09/28/2009 22:30:20 ******/
IF NOT exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_user]') AND name = N'yaf_vaccess_user_UserForum_PK')
SET ARITHABORT ON
CREATE UNIQUE CLUSTERED INDEX [yaf_vaccess_user_UserForum_PK] ON [dbo].[yaf_vaccess_user] 
(
	[UserID] ASC,
	[ForumID] ASC,
	[AccessMaskID] ASC,
	[GroupID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

GO

/****** Object:  Index [yaf_vaccess_null_UserForum]    Script Date: 09/28/2009 22:30:36 ******/
IF NOT exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_null]') AND name = N'yaf_vaccess_null_UserForum_PK')
SET ARITHABORT ON
CREATE UNIQUE CLUSTERED INDEX [yaf_vaccess_null_UserForum_PK] ON [dbo].[yaf_vaccess_null] 
(
	[UserID] ASC,
	[ForumID] ASC,
	[AccessMaskID] ASC,
	[GroupID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

GO

/****** Object:  Index [yaf_vaccess_group_UserGroup]    Script Date: 09/28/2009 22:30:55 ******/
IF NOT exists (select top 1 1 from sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[yaf_vaccess_group]') AND name = N'yaf_vaccess_group_UserForum_PK')
SET ARITHABORT ON
CREATE UNIQUE CLUSTERED INDEX [yaf_vaccess_group_UserForum_PK] ON [dbo].[yaf_vaccess_group] 
(
	[UserID] ASC,
	[ForumID] ASC,
	[AccessMaskID] ASC,
	[GroupID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

GO

UPDATE yaf_Registry SET [Value]='60' WHERE RegistryID=1

GO

UPDATE yaf_Registry SET [Value]='2.2.3' WHERE RegistryID=2

GO