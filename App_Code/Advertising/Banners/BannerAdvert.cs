using System;
using System.IO;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using Prem.PTC.Utils;

namespace Prem.PTC.Advertising
{
    [Serializable]
    public class BannerAdvert : Advert<IBannerAdvertPack>
    {
        #region Columns

        public static new string TableName { get { return AppSettings.TableNames.BannerAdverts; } }
        protected override string dbTable { get { return TableName; } }

        public static new class Columns
        {
            public const string Id = "BannerAdvertId";
            public const string AdvertPackId = "BannerAdvertPackId";
            public const string ImagePath = "ImagePath";
            public const string Type = "Type";
        }

        [Column(Columns.Id, IsPrimaryKey = true)]
        public override int Id { get { return _id; } protected set { _id = value; SetUpToDateAsFalse(); } }

        [Column(Columns.AdvertPackId)]
        protected override int? AdvertPackId { get { return _bannerAdvertPackId; } set { _bannerAdvertPackId = value; SetUpToDateAsFalse(); } }

        [Column(Columns.ImagePath)]
        public string ImagePath { get { return _imagePath; } set { _imagePath = value; SetUpToDateAsFalse(); } }

        [Column("BannerHTML")]
        public string BannerHTML { get { return _BannerHTML; } set { _BannerHTML = value; SetUpToDateAsFalse(); } }

        [Column("BannerAdvertDimensionId")]
        protected int BannerAdvertDimensionId { get { return _BannerAdvertDimensionId; } set { _BannerAdvertDimensionId = value; SetUpToDateAsFalse(); } }

        public bool IsGeolocated { get { return BannedCountries != null && BannedCountries.Count > 0; } protected set { _isGeolocated = value; SetUpToDateAsFalse(); } }

        private int _id, _type, _BannerAdvertDimensionId;
        private int? _bannerAdvertPackId;
        private string _imagePath, _BannerHTML;
        private bool _isGeolocated;
        private BannerAdvertDimensions dimensions = null;

        #endregion

        [Obsolete]
        public enum Type
        {
            Null = 0,
            Normal = 1,
            Constant = 2
        }

        /// <summary>
        /// Dynamic = Generated by HTML code, not with static image
        /// </summary> 
        public bool IsDynamic
        {
            get
            {
                return (!String.IsNullOrWhiteSpace(this.BannerHTML));
            }
        }

        public BannerAdvertDimensions Dimensions
        {
            get
            {
                if (dimensions == null && Id > 0) //Already in the database
                    dimensions = new BannerAdvertDimensions(BannerAdvertDimensionId);
                return dimensions;
            }
            set { BannerAdvertDimensionId = value.Id; }
        }

        private Banner _bannerImage;
        public Banner BannerImage
        {
            get { return _bannerImage; }
            set
            {
                _bannerImage = value;
                SetUpToDateAsFalse();
            }
        }

        /// <summary>
        /// Sets all properties of pack except from Price
        /// </summary>
        public override IBannerAdvertPack Pack
        {
            get { return (AdvertPackId != null) ? new BannerAdverPackIdProxy(AdvertPackId.Value) : null; }
            set
            {
                AdvertPackId = value.Id;
                Ends = value.Ends;
            }
        }


        #region Constructors

        /// <summary>
        /// Creates blank instance of BannerAdvert class
        /// </summary>
        public BannerAdvert()
            : base()
        {
            _bannedCountries = new StateHashableSet<string>(new HashSet<string>());
            _geolocationList = new List<BannerAdvertGeolocation>();
            AdvertPackId = NotInDatabaseId;
        }

        public BannerAdvert(int id)
            : base(id)
        {
            //initBanner(ImagePath);
            _bannedCountries = new StateHashableSet<string>(new HashSet<string>());
            selectBannedCountries();
        }

        public BannerAdvert(DataRow row, bool isUpToDate = true)
            : base(row, isUpToDate)
        {
            string imagePath = row.Field<string>(BannerAdvert.Columns.ImagePath);
            //initBanner(imagePath);
            _bannedCountries = new StateHashableSet<string>(new HashSet<string>());
            selectBannedCountries();
        }

        private void initBanner(string imagePath)
        {
            try { _bannerImage = Banner.FromFile(imagePath); }
            catch (FileNotFoundException ex)
            {
                ErrorLogger.Log(ex);
                _bannerImage = Banner.Empty;
            }
        }

        #endregion

        public override bool IsUpToDate
        {
            get
            {
                var currentHashCode = _bannedCountries.HashState;
                return base.IsUpToDate && currentHashCode == _bannedCountriesInitialHashCode;
            }
        }

        private List<BannerAdvertGeolocation> _geolocationList;
        private long _bannedCountriesInitialHashCode;

        /// <exception cref="DbException" />
        public ISet<String> BannedCountries { get { return _bannedCountries; } }

        private StateHashableSet<string> _bannedCountries;

        private void selectBannedCountries()
        {
            var where = TableHelper.MakeDictionary(BannerAdvertGeolocation.Columns.AdvertId, Id);

            _geolocationList = TableHelper.SelectRows<BannerAdvertGeolocation>(where);
            BannedCountries.Clear();
            BannedCountries.UnionWith(from row in _geolocationList
                                      select row.BannedCountry);
            _bannedCountriesInitialHashCode = _bannedCountries.HashState;
        }



        /// <exception cref="DbException" />
        public void Save(bool forceSave = false, bool IsFromAdminPanel = false, string baseurl = "")
        {
            bannerImage_PreSave(IsFromAdminPanel);
            base.Save(forceSave);
            SaveGeolocation(forceSave);
        }

        public void SaveGeolocation(bool forceSave)
        {
            if (!IsUpToDate || forceSave)
            {
                var toInsertList = from bannedCountry in BannedCountries
                                   where !(from geolocationItem in _geolocationList
                                           select geolocationItem.BannedCountry).Contains(bannedCountry)
                                   select bannedCountry;

                var toDeleteList = new List<BannerAdvertGeolocation>();

                foreach (var geolocatedCountrySQL in _geolocationList)
                {
                    if (!BannedCountries.Contains(geolocatedCountrySQL.BannedCountry))
                        toDeleteList.Add(geolocatedCountrySQL);

                }

                foreach (var toInsertItem in toInsertList)
                {
                    var newItem = new BannerAdvertGeolocation(Id, toInsertItem);
                    newItem.Save();
                    _geolocationList.Add(newItem);
                }

                foreach (var toDeteteItem in toDeleteList)
                {
                    _geolocationList.Remove(toDeteteItem);
                    toDeteteItem.Delete();
                }

                _bannedCountriesInitialHashCode = _bannedCountries.HashState;
            }
        }

        public void DeleteGeolocations()
        {
            //
            TableHelper.DeleteRows<BannerAdvertGeolocation>(BannerAdvertGeolocation.Columns.AdvertId, Id);
            BannedCountries.Clear();
        }

        public override void Click()
        {
            BannerImpressionsCache.AddBannerImpression(Id);
        }

        private void bannerImage_PreSave(bool IsFromAdminPanel)
        {
            if (_bannerImage != null)
            {
                if (!_bannerImage.IsSaved)
                {
                    if (IsFromAdminPanel)
                        _bannerImage.SaveOnClient(AppSettings.FolderPaths.BannerAdvertImages);
                    else
                        _bannerImage.Save(AppSettings.FolderPaths.BannerAdvertImages);
                }

                ImagePath = _bannerImage.Path;
            }
        }

        /// <exception cref="DbException"/>
        public static void Delete(int id)
        {
            TableHelper.DeleteRows<BannerAdvert>(BannerAdvert.Columns.Id, id);
        }
    }
}